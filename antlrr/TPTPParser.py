# Generated from TPTP.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,108,1773,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,1,0,5,0,466,8,0,10,0,12,0,469,9,0,1,0,1,0,1,1,
        1,1,3,1,475,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,483,8,2,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,3,10,546,8,10,1,11,
        1,11,1,11,1,11,3,11,552,8,11,1,12,1,12,1,12,3,12,557,8,12,1,13,1,
        13,1,13,1,13,1,13,1,13,3,13,565,8,13,1,14,1,14,1,14,3,14,570,8,14,
        1,15,1,15,1,15,1,15,1,16,1,16,1,16,3,16,579,8,16,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,5,17,589,8,17,10,17,12,17,592,9,17,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,602,8,18,10,18,12,18,605,
        9,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,615,8,19,10,19,
        12,19,618,9,19,1,20,1,20,1,20,3,20,623,8,20,1,21,1,21,3,21,627,8,
        21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,636,8,22,1,23,1,23,1,
        23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,3,25,652,
        8,25,1,26,1,26,1,26,1,26,1,27,1,27,3,27,660,8,27,1,28,1,28,1,28,
        1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,3,30,673,8,30,1,31,1,31,
        3,31,677,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,687,8,
        32,1,33,1,33,3,33,691,8,33,1,34,1,34,1,34,1,34,1,35,1,35,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,3,37,712,
        8,37,1,38,1,38,1,38,1,38,1,38,3,38,719,8,38,1,39,1,39,1,39,1,39,
        1,39,3,39,726,8,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,
        3,41,737,8,41,1,42,1,42,1,42,1,42,1,42,1,42,3,42,745,8,42,1,43,1,
        43,1,43,1,43,1,43,3,43,752,8,43,1,44,1,44,1,44,1,44,1,44,3,44,759,
        8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,3,45,776,8,45,1,46,1,46,1,47,1,47,5,47,782,8,47,10,
        47,12,47,785,9,47,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,
        49,1,49,3,49,798,8,49,1,50,1,50,1,50,3,50,803,8,50,1,51,1,51,1,52,
        1,52,1,53,1,53,1,53,3,53,812,8,53,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,3,54,822,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        5,55,832,8,55,10,55,12,55,835,9,55,1,56,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,5,56,845,8,56,10,56,12,56,848,9,56,1,57,1,57,1,57,1,57,
        1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,60,1,60,1,60,3,60,865,
        8,60,1,61,1,61,1,61,1,61,1,61,1,61,3,61,873,8,61,1,62,1,62,3,62,
        877,8,62,1,63,1,63,1,63,1,63,1,64,1,64,3,64,885,8,64,1,65,1,65,1,
        65,1,65,1,65,1,65,1,65,1,65,5,65,895,8,65,10,65,12,65,898,9,65,1,
        66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,5,66,908,8,66,10,66,12,66,
        911,9,66,1,67,1,67,1,67,3,67,916,8,67,1,68,1,68,3,68,920,8,68,1,
        69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,929,8,69,1,70,1,70,1,71,1,
        71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,3,72,945,8,
        72,1,73,1,73,3,73,949,8,73,1,74,1,74,1,74,1,74,1,75,1,75,3,75,957,
        8,75,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,78,1,78,1,78,3,78,969,
        8,78,1,79,1,79,1,79,1,79,1,79,1,79,3,79,977,8,79,1,80,1,80,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,989,8,81,1,82,1,82,1,82,
        1,82,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1001,8,83,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,3,85,1016,8,85,
        1,86,1,86,1,86,1,86,1,86,3,86,1023,8,86,1,87,1,87,1,87,1,87,1,87,
        3,87,1030,8,87,1,88,1,88,1,88,1,88,1,89,1,89,3,89,1038,8,89,1,90,
        1,90,1,90,1,90,1,90,3,90,1045,8,90,1,91,1,91,1,91,1,91,1,91,1,91,
        1,92,1,92,1,92,3,92,1056,8,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
        1,93,3,93,1066,8,93,1,94,1,94,1,94,1,94,1,94,3,94,1073,8,94,1,95,
        1,95,5,95,1077,8,95,10,95,12,95,1080,9,95,1,96,1,96,1,96,1,97,1,
        97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1093,8,97,1,98,1,98,3,98,1097,
        8,98,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1105,8,99,1,100,1,100,1,
        100,1,100,1,100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,
        3,101,1120,8,101,1,102,1,102,1,102,1,102,1,102,3,102,1127,8,102,
        1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        1,103,1,103,3,103,1142,8,103,1,104,1,104,1,104,1,104,1,104,3,104,
        1149,8,104,1,105,1,105,1,105,1,105,1,106,1,106,1,106,1,106,1,106,
        1,106,1,106,1,106,5,106,1163,8,106,10,106,12,106,1166,9,106,1,107,
        1,107,1,107,1,107,1,108,1,108,1,108,1,108,1,108,3,108,1177,8,108,
        1,109,1,109,1,109,1,109,1,110,1,110,1,110,1,110,1,111,1,111,1,111,
        1,111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        3,112,1201,8,112,1,113,1,113,1,113,1,113,1,113,3,113,1208,8,113,
        1,114,1,114,3,114,1212,8,114,1,115,1,115,1,116,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,3,116,1226,8,116,1,117,1,117,
        1,117,1,117,1,117,3,117,1233,8,117,1,118,1,118,3,118,1237,8,118,
        1,119,1,119,1,120,1,120,1,121,1,121,1,121,1,122,1,122,1,122,1,122,
        1,122,1,122,3,122,1252,8,122,1,123,1,123,3,123,1256,8,123,1,124,
        1,124,3,124,1260,8,124,1,125,1,125,1,125,1,125,1,125,1,125,1,125,
        1,126,1,126,3,126,1271,8,126,1,127,1,127,1,127,3,127,1276,8,127,
        1,128,1,128,3,128,1280,8,128,1,129,1,129,1,129,1,129,1,130,1,130,
        3,130,1288,8,130,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,
        5,131,1298,8,131,10,131,12,131,1301,9,131,1,132,1,132,1,132,1,132,
        1,132,1,132,1,132,1,132,5,132,1311,8,132,10,132,12,132,1314,9,132,
        1,133,1,133,1,133,1,133,3,133,1320,8,133,1,134,1,134,1,134,1,134,
        1,135,1,135,3,135,1328,8,135,1,136,1,136,1,136,1,136,1,136,1,136,
        3,136,1336,8,136,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,138,
        1,138,1,138,1,138,1,138,3,138,1350,8,138,1,139,1,139,1,139,3,139,
        1355,8,139,1,140,1,140,1,141,1,141,3,141,1361,8,141,1,142,1,142,
        1,143,1,143,1,143,1,143,1,144,1,144,1,145,1,145,1,145,1,145,1,145,
        1,145,3,145,1377,8,145,1,146,1,146,3,146,1381,8,146,1,147,1,147,
        1,148,1,148,1,148,1,148,1,148,1,148,3,148,1391,8,148,1,149,1,149,
        1,149,1,149,1,149,1,149,3,149,1399,8,149,1,150,1,150,1,150,1,150,
        1,150,3,150,1406,8,150,1,151,1,151,3,151,1410,8,151,1,152,1,152,
        1,152,3,152,1415,8,152,1,153,1,153,1,153,1,153,1,153,1,153,1,153,
        1,153,3,153,1425,8,153,1,154,1,154,1,154,1,154,1,154,3,154,1432,
        8,154,1,155,1,155,5,155,1436,8,155,10,155,12,155,1439,9,155,1,156,
        1,156,1,156,1,157,1,157,1,157,1,157,1,157,3,157,1449,8,157,1,158,
        1,158,1,158,1,158,1,158,1,158,5,158,1457,8,158,10,158,12,158,1460,
        9,158,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,
        1471,8,159,1,160,1,160,1,160,3,160,1476,8,160,1,161,1,161,3,161,
        1480,8,161,1,162,1,162,1,163,1,163,1,164,1,164,1,165,1,165,3,165,
        1490,8,165,1,166,1,166,3,166,1494,8,166,1,167,1,167,1,168,1,168,
        1,168,1,168,1,168,1,168,1,168,3,168,1505,8,168,1,169,1,169,1,170,
        1,170,1,171,1,171,1,172,1,172,1,173,1,173,1,174,1,174,1,175,1,175,
        1,176,1,176,1,177,1,177,3,177,1525,8,177,1,178,1,178,3,178,1529,
        8,178,1,179,1,179,1,180,1,180,1,181,1,181,1,182,1,182,1,183,1,183,
        1,184,1,184,1,185,1,185,1,186,1,186,1,187,1,187,1,188,1,188,3,188,
        1551,8,188,1,189,1,189,1,190,1,190,3,190,1557,8,190,1,191,1,191,
        1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,3,192,1569,8,192,
        1,193,1,193,1,193,1,193,1,193,3,193,1576,8,193,1,194,1,194,3,194,
        1580,8,194,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,196,
        1,196,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,198,1,198,
        1,199,1,199,1,199,3,199,1605,8,199,1,200,1,200,1,200,1,200,1,200,
        1,201,1,201,1,201,3,201,1615,8,201,1,202,1,202,1,202,1,202,1,202,
        1,203,1,203,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,205,
        1,205,1,206,1,206,1,206,1,206,1,206,3,206,1639,8,206,1,207,1,207,
        5,207,1643,8,207,10,207,12,207,1646,9,207,1,208,1,208,1,208,1,209,
        1,209,1,209,1,210,1,210,1,210,3,210,1657,8,210,1,211,1,211,1,211,
        3,211,1662,8,211,1,212,1,212,1,213,1,213,1,213,1,213,1,213,1,214,
        1,214,1,214,1,214,1,214,1,214,1,214,1,214,3,214,1679,8,214,1,215,
        1,215,1,215,1,215,1,215,3,215,1686,8,215,1,216,1,216,1,216,1,216,
        1,216,3,216,1693,8,216,1,217,1,217,1,218,1,218,1,218,1,218,1,218,
        1,218,3,218,1703,8,218,1,219,1,219,1,219,1,219,1,219,1,219,3,219,
        1711,8,219,1,220,1,220,1,220,1,220,1,220,1,221,1,221,1,221,1,221,
        1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,
        1,221,1,221,1,221,1,221,1,221,3,221,1738,8,221,1,222,1,222,1,222,
        1,222,1,222,3,222,1745,8,222,1,223,1,223,5,223,1749,8,223,10,223,
        12,223,1752,9,223,1,224,1,224,1,224,1,225,1,225,3,225,1759,8,225,
        1,226,1,226,1,227,1,227,1,228,1,228,1,229,1,229,1,230,1,230,1,231,
        1,231,1,231,0,11,34,36,38,110,112,130,132,212,262,264,316,232,0,
        2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
        48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
        92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
        190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
        222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
        254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,
        286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,
        318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,
        350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,
        382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,
        414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,
        446,448,450,452,454,456,458,460,462,0,7,2,0,19,19,29,29,1,0,30,32,
        2,0,27,27,34,34,2,0,10,10,89,89,1,0,45,49,2,0,65,66,71,71,3,0,72,
        72,79,79,82,82,1744,0,467,1,0,0,0,2,474,1,0,0,0,4,482,1,0,0,0,6,
        484,1,0,0,0,8,493,1,0,0,0,10,495,1,0,0,0,12,504,1,0,0,0,14,513,1,
        0,0,0,16,522,1,0,0,0,18,531,1,0,0,0,20,545,1,0,0,0,22,551,1,0,0,
        0,24,556,1,0,0,0,26,564,1,0,0,0,28,569,1,0,0,0,30,571,1,0,0,0,32,
        578,1,0,0,0,34,580,1,0,0,0,36,593,1,0,0,0,38,606,1,0,0,0,40,622,
        1,0,0,0,42,626,1,0,0,0,44,635,1,0,0,0,46,637,1,0,0,0,48,640,1,0,
        0,0,50,651,1,0,0,0,52,653,1,0,0,0,54,659,1,0,0,0,56,661,1,0,0,0,
        58,664,1,0,0,0,60,672,1,0,0,0,62,676,1,0,0,0,64,686,1,0,0,0,66,690,
        1,0,0,0,68,692,1,0,0,0,70,696,1,0,0,0,72,698,1,0,0,0,74,711,1,0,
        0,0,76,718,1,0,0,0,78,725,1,0,0,0,80,727,1,0,0,0,82,736,1,0,0,0,
        84,744,1,0,0,0,86,751,1,0,0,0,88,758,1,0,0,0,90,775,1,0,0,0,92,777,
        1,0,0,0,94,779,1,0,0,0,96,786,1,0,0,0,98,797,1,0,0,0,100,802,1,0,
        0,0,102,804,1,0,0,0,104,806,1,0,0,0,106,811,1,0,0,0,108,821,1,0,
        0,0,110,823,1,0,0,0,112,836,1,0,0,0,114,849,1,0,0,0,116,853,1,0,
        0,0,118,857,1,0,0,0,120,864,1,0,0,0,122,872,1,0,0,0,124,876,1,0,
        0,0,126,878,1,0,0,0,128,884,1,0,0,0,130,886,1,0,0,0,132,899,1,0,
        0,0,134,915,1,0,0,0,136,919,1,0,0,0,138,928,1,0,0,0,140,930,1,0,
        0,0,142,932,1,0,0,0,144,944,1,0,0,0,146,948,1,0,0,0,148,950,1,0,
        0,0,150,956,1,0,0,0,152,958,1,0,0,0,154,961,1,0,0,0,156,968,1,0,
        0,0,158,976,1,0,0,0,160,978,1,0,0,0,162,988,1,0,0,0,164,990,1,0,
        0,0,166,1000,1,0,0,0,168,1002,1,0,0,0,170,1015,1,0,0,0,172,1022,
        1,0,0,0,174,1029,1,0,0,0,176,1031,1,0,0,0,178,1037,1,0,0,0,180,1044,
        1,0,0,0,182,1046,1,0,0,0,184,1055,1,0,0,0,186,1065,1,0,0,0,188,1072,
        1,0,0,0,190,1074,1,0,0,0,192,1081,1,0,0,0,194,1092,1,0,0,0,196,1096,
        1,0,0,0,198,1104,1,0,0,0,200,1106,1,0,0,0,202,1119,1,0,0,0,204,1126,
        1,0,0,0,206,1141,1,0,0,0,208,1148,1,0,0,0,210,1150,1,0,0,0,212,1154,
        1,0,0,0,214,1167,1,0,0,0,216,1176,1,0,0,0,218,1178,1,0,0,0,220,1182,
        1,0,0,0,222,1186,1,0,0,0,224,1200,1,0,0,0,226,1207,1,0,0,0,228,1211,
        1,0,0,0,230,1213,1,0,0,0,232,1225,1,0,0,0,234,1232,1,0,0,0,236,1236,
        1,0,0,0,238,1238,1,0,0,0,240,1240,1,0,0,0,242,1242,1,0,0,0,244,1251,
        1,0,0,0,246,1255,1,0,0,0,248,1259,1,0,0,0,250,1261,1,0,0,0,252,1270,
        1,0,0,0,254,1275,1,0,0,0,256,1279,1,0,0,0,258,1281,1,0,0,0,260,1287,
        1,0,0,0,262,1289,1,0,0,0,264,1302,1,0,0,0,266,1319,1,0,0,0,268,1321,
        1,0,0,0,270,1327,1,0,0,0,272,1335,1,0,0,0,274,1337,1,0,0,0,276,1349,
        1,0,0,0,278,1354,1,0,0,0,280,1356,1,0,0,0,282,1360,1,0,0,0,284,1362,
        1,0,0,0,286,1364,1,0,0,0,288,1368,1,0,0,0,290,1376,1,0,0,0,292,1380,
        1,0,0,0,294,1382,1,0,0,0,296,1390,1,0,0,0,298,1398,1,0,0,0,300,1405,
        1,0,0,0,302,1409,1,0,0,0,304,1414,1,0,0,0,306,1424,1,0,0,0,308,1431,
        1,0,0,0,310,1433,1,0,0,0,312,1440,1,0,0,0,314,1448,1,0,0,0,316,1450,
        1,0,0,0,318,1470,1,0,0,0,320,1475,1,0,0,0,322,1479,1,0,0,0,324,1481,
        1,0,0,0,326,1483,1,0,0,0,328,1485,1,0,0,0,330,1489,1,0,0,0,332,1493,
        1,0,0,0,334,1495,1,0,0,0,336,1504,1,0,0,0,338,1506,1,0,0,0,340,1508,
        1,0,0,0,342,1510,1,0,0,0,344,1512,1,0,0,0,346,1514,1,0,0,0,348,1516,
        1,0,0,0,350,1518,1,0,0,0,352,1520,1,0,0,0,354,1524,1,0,0,0,356,1528,
        1,0,0,0,358,1530,1,0,0,0,360,1532,1,0,0,0,362,1534,1,0,0,0,364,1536,
        1,0,0,0,366,1538,1,0,0,0,368,1540,1,0,0,0,370,1542,1,0,0,0,372,1544,
        1,0,0,0,374,1546,1,0,0,0,376,1550,1,0,0,0,378,1552,1,0,0,0,380,1556,
        1,0,0,0,382,1558,1,0,0,0,384,1568,1,0,0,0,386,1575,1,0,0,0,388,1579,
        1,0,0,0,390,1581,1,0,0,0,392,1589,1,0,0,0,394,1591,1,0,0,0,396,1599,
        1,0,0,0,398,1604,1,0,0,0,400,1606,1,0,0,0,402,1614,1,0,0,0,404,1616,
        1,0,0,0,406,1621,1,0,0,0,408,1623,1,0,0,0,410,1631,1,0,0,0,412,1638,
        1,0,0,0,414,1640,1,0,0,0,416,1647,1,0,0,0,418,1650,1,0,0,0,420,1656,
        1,0,0,0,422,1661,1,0,0,0,424,1663,1,0,0,0,426,1665,1,0,0,0,428,1678,
        1,0,0,0,430,1685,1,0,0,0,432,1692,1,0,0,0,434,1694,1,0,0,0,436,1702,
        1,0,0,0,438,1710,1,0,0,0,440,1712,1,0,0,0,442,1737,1,0,0,0,444,1744,
        1,0,0,0,446,1746,1,0,0,0,448,1753,1,0,0,0,450,1758,1,0,0,0,452,1760,
        1,0,0,0,454,1762,1,0,0,0,456,1764,1,0,0,0,458,1766,1,0,0,0,460,1768,
        1,0,0,0,462,1770,1,0,0,0,464,466,3,2,1,0,465,464,1,0,0,0,466,469,
        1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,470,1,0,0,0,469,467,
        1,0,0,0,470,471,5,0,0,1,471,1,1,0,0,0,472,475,3,4,2,0,473,475,3,
        426,213,0,474,472,1,0,0,0,474,473,1,0,0,0,475,3,1,0,0,0,476,483,
        3,10,5,0,477,483,3,12,6,0,478,483,3,14,7,0,479,483,3,16,8,0,480,
        483,3,18,9,0,481,483,3,6,3,0,482,476,1,0,0,0,482,477,1,0,0,0,482,
        478,1,0,0,0,482,479,1,0,0,0,482,480,1,0,0,0,482,481,1,0,0,0,483,
        5,1,0,0,0,484,485,5,1,0,0,485,486,3,450,225,0,486,487,5,2,0,0,487,
        488,3,22,11,0,488,489,5,2,0,0,489,490,3,8,4,0,490,491,3,20,10,0,
        491,492,5,3,0,0,492,7,1,0,0,0,493,494,3,252,126,0,494,9,1,0,0,0,
        495,496,5,4,0,0,496,497,3,450,225,0,497,498,5,2,0,0,498,499,3,22,
        11,0,499,500,5,2,0,0,500,501,3,24,12,0,501,502,3,20,10,0,502,503,
        5,3,0,0,503,11,1,0,0,0,504,505,5,5,0,0,505,506,3,450,225,0,506,507,
        5,2,0,0,507,508,3,22,11,0,508,509,5,2,0,0,509,510,3,120,60,0,510,
        511,3,20,10,0,511,512,5,3,0,0,512,13,1,0,0,0,513,514,5,6,0,0,514,
        515,3,450,225,0,515,516,5,2,0,0,516,517,3,22,11,0,517,518,5,2,0,
        0,518,519,3,246,123,0,519,520,3,20,10,0,520,521,5,3,0,0,521,15,1,
        0,0,0,522,523,5,7,0,0,523,524,3,450,225,0,524,525,5,2,0,0,525,526,
        3,22,11,0,526,527,5,2,0,0,527,528,3,252,126,0,528,529,3,20,10,0,
        529,530,5,3,0,0,530,17,1,0,0,0,531,532,5,8,0,0,532,533,3,450,225,
        0,533,534,5,2,0,0,534,535,3,22,11,0,535,536,5,2,0,0,536,537,3,314,
        157,0,537,538,3,20,10,0,538,539,5,3,0,0,539,19,1,0,0,0,540,541,5,
        2,0,0,541,542,3,384,192,0,542,543,3,422,211,0,543,546,1,0,0,0,544,
        546,3,462,231,0,545,540,1,0,0,0,545,544,1,0,0,0,546,21,1,0,0,0,547,
        552,5,71,0,0,548,549,5,71,0,0,549,550,5,9,0,0,550,552,3,436,218,
        0,551,547,1,0,0,0,551,548,1,0,0,0,552,23,1,0,0,0,553,557,3,26,13,
        0,554,557,3,98,49,0,555,557,3,114,57,0,556,553,1,0,0,0,556,554,1,
        0,0,0,556,555,1,0,0,0,557,25,1,0,0,0,558,565,3,44,22,0,559,565,3,
        54,27,0,560,565,3,28,14,0,561,565,3,68,34,0,562,565,3,116,58,0,563,
        565,3,118,59,0,564,558,1,0,0,0,564,559,1,0,0,0,564,560,1,0,0,0,564,
        561,1,0,0,0,564,562,1,0,0,0,564,563,1,0,0,0,565,27,1,0,0,0,566,570,
        3,30,15,0,567,570,3,32,16,0,568,570,3,106,53,0,569,566,1,0,0,0,569,
        567,1,0,0,0,569,568,1,0,0,0,570,29,1,0,0,0,571,572,3,40,20,0,572,
        573,3,336,168,0,573,574,3,40,20,0,574,31,1,0,0,0,575,579,3,34,17,
        0,576,579,3,36,18,0,577,579,3,38,19,0,578,575,1,0,0,0,578,576,1,
        0,0,0,578,577,1,0,0,0,579,33,1,0,0,0,580,581,6,17,-1,0,581,582,3,
        40,20,0,582,583,5,89,0,0,583,584,3,40,20,0,584,590,1,0,0,0,585,586,
        10,1,0,0,586,587,5,89,0,0,587,589,3,40,20,0,588,585,1,0,0,0,589,
        592,1,0,0,0,590,588,1,0,0,0,590,591,1,0,0,0,591,35,1,0,0,0,592,590,
        1,0,0,0,593,594,6,18,-1,0,594,595,3,40,20,0,595,596,5,10,0,0,596,
        597,3,40,20,0,597,603,1,0,0,0,598,599,10,1,0,0,599,600,5,10,0,0,
        600,602,3,40,20,0,601,598,1,0,0,0,602,605,1,0,0,0,603,601,1,0,0,
        0,603,604,1,0,0,0,604,37,1,0,0,0,605,603,1,0,0,0,606,607,6,19,-1,
        0,607,608,3,40,20,0,608,609,5,11,0,0,609,610,3,40,20,0,610,616,1,
        0,0,0,611,612,10,1,0,0,612,613,5,11,0,0,613,615,3,40,20,0,614,611,
        1,0,0,0,615,618,1,0,0,0,616,614,1,0,0,0,616,617,1,0,0,0,617,39,1,
        0,0,0,618,616,1,0,0,0,619,623,3,44,22,0,620,623,3,54,27,0,621,623,
        3,68,34,0,622,619,1,0,0,0,622,620,1,0,0,0,622,621,1,0,0,0,623,41,
        1,0,0,0,624,627,3,44,22,0,625,627,3,56,28,0,626,624,1,0,0,0,626,
        625,1,0,0,0,627,43,1,0,0,0,628,636,3,46,23,0,629,636,3,60,30,0,630,
        636,3,382,191,0,631,632,5,12,0,0,632,633,3,26,13,0,633,634,5,13,
        0,0,634,636,1,0,0,0,635,628,1,0,0,0,635,629,1,0,0,0,635,630,1,0,
        0,0,635,631,1,0,0,0,636,45,1,0,0,0,637,638,3,48,24,0,638,639,3,40,
        20,0,639,47,1,0,0,0,640,641,3,320,160,0,641,642,5,14,0,0,642,643,
        3,50,25,0,643,644,5,15,0,0,644,645,5,16,0,0,645,49,1,0,0,0,646,652,
        3,52,26,0,647,648,3,52,26,0,648,649,5,2,0,0,649,650,3,50,25,0,650,
        652,1,0,0,0,651,646,1,0,0,0,651,647,1,0,0,0,652,51,1,0,0,0,653,654,
        3,382,191,0,654,655,5,16,0,0,655,656,3,100,50,0,656,53,1,0,0,0,657,
        660,3,56,28,0,658,660,3,58,29,0,659,657,1,0,0,0,659,658,1,0,0,0,
        660,55,1,0,0,0,661,662,3,322,161,0,662,663,3,42,21,0,663,57,1,0,
        0,0,664,665,3,84,42,0,665,666,3,362,181,0,666,667,3,84,42,0,667,
        59,1,0,0,0,668,673,3,62,31,0,669,673,3,64,32,0,670,673,3,70,35,0,
        671,673,3,90,45,0,672,668,1,0,0,0,672,669,1,0,0,0,672,670,1,0,0,
        0,672,671,1,0,0,0,673,61,1,0,0,0,674,677,3,364,182,0,675,677,3,88,
        44,0,676,674,1,0,0,0,676,675,1,0,0,0,677,63,1,0,0,0,678,687,3,368,
        184,0,679,687,3,66,33,0,680,681,5,12,0,0,681,682,3,86,43,0,682,683,
        5,13,0,0,683,687,1,0,0,0,684,687,3,224,112,0,685,687,3,72,36,0,686,
        678,1,0,0,0,686,679,1,0,0,0,686,680,1,0,0,0,686,684,1,0,0,0,686,
        685,1,0,0,0,687,65,1,0,0,0,688,691,3,380,190,0,689,691,3,378,189,
        0,690,688,1,0,0,0,690,689,1,0,0,0,691,67,1,0,0,0,692,693,3,84,42,
        0,693,694,3,358,179,0,694,695,3,84,42,0,695,69,1,0,0,0,696,697,3,
        372,186,0,697,71,1,0,0,0,698,699,5,17,0,0,699,700,3,74,37,0,700,
        701,5,2,0,0,701,702,3,78,39,0,702,703,5,2,0,0,703,704,3,26,13,0,
        704,705,5,13,0,0,705,73,1,0,0,0,706,712,3,98,49,0,707,708,5,14,0,
        0,708,709,3,76,38,0,709,710,5,15,0,0,710,712,1,0,0,0,711,706,1,0,
        0,0,711,707,1,0,0,0,712,75,1,0,0,0,713,719,3,98,49,0,714,715,3,98,
        49,0,715,716,5,2,0,0,716,717,3,76,38,0,717,719,1,0,0,0,718,713,1,
        0,0,0,718,714,1,0,0,0,719,77,1,0,0,0,720,726,3,80,40,0,721,722,5,
        14,0,0,722,723,3,82,41,0,723,724,5,15,0,0,724,726,1,0,0,0,725,720,
        1,0,0,0,725,721,1,0,0,0,726,79,1,0,0,0,727,728,3,26,13,0,728,729,
        3,344,172,0,729,730,3,26,13,0,730,81,1,0,0,0,731,737,3,80,40,0,732,
        733,3,80,40,0,733,734,5,2,0,0,734,735,3,82,41,0,735,737,1,0,0,0,
        736,731,1,0,0,0,736,732,1,0,0,0,737,83,1,0,0,0,738,745,3,60,30,0,
        739,745,3,382,191,0,740,741,5,12,0,0,741,742,3,26,13,0,742,743,5,
        13,0,0,743,745,1,0,0,0,744,738,1,0,0,0,744,739,1,0,0,0,744,740,1,
        0,0,0,745,85,1,0,0,0,746,752,3,336,168,0,747,752,3,338,169,0,748,
        752,3,360,180,0,749,752,3,362,181,0,750,752,3,322,161,0,751,746,
        1,0,0,0,751,747,1,0,0,0,751,748,1,0,0,0,751,749,1,0,0,0,751,750,
        1,0,0,0,752,87,1,0,0,0,753,759,5,18,0,0,754,755,5,14,0,0,755,756,
        3,94,47,0,756,757,5,15,0,0,757,759,1,0,0,0,758,753,1,0,0,0,758,754,
        1,0,0,0,759,89,1,0,0,0,760,761,3,366,183,0,761,762,5,12,0,0,762,
        763,3,92,46,0,763,764,5,13,0,0,764,776,1,0,0,0,765,766,3,370,185,
        0,766,767,5,12,0,0,767,768,3,92,46,0,768,769,5,13,0,0,769,776,1,
        0,0,0,770,771,3,374,187,0,771,772,5,12,0,0,772,773,3,92,46,0,773,
        774,5,13,0,0,774,776,1,0,0,0,775,760,1,0,0,0,775,765,1,0,0,0,775,
        770,1,0,0,0,776,91,1,0,0,0,777,778,3,94,47,0,778,93,1,0,0,0,779,
        783,3,26,13,0,780,782,3,96,48,0,781,780,1,0,0,0,782,785,1,0,0,0,
        783,781,1,0,0,0,783,784,1,0,0,0,784,95,1,0,0,0,785,783,1,0,0,0,786,
        787,5,2,0,0,787,788,3,26,13,0,788,97,1,0,0,0,789,790,3,356,178,0,
        790,791,5,16,0,0,791,792,3,100,50,0,792,798,1,0,0,0,793,794,5,12,
        0,0,794,795,3,98,49,0,795,796,5,13,0,0,796,798,1,0,0,0,797,789,1,
        0,0,0,797,793,1,0,0,0,798,99,1,0,0,0,799,803,3,102,51,0,800,803,
        3,108,54,0,801,803,3,104,52,0,802,799,1,0,0,0,802,800,1,0,0,0,802,
        801,1,0,0,0,803,101,1,0,0,0,804,805,3,44,22,0,805,103,1,0,0,0,806,
        807,3,38,19,0,807,105,1,0,0,0,808,812,3,108,54,0,809,812,3,110,55,
        0,810,812,3,112,56,0,811,808,1,0,0,0,811,809,1,0,0,0,811,810,1,0,
        0,0,812,107,1,0,0,0,813,814,3,102,51,0,814,815,5,92,0,0,815,816,
        3,102,51,0,816,822,1,0,0,0,817,818,3,102,51,0,818,819,5,92,0,0,819,
        820,3,108,54,0,820,822,1,0,0,0,821,813,1,0,0,0,821,817,1,0,0,0,822,
        109,1,0,0,0,823,824,6,55,-1,0,824,825,3,102,51,0,825,826,5,90,0,
        0,826,827,3,102,51,0,827,833,1,0,0,0,828,829,10,1,0,0,829,830,5,
        90,0,0,830,832,3,102,51,0,831,828,1,0,0,0,832,835,1,0,0,0,833,831,
        1,0,0,0,833,834,1,0,0,0,834,111,1,0,0,0,835,833,1,0,0,0,836,837,
        6,56,-1,0,837,838,3,102,51,0,838,839,5,91,0,0,839,840,3,102,51,0,
        840,846,1,0,0,0,841,842,10,1,0,0,842,843,5,91,0,0,843,845,3,102,
        51,0,844,841,1,0,0,0,845,848,1,0,0,0,846,844,1,0,0,0,846,847,1,0,
        0,0,847,113,1,0,0,0,848,846,1,0,0,0,849,850,3,356,178,0,850,851,
        3,328,164,0,851,852,3,354,177,0,852,115,1,0,0,0,853,854,3,60,30,
        0,854,855,3,346,173,0,855,856,3,26,13,0,856,117,1,0,0,0,857,858,
        3,88,44,0,858,859,3,342,171,0,859,860,3,88,44,0,860,119,1,0,0,0,
        861,865,3,122,61,0,862,865,3,194,97,0,863,865,3,218,109,0,864,861,
        1,0,0,0,864,862,1,0,0,0,864,863,1,0,0,0,865,121,1,0,0,0,866,873,
        3,138,69,0,867,873,3,150,75,0,868,873,3,124,62,0,869,873,3,164,82,
        0,870,873,3,220,110,0,871,873,3,222,111,0,872,866,1,0,0,0,872,867,
        1,0,0,0,872,868,1,0,0,0,872,869,1,0,0,0,872,870,1,0,0,0,872,871,
        1,0,0,0,873,123,1,0,0,0,874,877,3,126,63,0,875,877,3,128,64,0,876,
        874,1,0,0,0,876,875,1,0,0,0,877,125,1,0,0,0,878,879,3,134,67,0,879,
        880,3,336,168,0,880,881,3,134,67,0,881,127,1,0,0,0,882,885,3,130,
        65,0,883,885,3,132,66,0,884,882,1,0,0,0,884,883,1,0,0,0,885,129,
        1,0,0,0,886,887,6,65,-1,0,887,888,3,134,67,0,888,889,5,89,0,0,889,
        890,3,134,67,0,890,896,1,0,0,0,891,892,10,1,0,0,892,893,5,89,0,0,
        893,895,3,134,67,0,894,891,1,0,0,0,895,898,1,0,0,0,896,894,1,0,0,
        0,896,897,1,0,0,0,897,131,1,0,0,0,898,896,1,0,0,0,899,900,6,66,-1,
        0,900,901,3,134,67,0,901,902,5,10,0,0,902,903,3,134,67,0,903,909,
        1,0,0,0,904,905,10,1,0,0,905,906,5,10,0,0,906,908,3,134,67,0,907,
        904,1,0,0,0,908,911,1,0,0,0,909,907,1,0,0,0,909,910,1,0,0,0,910,
        133,1,0,0,0,911,909,1,0,0,0,912,916,3,138,69,0,913,916,3,150,75,
        0,914,916,3,164,82,0,915,912,1,0,0,0,915,913,1,0,0,0,915,914,1,0,
        0,0,916,135,1,0,0,0,917,920,3,138,69,0,918,920,3,152,76,0,919,917,
        1,0,0,0,919,918,1,0,0,0,920,137,1,0,0,0,921,929,3,142,71,0,922,929,
        3,156,78,0,923,929,3,140,70,0,924,925,5,12,0,0,925,926,3,122,61,
        0,926,927,5,13,0,0,927,929,1,0,0,0,928,921,1,0,0,0,928,922,1,0,0,
        0,928,923,1,0,0,0,928,924,1,0,0,0,929,139,1,0,0,0,930,931,3,382,
        191,0,931,141,1,0,0,0,932,933,3,332,166,0,933,934,5,14,0,0,934,935,
        3,144,72,0,935,936,5,15,0,0,936,937,5,16,0,0,937,938,3,134,67,0,
        938,143,1,0,0,0,939,945,3,146,73,0,940,941,3,146,73,0,941,942,5,
        2,0,0,942,943,3,144,72,0,943,945,1,0,0,0,944,939,1,0,0,0,944,940,
        1,0,0,0,945,145,1,0,0,0,946,949,3,148,74,0,947,949,3,382,191,0,948,
        946,1,0,0,0,948,947,1,0,0,0,949,147,1,0,0,0,950,951,3,382,191,0,
        951,952,5,16,0,0,952,953,3,206,103,0,953,149,1,0,0,0,954,957,3,152,
        76,0,955,957,3,154,77,0,956,954,1,0,0,0,956,955,1,0,0,0,957,151,
        1,0,0,0,958,959,3,330,165,0,959,960,3,136,68,0,960,153,1,0,0,0,961,
        962,3,186,93,0,962,963,3,362,181,0,963,964,3,186,93,0,964,155,1,
        0,0,0,965,969,3,158,79,0,966,969,3,160,80,0,967,969,3,166,83,0,968,
        965,1,0,0,0,968,966,1,0,0,0,968,967,1,0,0,0,969,157,1,0,0,0,970,
        977,3,364,182,0,971,972,3,366,183,0,972,973,5,12,0,0,973,974,3,190,
        95,0,974,975,5,13,0,0,975,977,1,0,0,0,976,970,1,0,0,0,976,971,1,
        0,0,0,977,159,1,0,0,0,978,979,3,162,81,0,979,161,1,0,0,0,980,989,
        3,368,184,0,981,982,3,370,185,0,982,983,5,12,0,0,983,984,3,190,95,
        0,984,985,5,13,0,0,985,989,1,0,0,0,986,989,3,182,91,0,987,989,3,
        168,84,0,988,980,1,0,0,0,988,981,1,0,0,0,988,986,1,0,0,0,988,987,
        1,0,0,0,989,163,1,0,0,0,990,991,3,186,93,0,991,992,3,358,179,0,992,
        993,3,186,93,0,993,165,1,0,0,0,994,1001,3,372,186,0,995,996,3,374,
        187,0,996,997,5,12,0,0,997,998,3,190,95,0,998,999,5,13,0,0,999,1001,
        1,0,0,0,1000,994,1,0,0,0,1000,995,1,0,0,0,1001,167,1,0,0,0,1002,
        1003,5,17,0,0,1003,1004,3,170,85,0,1004,1005,5,2,0,0,1005,1006,3,
        174,87,0,1006,1007,5,2,0,0,1007,1008,3,184,92,0,1008,1009,5,13,0,
        0,1009,169,1,0,0,0,1010,1016,3,194,97,0,1011,1012,5,14,0,0,1012,
        1013,3,172,86,0,1013,1014,5,15,0,0,1014,1016,1,0,0,0,1015,1010,1,
        0,0,0,1015,1011,1,0,0,0,1016,171,1,0,0,0,1017,1023,3,194,97,0,1018,
        1019,3,194,97,0,1019,1020,5,2,0,0,1020,1021,3,172,86,0,1021,1023,
        1,0,0,0,1022,1017,1,0,0,0,1022,1018,1,0,0,0,1023,173,1,0,0,0,1024,
        1030,3,176,88,0,1025,1026,5,14,0,0,1026,1027,3,180,90,0,1027,1028,
        5,15,0,0,1028,1030,1,0,0,0,1029,1024,1,0,0,0,1029,1025,1,0,0,0,1030,
        175,1,0,0,0,1031,1032,3,178,89,0,1032,1033,3,344,172,0,1033,1034,
        3,184,92,0,1034,177,1,0,0,0,1035,1038,3,158,79,0,1036,1038,3,188,
        94,0,1037,1035,1,0,0,0,1037,1036,1,0,0,0,1038,179,1,0,0,0,1039,1045,
        3,176,88,0,1040,1041,3,176,88,0,1041,1042,5,2,0,0,1042,1043,3,180,
        90,0,1043,1045,1,0,0,0,1044,1039,1,0,0,0,1044,1040,1,0,0,0,1045,
        181,1,0,0,0,1046,1047,3,232,116,0,1047,1048,5,11,0,0,1048,1049,5,
        12,0,0,1049,1050,3,190,95,0,1050,1051,5,13,0,0,1051,183,1,0,0,0,
        1052,1056,3,122,61,0,1053,1056,3,380,190,0,1054,1056,3,188,94,0,
        1055,1052,1,0,0,0,1055,1053,1,0,0,0,1055,1054,1,0,0,0,1056,185,1,
        0,0,0,1057,1066,3,156,78,0,1058,1066,3,380,190,0,1059,1066,3,188,
        94,0,1060,1066,3,382,191,0,1061,1062,5,12,0,0,1062,1063,3,122,61,
        0,1063,1064,5,13,0,0,1064,1066,1,0,0,0,1065,1057,1,0,0,0,1065,1058,
        1,0,0,0,1065,1059,1,0,0,0,1065,1060,1,0,0,0,1065,1061,1,0,0,0,1066,
        187,1,0,0,0,1067,1073,5,18,0,0,1068,1069,5,14,0,0,1069,1070,3,190,
        95,0,1070,1071,5,15,0,0,1071,1073,1,0,0,0,1072,1067,1,0,0,0,1072,
        1068,1,0,0,0,1073,189,1,0,0,0,1074,1078,3,184,92,0,1075,1077,3,192,
        96,0,1076,1075,1,0,0,0,1077,1080,1,0,0,0,1078,1076,1,0,0,0,1078,
        1079,1,0,0,0,1079,191,1,0,0,0,1080,1078,1,0,0,0,1081,1082,5,2,0,
        0,1082,1083,3,184,92,0,1083,193,1,0,0,0,1084,1085,3,356,178,0,1085,
        1086,5,16,0,0,1086,1087,3,196,98,0,1087,1093,1,0,0,0,1088,1089,5,
        12,0,0,1089,1090,3,194,97,0,1090,1091,5,13,0,0,1091,1093,1,0,0,0,
        1092,1084,1,0,0,0,1092,1088,1,0,0,0,1093,195,1,0,0,0,1094,1097,3,
        206,103,0,1095,1097,3,198,99,0,1096,1094,1,0,0,0,1096,1095,1,0,0,
        0,1097,197,1,0,0,0,1098,1105,3,210,105,0,1099,1105,3,200,100,0,1100,
        1101,5,12,0,0,1101,1102,3,198,99,0,1102,1103,5,13,0,0,1103,1105,
        1,0,0,0,1104,1098,1,0,0,0,1104,1099,1,0,0,0,1104,1100,1,0,0,0,1105,
        199,1,0,0,0,1106,1107,5,19,0,0,1107,1108,5,14,0,0,1108,1109,3,144,
        72,0,1109,1110,5,15,0,0,1110,1111,5,16,0,0,1111,1112,3,202,101,0,
        1112,201,1,0,0,0,1113,1120,3,206,103,0,1114,1115,5,12,0,0,1115,1116,
        3,210,105,0,1116,1117,5,13,0,0,1117,1120,1,0,0,0,1118,1120,3,200,
        100,0,1119,1113,1,0,0,0,1119,1114,1,0,0,0,1119,1118,1,0,0,0,1120,
        203,1,0,0,0,1121,1127,3,206,103,0,1122,1123,5,12,0,0,1123,1124,3,
        212,106,0,1124,1125,5,13,0,0,1125,1127,1,0,0,0,1126,1121,1,0,0,0,
        1126,1122,1,0,0,0,1127,205,1,0,0,0,1128,1142,3,348,174,0,1129,1142,
        3,352,176,0,1130,1142,3,382,191,0,1131,1132,3,350,175,0,1132,1133,
        5,12,0,0,1133,1134,3,208,104,0,1134,1135,5,13,0,0,1135,1142,1,0,
        0,0,1136,1137,5,12,0,0,1137,1138,3,206,103,0,1138,1139,5,13,0,0,
        1139,1142,1,0,0,0,1140,1142,3,214,107,0,1141,1128,1,0,0,0,1141,1129,
        1,0,0,0,1141,1130,1,0,0,0,1141,1131,1,0,0,0,1141,1136,1,0,0,0,1141,
        1140,1,0,0,0,1142,207,1,0,0,0,1143,1149,3,206,103,0,1144,1145,3,
        206,103,0,1145,1146,5,2,0,0,1146,1147,3,208,104,0,1147,1149,1,0,
        0,0,1148,1143,1,0,0,0,1148,1144,1,0,0,0,1149,209,1,0,0,0,1150,1151,
        3,204,102,0,1151,1152,5,92,0,0,1152,1153,3,206,103,0,1153,211,1,
        0,0,0,1154,1155,6,106,-1,0,1155,1156,3,204,102,0,1156,1157,5,90,
        0,0,1157,1158,3,206,103,0,1158,1164,1,0,0,0,1159,1160,10,1,0,0,1160,
        1161,5,90,0,0,1161,1163,3,206,103,0,1162,1159,1,0,0,0,1163,1166,
        1,0,0,0,1164,1162,1,0,0,0,1164,1165,1,0,0,0,1165,213,1,0,0,0,1166,
        1164,1,0,0,0,1167,1168,5,14,0,0,1168,1169,3,216,108,0,1169,1170,
        5,15,0,0,1170,215,1,0,0,0,1171,1177,3,196,98,0,1172,1173,3,196,98,
        0,1173,1174,5,2,0,0,1174,1175,3,216,108,0,1175,1177,1,0,0,0,1176,
        1171,1,0,0,0,1176,1172,1,0,0,0,1177,217,1,0,0,0,1178,1179,3,356,
        178,0,1179,1180,3,328,164,0,1180,1181,3,354,177,0,1181,219,1,0,0,
        0,1182,1183,3,156,78,0,1183,1184,3,346,173,0,1184,1185,3,184,92,
        0,1185,221,1,0,0,0,1186,1187,3,188,94,0,1187,1188,3,342,171,0,1188,
        1189,3,188,94,0,1189,223,1,0,0,0,1190,1191,5,20,0,0,1191,1192,3,
        240,120,0,1192,1193,5,21,0,0,1193,1201,1,0,0,0,1194,1195,5,20,0,
        0,1195,1196,3,240,120,0,1196,1197,5,12,0,0,1197,1198,3,226,113,0,
        1198,1199,5,22,0,0,1199,1201,1,0,0,0,1200,1190,1,0,0,0,1200,1194,
        1,0,0,0,1201,225,1,0,0,0,1202,1208,3,228,114,0,1203,1204,3,228,114,
        0,1204,1205,5,2,0,0,1205,1206,3,226,113,0,1206,1208,1,0,0,0,1207,
        1202,1,0,0,0,1207,1203,1,0,0,0,1208,227,1,0,0,0,1209,1212,3,242,
        121,0,1210,1212,3,230,115,0,1211,1209,1,0,0,0,1211,1210,1,0,0,0,
        1212,229,1,0,0,0,1213,1214,3,116,58,0,1214,231,1,0,0,0,1215,1216,
        5,20,0,0,1216,1217,3,240,120,0,1217,1218,5,21,0,0,1218,1226,1,0,
        0,0,1219,1220,5,20,0,0,1220,1221,3,240,120,0,1221,1222,5,12,0,0,
        1222,1223,3,234,117,0,1223,1224,5,22,0,0,1224,1226,1,0,0,0,1225,
        1215,1,0,0,0,1225,1219,1,0,0,0,1226,233,1,0,0,0,1227,1233,3,236,
        118,0,1228,1229,3,236,118,0,1229,1230,5,2,0,0,1230,1231,3,234,117,
        0,1231,1233,1,0,0,0,1232,1227,1,0,0,0,1232,1228,1,0,0,0,1233,235,
        1,0,0,0,1234,1237,3,242,121,0,1235,1237,3,238,119,0,1236,1234,1,
        0,0,0,1236,1235,1,0,0,0,1237,237,1,0,0,0,1238,1239,3,220,110,0,1239,
        239,1,0,0,0,1240,1241,3,376,188,0,1241,241,1,0,0,0,1242,1243,5,94,
        0,0,1243,1244,3,186,93,0,1244,243,1,0,0,0,1245,1252,5,23,0,0,1246,
        1247,5,93,0,0,1247,1248,5,24,0,0,1248,1252,5,92,0,0,1249,1252,5,
        25,0,0,1250,1252,5,26,0,0,1251,1245,1,0,0,0,1251,1246,1,0,0,0,1251,
        1249,1,0,0,0,1251,1250,1,0,0,0,1252,245,1,0,0,0,1253,1256,3,248,
        124,0,1254,1256,3,194,97,0,1255,1253,1,0,0,0,1255,1254,1,0,0,0,1256,
        247,1,0,0,0,1257,1260,3,250,125,0,1258,1260,3,314,157,0,1259,1257,
        1,0,0,0,1259,1258,1,0,0,0,1260,249,1,0,0,0,1261,1262,5,27,0,0,1262,
        1263,5,14,0,0,1263,1264,3,144,72,0,1264,1265,5,15,0,0,1265,1266,
        5,16,0,0,1266,1267,3,248,124,0,1267,251,1,0,0,0,1268,1271,3,254,
        127,0,1269,1271,3,306,153,0,1270,1268,1,0,0,0,1270,1269,1,0,0,0,
        1271,253,1,0,0,0,1272,1276,3,256,128,0,1273,1276,3,266,133,0,1274,
        1276,3,272,136,0,1275,1272,1,0,0,0,1275,1273,1,0,0,0,1275,1274,1,
        0,0,0,1276,255,1,0,0,0,1277,1280,3,258,129,0,1278,1280,3,260,130,
        0,1279,1277,1,0,0,0,1279,1278,1,0,0,0,1280,257,1,0,0,0,1281,1282,
        3,270,135,0,1282,1283,3,336,168,0,1283,1284,3,270,135,0,1284,259,
        1,0,0,0,1285,1288,3,262,131,0,1286,1288,3,264,132,0,1287,1285,1,
        0,0,0,1287,1286,1,0,0,0,1288,261,1,0,0,0,1289,1290,6,131,-1,0,1290,
        1291,3,270,135,0,1291,1292,5,89,0,0,1292,1293,3,270,135,0,1293,1299,
        1,0,0,0,1294,1295,10,1,0,0,1295,1296,5,89,0,0,1296,1298,3,270,135,
        0,1297,1294,1,0,0,0,1298,1301,1,0,0,0,1299,1297,1,0,0,0,1299,1300,
        1,0,0,0,1300,263,1,0,0,0,1301,1299,1,0,0,0,1302,1303,6,132,-1,0,
        1303,1304,3,270,135,0,1304,1305,5,10,0,0,1305,1306,3,270,135,0,1306,
        1312,1,0,0,0,1307,1308,10,1,0,0,1308,1309,5,10,0,0,1309,1311,3,270,
        135,0,1310,1307,1,0,0,0,1311,1314,1,0,0,0,1312,1310,1,0,0,0,1312,
        1313,1,0,0,0,1313,265,1,0,0,0,1314,1312,1,0,0,0,1315,1316,3,340,
        170,0,1316,1317,3,270,135,0,1317,1320,1,0,0,0,1318,1320,3,268,134,
        0,1319,1315,1,0,0,0,1319,1318,1,0,0,0,1320,267,1,0,0,0,1321,1322,
        3,302,151,0,1322,1323,3,362,181,0,1323,1324,3,302,151,0,1324,269,
        1,0,0,0,1325,1328,3,272,136,0,1326,1328,3,266,133,0,1327,1325,1,
        0,0,0,1327,1326,1,0,0,0,1328,271,1,0,0,0,1329,1336,3,274,137,0,1330,
        1336,3,278,139,0,1331,1332,5,12,0,0,1332,1333,3,254,127,0,1333,1334,
        5,13,0,0,1334,1336,1,0,0,0,1335,1329,1,0,0,0,1335,1330,1,0,0,0,1335,
        1331,1,0,0,0,1336,273,1,0,0,0,1337,1338,3,334,167,0,1338,1339,5,
        14,0,0,1339,1340,3,276,138,0,1340,1341,5,15,0,0,1341,1342,5,16,0,
        0,1342,1343,3,270,135,0,1343,275,1,0,0,0,1344,1350,3,382,191,0,1345,
        1346,3,382,191,0,1346,1347,5,2,0,0,1347,1348,3,276,138,0,1348,1350,
        1,0,0,0,1349,1344,1,0,0,0,1349,1345,1,0,0,0,1350,277,1,0,0,0,1351,
        1355,3,280,140,0,1352,1355,3,282,141,0,1353,1355,3,288,144,0,1354,
        1351,1,0,0,0,1354,1352,1,0,0,0,1354,1353,1,0,0,0,1355,279,1,0,0,
        0,1356,1357,3,290,145,0,1357,281,1,0,0,0,1358,1361,3,284,142,0,1359,
        1361,3,286,143,0,1360,1358,1,0,0,0,1360,1359,1,0,0,0,1361,283,1,
        0,0,0,1362,1363,3,296,148,0,1363,285,1,0,0,0,1364,1365,3,302,151,
        0,1365,1366,3,358,179,0,1366,1367,3,302,151,0,1367,287,1,0,0,0,1368,
        1369,3,298,149,0,1369,289,1,0,0,0,1370,1377,3,364,182,0,1371,1372,
        3,366,183,0,1372,1373,5,12,0,0,1373,1374,3,300,150,0,1374,1375,5,
        13,0,0,1375,1377,1,0,0,0,1376,1370,1,0,0,0,1376,1371,1,0,0,0,1377,
        291,1,0,0,0,1378,1381,3,380,190,0,1379,1381,3,294,147,0,1380,1378,
        1,0,0,0,1380,1379,1,0,0,0,1381,293,1,0,0,0,1382,1383,3,296,148,0,
        1383,295,1,0,0,0,1384,1391,3,368,184,0,1385,1386,3,370,185,0,1386,
        1387,5,12,0,0,1387,1388,3,300,150,0,1388,1389,5,13,0,0,1389,1391,
        1,0,0,0,1390,1384,1,0,0,0,1390,1385,1,0,0,0,1391,297,1,0,0,0,1392,
        1399,3,372,186,0,1393,1394,3,374,187,0,1394,1395,5,12,0,0,1395,1396,
        3,300,150,0,1396,1397,5,13,0,0,1397,1399,1,0,0,0,1398,1392,1,0,0,
        0,1398,1393,1,0,0,0,1399,299,1,0,0,0,1400,1406,3,302,151,0,1401,
        1402,3,302,151,0,1402,1403,5,2,0,0,1403,1404,3,300,150,0,1404,1406,
        1,0,0,0,1405,1400,1,0,0,0,1405,1401,1,0,0,0,1406,301,1,0,0,0,1407,
        1410,3,304,152,0,1408,1410,3,382,191,0,1409,1407,1,0,0,0,1409,1408,
        1,0,0,0,1410,303,1,0,0,0,1411,1415,3,290,145,0,1412,1415,3,292,146,
        0,1413,1415,3,298,149,0,1414,1411,1,0,0,0,1414,1412,1,0,0,0,1414,
        1413,1,0,0,0,1415,305,1,0,0,0,1416,1417,3,308,154,0,1417,1418,3,
        342,171,0,1418,1419,3,308,154,0,1419,1425,1,0,0,0,1420,1421,5,12,
        0,0,1421,1422,3,306,153,0,1422,1423,5,13,0,0,1423,1425,1,0,0,0,1424,
        1416,1,0,0,0,1424,1420,1,0,0,0,1425,307,1,0,0,0,1426,1432,5,18,0,
        0,1427,1428,5,14,0,0,1428,1429,3,310,155,0,1429,1430,5,15,0,0,1430,
        1432,1,0,0,0,1431,1426,1,0,0,0,1431,1427,1,0,0,0,1432,309,1,0,0,
        0,1433,1437,3,254,127,0,1434,1436,3,312,156,0,1435,1434,1,0,0,0,
        1436,1439,1,0,0,0,1437,1435,1,0,0,0,1437,1438,1,0,0,0,1438,311,1,
        0,0,0,1439,1437,1,0,0,0,1440,1441,5,2,0,0,1441,1442,3,254,127,0,
        1442,313,1,0,0,0,1443,1449,3,316,158,0,1444,1445,5,12,0,0,1445,1446,
        3,314,157,0,1446,1447,5,13,0,0,1447,1449,1,0,0,0,1448,1443,1,0,0,
        0,1448,1444,1,0,0,0,1449,315,1,0,0,0,1450,1451,6,158,-1,0,1451,1452,
        3,318,159,0,1452,1458,1,0,0,0,1453,1454,10,1,0,0,1454,1455,5,89,
        0,0,1455,1457,3,318,159,0,1456,1453,1,0,0,0,1457,1460,1,0,0,0,1458,
        1456,1,0,0,0,1458,1459,1,0,0,0,1459,317,1,0,0,0,1460,1458,1,0,0,
        0,1461,1471,3,278,139,0,1462,1463,5,28,0,0,1463,1471,3,278,139,0,
        1464,1465,5,28,0,0,1465,1466,5,12,0,0,1466,1467,3,278,139,0,1467,
        1468,5,13,0,0,1468,1471,1,0,0,0,1469,1471,3,268,134,0,1470,1461,
        1,0,0,0,1470,1462,1,0,0,0,1470,1464,1,0,0,0,1470,1469,1,0,0,0,1471,
        319,1,0,0,0,1472,1476,3,332,166,0,1473,1476,3,326,163,0,1474,1476,
        3,324,162,0,1475,1472,1,0,0,0,1475,1473,1,0,0,0,1475,1474,1,0,0,
        0,1476,321,1,0,0,0,1477,1480,3,340,170,0,1478,1480,3,244,122,0,1479,
        1477,1,0,0,0,1479,1478,1,0,0,0,1480,323,1,0,0,0,1481,1482,7,0,0,
        0,1482,325,1,0,0,0,1483,1484,7,1,0,0,1484,327,1,0,0,0,1485,1486,
        5,33,0,0,1486,329,1,0,0,0,1487,1490,3,340,170,0,1488,1490,3,244,
        122,0,1489,1487,1,0,0,0,1489,1488,1,0,0,0,1490,331,1,0,0,0,1491,
        1494,3,334,167,0,1492,1494,5,94,0,0,1493,1491,1,0,0,0,1493,1492,
        1,0,0,0,1494,333,1,0,0,0,1495,1496,7,2,0,0,1496,335,1,0,0,0,1497,
        1505,5,35,0,0,1498,1505,5,36,0,0,1499,1505,5,37,0,0,1500,1505,5,
        38,0,0,1501,1502,5,28,0,0,1502,1505,5,89,0,0,1503,1505,5,39,0,0,
        1504,1497,1,0,0,0,1504,1498,1,0,0,0,1504,1499,1,0,0,0,1504,1500,
        1,0,0,0,1504,1501,1,0,0,0,1504,1503,1,0,0,0,1505,337,1,0,0,0,1506,
        1507,7,3,0,0,1507,339,1,0,0,0,1508,1509,5,28,0,0,1509,341,1,0,0,
        0,1510,1511,5,40,0,0,1511,343,1,0,0,0,1512,1513,5,41,0,0,1513,345,
        1,0,0,0,1514,1515,5,42,0,0,1515,347,1,0,0,0,1516,1517,3,350,175,
        0,1517,349,1,0,0,0,1518,1519,3,452,226,0,1519,351,1,0,0,0,1520,1521,
        3,454,227,0,1521,353,1,0,0,0,1522,1525,3,356,178,0,1523,1525,3,368,
        184,0,1524,1522,1,0,0,0,1524,1523,1,0,0,0,1525,355,1,0,0,0,1526,
        1529,3,364,182,0,1527,1529,3,372,186,0,1528,1526,1,0,0,0,1528,1527,
        1,0,0,0,1529,357,1,0,0,0,1530,1531,3,360,180,0,1531,359,1,0,0,0,
        1532,1533,5,43,0,0,1533,361,1,0,0,0,1534,1535,5,44,0,0,1535,363,
        1,0,0,0,1536,1537,3,366,183,0,1537,365,1,0,0,0,1538,1539,3,452,226,
        0,1539,367,1,0,0,0,1540,1541,3,370,185,0,1541,369,1,0,0,0,1542,1543,
        3,454,227,0,1543,371,1,0,0,0,1544,1545,3,374,187,0,1545,373,1,0,
        0,0,1546,1547,3,456,228,0,1547,375,1,0,0,0,1548,1551,3,368,184,0,
        1549,1551,3,372,186,0,1550,1548,1,0,0,0,1550,1549,1,0,0,0,1551,377,
        1,0,0,0,1552,1553,7,4,0,0,1553,379,1,0,0,0,1554,1557,3,458,229,0,
        1555,1557,5,67,0,0,1556,1554,1,0,0,0,1556,1555,1,0,0,0,1557,381,
        1,0,0,0,1558,1559,5,70,0,0,1559,383,1,0,0,0,1560,1569,3,388,194,
        0,1561,1569,3,394,197,0,1562,1569,3,398,199,0,1563,1569,5,50,0,0,
        1564,1565,5,14,0,0,1565,1566,3,386,193,0,1566,1567,5,15,0,0,1567,
        1569,1,0,0,0,1568,1560,1,0,0,0,1568,1561,1,0,0,0,1568,1562,1,0,0,
        0,1568,1563,1,0,0,0,1568,1564,1,0,0,0,1569,385,1,0,0,0,1570,1576,
        3,384,192,0,1571,1572,3,384,192,0,1572,1573,5,2,0,0,1573,1574,3,
        386,193,0,1574,1576,1,0,0,0,1575,1570,1,0,0,0,1575,1571,1,0,0,0,
        1576,387,1,0,0,0,1577,1580,3,450,225,0,1578,1580,3,390,195,0,1579,
        1577,1,0,0,0,1579,1578,1,0,0,0,1580,389,1,0,0,0,1581,1582,5,51,0,
        0,1582,1583,3,392,196,0,1583,1584,5,2,0,0,1584,1585,3,424,212,0,
        1585,1586,5,2,0,0,1586,1587,3,412,206,0,1587,1588,5,13,0,0,1588,
        391,1,0,0,0,1589,1590,3,452,226,0,1590,393,1,0,0,0,1591,1592,5,52,
        0,0,1592,1593,3,396,198,0,1593,1594,5,2,0,0,1594,1595,3,424,212,
        0,1595,1596,5,2,0,0,1596,1597,3,412,206,0,1597,1598,5,13,0,0,1598,
        395,1,0,0,0,1599,1600,3,452,226,0,1600,397,1,0,0,0,1601,1605,3,400,
        200,0,1602,1605,3,404,202,0,1603,1605,3,408,204,0,1604,1601,1,0,
        0,0,1604,1602,1,0,0,0,1604,1603,1,0,0,0,1605,399,1,0,0,0,1606,1607,
        5,53,0,0,1607,1608,3,460,230,0,1608,1609,3,402,201,0,1609,1610,5,
        13,0,0,1610,401,1,0,0,0,1611,1612,5,2,0,0,1612,1615,3,450,225,0,
        1613,1615,3,462,231,0,1614,1611,1,0,0,0,1614,1613,1,0,0,0,1615,403,
        1,0,0,0,1616,1617,5,54,0,0,1617,1618,3,406,203,0,1618,1619,3,422,
        211,0,1619,1620,5,13,0,0,1620,405,1,0,0,0,1621,1622,3,452,226,0,
        1622,407,1,0,0,0,1623,1624,5,55,0,0,1624,1625,3,410,205,0,1625,1626,
        5,2,0,0,1626,1627,3,424,212,0,1627,1628,5,2,0,0,1628,1629,3,412,
        206,0,1629,1630,5,13,0,0,1630,409,1,0,0,0,1631,1632,3,452,226,0,
        1632,411,1,0,0,0,1633,1639,5,18,0,0,1634,1635,5,14,0,0,1635,1636,
        3,414,207,0,1636,1637,5,15,0,0,1637,1639,1,0,0,0,1638,1633,1,0,0,
        0,1638,1634,1,0,0,0,1639,413,1,0,0,0,1640,1644,3,418,209,0,1641,
        1643,3,416,208,0,1642,1641,1,0,0,0,1643,1646,1,0,0,0,1644,1642,1,
        0,0,0,1644,1645,1,0,0,0,1645,415,1,0,0,0,1646,1644,1,0,0,0,1647,
        1648,5,2,0,0,1648,1649,3,418,209,0,1649,417,1,0,0,0,1650,1651,3,
        384,192,0,1651,1652,3,420,210,0,1652,419,1,0,0,0,1653,1654,5,16,
        0,0,1654,1657,3,436,218,0,1655,1657,3,462,231,0,1656,1653,1,0,0,
        0,1656,1655,1,0,0,0,1657,421,1,0,0,0,1658,1659,5,2,0,0,1659,1662,
        3,424,212,0,1660,1662,3,462,231,0,1661,1658,1,0,0,0,1661,1660,1,
        0,0,0,1662,423,1,0,0,0,1663,1664,3,444,222,0,1664,425,1,0,0,0,1665,
        1666,5,56,0,0,1666,1667,3,460,230,0,1667,1668,3,428,214,0,1668,1669,
        5,3,0,0,1669,427,1,0,0,0,1670,1679,3,462,231,0,1671,1672,5,2,0,0,
        1672,1679,3,430,215,0,1673,1674,5,2,0,0,1674,1675,3,430,215,0,1675,
        1676,5,2,0,0,1676,1677,3,434,217,0,1677,1679,1,0,0,0,1678,1670,1,
        0,0,0,1678,1671,1,0,0,0,1678,1673,1,0,0,0,1679,429,1,0,0,0,1680,
        1681,5,14,0,0,1681,1682,3,432,216,0,1682,1683,5,15,0,0,1683,1686,
        1,0,0,0,1684,1686,5,90,0,0,1685,1680,1,0,0,0,1685,1684,1,0,0,0,1686,
        431,1,0,0,0,1687,1693,3,450,225,0,1688,1689,3,450,225,0,1689,1690,
        5,2,0,0,1690,1691,3,432,216,0,1691,1693,1,0,0,0,1692,1687,1,0,0,
        0,1692,1688,1,0,0,0,1693,433,1,0,0,0,1694,1695,3,450,225,0,1695,
        435,1,0,0,0,1696,1703,3,438,219,0,1697,1698,3,438,219,0,1698,1699,
        5,16,0,0,1699,1700,3,436,218,0,1700,1703,1,0,0,0,1701,1703,3,444,
        222,0,1702,1696,1,0,0,0,1702,1697,1,0,0,0,1702,1701,1,0,0,0,1703,
        437,1,0,0,0,1704,1711,3,452,226,0,1705,1711,3,440,220,0,1706,1711,
        3,382,191,0,1707,1711,3,458,229,0,1708,1711,5,67,0,0,1709,1711,3,
        442,221,0,1710,1704,1,0,0,0,1710,1705,1,0,0,0,1710,1706,1,0,0,0,
        1710,1707,1,0,0,0,1710,1708,1,0,0,0,1710,1709,1,0,0,0,1711,439,1,
        0,0,0,1712,1713,3,452,226,0,1713,1714,5,12,0,0,1714,1715,3,446,223,
        0,1715,1716,5,13,0,0,1716,441,1,0,0,0,1717,1718,5,57,0,0,1718,1719,
        3,24,12,0,1719,1720,5,13,0,0,1720,1738,1,0,0,0,1721,1722,5,58,0,
        0,1722,1723,3,120,60,0,1723,1724,5,13,0,0,1724,1738,1,0,0,0,1725,
        1726,5,59,0,0,1726,1727,3,252,126,0,1727,1728,5,13,0,0,1728,1738,
        1,0,0,0,1729,1730,5,60,0,0,1730,1731,3,314,157,0,1731,1732,5,13,
        0,0,1732,1738,1,0,0,0,1733,1734,5,61,0,0,1734,1735,3,302,151,0,1735,
        1736,5,13,0,0,1736,1738,1,0,0,0,1737,1717,1,0,0,0,1737,1721,1,0,
        0,0,1737,1725,1,0,0,0,1737,1729,1,0,0,0,1737,1733,1,0,0,0,1738,443,
        1,0,0,0,1739,1745,5,18,0,0,1740,1741,5,14,0,0,1741,1742,3,446,223,
        0,1742,1743,5,15,0,0,1743,1745,1,0,0,0,1744,1739,1,0,0,0,1744,1740,
        1,0,0,0,1745,445,1,0,0,0,1746,1750,3,436,218,0,1747,1749,3,448,224,
        0,1748,1747,1,0,0,0,1749,1752,1,0,0,0,1750,1748,1,0,0,0,1750,1751,
        1,0,0,0,1751,447,1,0,0,0,1752,1750,1,0,0,0,1753,1754,5,2,0,0,1754,
        1755,3,436,218,0,1755,449,1,0,0,0,1756,1759,3,452,226,0,1757,1759,
        5,82,0,0,1758,1756,1,0,0,0,1758,1757,1,0,0,0,1759,451,1,0,0,0,1760,
        1761,7,5,0,0,1761,453,1,0,0,0,1762,1763,5,68,0,0,1763,455,1,0,0,
        0,1764,1765,5,69,0,0,1765,457,1,0,0,0,1766,1767,7,6,0,0,1767,459,
        1,0,0,0,1768,1769,3,452,226,0,1769,461,1,0,0,0,1770,1771,1,0,0,0,
        1771,463,1,0,0,0,131,467,474,482,545,551,556,564,569,578,590,603,
        616,622,626,635,651,659,672,676,686,690,711,718,725,736,744,751,
        758,775,783,797,802,811,821,833,846,864,872,876,884,896,909,915,
        919,928,944,948,956,968,976,988,1000,1015,1022,1029,1037,1044,1055,
        1065,1072,1078,1092,1096,1104,1119,1126,1141,1148,1164,1176,1200,
        1207,1211,1225,1232,1236,1251,1255,1259,1270,1275,1279,1287,1299,
        1312,1319,1327,1335,1349,1354,1360,1376,1380,1390,1398,1405,1409,
        1414,1424,1431,1437,1448,1458,1470,1475,1479,1489,1493,1504,1524,
        1528,1550,1556,1568,1575,1579,1604,1614,1638,1644,1656,1661,1678,
        1685,1692,1702,1710,1737,1744,1750,1758
    ]

class TPTPParser ( Parser ):

    grammarFileName = "TPTP.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'tpi('", "','", "').'", "'thf('", "'tff('", 
                     "'tcf('", "'fof('", "'cnf('", "'-'", "'&'", "'@'", 
                     "'('", "')'", "'['", "']'", "':'", "'$let('", "'[]'", 
                     "'!>'", "'{'", "'}'", "')}'", "'[.]'", "'.'", "'{.}'", 
                     "'(.)'", "'!'", "'~'", "'?*'", "'^'", "'@+'", "'@-'", 
                     "'<<'", "'?'", "'<=>'", "'=>'", "'<='", "'<~>'", "'~&'", 
                     "'-->'", "':='", "'=='", "'='", "'!='", "'!!'", "'??'", 
                     "'@@+'", "'@@-'", "'@='", "'unknown'", "'inference('", 
                     "'introduced('", "'file('", "'theory('", "'creator('", 
                     "'include('", "'$thf('", "'$tff('", "'$fof('", "'$cnf('", 
                     "'$fot('", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'+'", "'>'", "'<'", "'#'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'''", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'\\\\'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'.\\n'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "WS", "Comment_line", "Comment_block", 
                      "Single_quoted", "Back_quoted", "Distinct_object", 
                      "Dollar_word", "Dollar_dollar_word", "Upper_word", 
                      "Lower_word", "Real", "Signed_real", "Unsigned_real", 
                      "Decimal_exponent", "Decimal_fraction", "Exp_integer", 
                      "Signed_exp_integer", "Rational", "Signed_rational", 
                      "Unsigned_rational", "Integer", "Signed_integer", 
                      "Unsigned_integer", "Positive_integer", "Integer_digits", 
                      "Slash", "Slosh", "Vline", "Star", "Plus", "Arrow", 
                      "Less_sign", "Hash", "Not_star_slash", "Percentage_sign", 
                      "Double_quote", "Single_quote", "Back_quote", "Dot", 
                      "Slash_char", "Slosh_char", "Zero_numeric", "Underscore", 
                      "Alpha", "Dollar", "Printable_char", "Viewable_char" ]

    RULE_tptp_file = 0
    RULE_tptp_input = 1
    RULE_annotated_formula = 2
    RULE_tpi_annotated = 3
    RULE_tpi_formula = 4
    RULE_thf_annotated = 5
    RULE_tff_annotated = 6
    RULE_tcf_annotated = 7
    RULE_fof_annotated = 8
    RULE_cnf_annotated = 9
    RULE_annotations = 10
    RULE_formula_role = 11
    RULE_thf_formula = 12
    RULE_thf_logic_formula = 13
    RULE_thf_binary_formula = 14
    RULE_thf_binary_nonassoc = 15
    RULE_thf_binary_assoc = 16
    RULE_thf_or_formula = 17
    RULE_thf_and_formula = 18
    RULE_thf_apply_formula = 19
    RULE_thf_unit_formula = 20
    RULE_thf_preunit_formula = 21
    RULE_thf_unitary_formula = 22
    RULE_thf_quantified_formula = 23
    RULE_thf_quantification = 24
    RULE_thf_variable_list = 25
    RULE_thf_typed_variable = 26
    RULE_thf_unary_formula = 27
    RULE_thf_prefix_unary = 28
    RULE_thf_infix_unary = 29
    RULE_thf_atomic_formula = 30
    RULE_thf_plain_atomic = 31
    RULE_thf_defined_atomic = 32
    RULE_thf_defined_term = 33
    RULE_thf_defined_infix = 34
    RULE_thf_system_atomic = 35
    RULE_thf_let = 36
    RULE_thf_let_types = 37
    RULE_thf_atom_typing_list = 38
    RULE_thf_let_defns = 39
    RULE_thf_let_defn = 40
    RULE_thf_let_defn_list = 41
    RULE_thf_unitary_term = 42
    RULE_thf_conn_term = 43
    RULE_thf_tuple = 44
    RULE_thf_fof_function = 45
    RULE_thf_arguments = 46
    RULE_thf_formula_list = 47
    RULE_comma_thf_logic_formula = 48
    RULE_thf_atom_typing = 49
    RULE_thf_top_level_type = 50
    RULE_thf_unitary_type = 51
    RULE_thf_apply_type = 52
    RULE_thf_binary_type = 53
    RULE_thf_mapping_type = 54
    RULE_thf_xprod_type = 55
    RULE_thf_union_type = 56
    RULE_thf_subtype = 57
    RULE_thf_definition = 58
    RULE_thf_sequent = 59
    RULE_tff_formula = 60
    RULE_tff_logic_formula = 61
    RULE_tff_binary_formula = 62
    RULE_tff_binary_nonassoc = 63
    RULE_tff_binary_assoc = 64
    RULE_tff_or_formula = 65
    RULE_tff_and_formula = 66
    RULE_tff_unit_formula = 67
    RULE_tff_preunit_formula = 68
    RULE_tff_unitary_formula = 69
    RULE_txf_unitary_formula = 70
    RULE_tff_quantified_formula = 71
    RULE_tff_variable_list = 72
    RULE_tff_variable = 73
    RULE_tff_typed_variable = 74
    RULE_tff_unary_formula = 75
    RULE_tff_prefix_unary = 76
    RULE_tff_infix_unary = 77
    RULE_tff_atomic_formula = 78
    RULE_tff_plain_atomic = 79
    RULE_tff_defined_atomic = 80
    RULE_tff_defined_plain = 81
    RULE_tff_defined_infix = 82
    RULE_tff_system_atomic = 83
    RULE_txf_let = 84
    RULE_txf_let_types = 85
    RULE_tff_atom_typing_list = 86
    RULE_txf_let_defns = 87
    RULE_txf_let_defn = 88
    RULE_txf_let_LHS = 89
    RULE_txf_let_defn_list = 90
    RULE_nxf_atom = 91
    RULE_tff_term = 92
    RULE_tff_unitary_term = 93
    RULE_txf_tuple = 94
    RULE_tff_arguments = 95
    RULE_comma_tff_term = 96
    RULE_tff_atom_typing = 97
    RULE_tff_top_level_type = 98
    RULE_tff_non_atomic_type = 99
    RULE_tf1_quantified_type = 100
    RULE_tff_monotype = 101
    RULE_tff_unitary_type = 102
    RULE_tff_atomic_type = 103
    RULE_tff_type_arguments = 104
    RULE_tff_mapping_type = 105
    RULE_tff_xprod_type = 106
    RULE_txf_tuple_type = 107
    RULE_tff_type_list = 108
    RULE_tff_subtype = 109
    RULE_txf_definition = 110
    RULE_txf_sequent = 111
    RULE_nhf_long_connective = 112
    RULE_nhf_parameter_list = 113
    RULE_nhf_parameter = 114
    RULE_nhf_key_pair = 115
    RULE_nxf_long_connective = 116
    RULE_nxf_parameter_list = 117
    RULE_nxf_parameter = 118
    RULE_nxf_key_pair = 119
    RULE_ntf_connective_name = 120
    RULE_ntf_index = 121
    RULE_ntf_short_connective = 122
    RULE_tcf_formula = 123
    RULE_tcf_logic_formula = 124
    RULE_tcf_quantified_formula = 125
    RULE_fof_formula = 126
    RULE_fof_logic_formula = 127
    RULE_fof_binary_formula = 128
    RULE_fof_binary_nonassoc = 129
    RULE_fof_binary_assoc = 130
    RULE_fof_or_formula = 131
    RULE_fof_and_formula = 132
    RULE_fof_unary_formula = 133
    RULE_fof_infix_unary = 134
    RULE_fof_unit_formula = 135
    RULE_fof_unitary_formula = 136
    RULE_fof_quantified_formula = 137
    RULE_fof_variable_list = 138
    RULE_fof_atomic_formula = 139
    RULE_fof_plain_atomic_formula = 140
    RULE_fof_defined_atomic_formula = 141
    RULE_fof_defined_plain_formula = 142
    RULE_fof_defined_infix_formula = 143
    RULE_fof_system_atomic_formula = 144
    RULE_fof_plain_term = 145
    RULE_fof_defined_term = 146
    RULE_fof_defined_atomic_term = 147
    RULE_fof_defined_plain_term = 148
    RULE_fof_system_term = 149
    RULE_fof_arguments = 150
    RULE_fof_term = 151
    RULE_fof_function_term = 152
    RULE_fof_sequent = 153
    RULE_fof_formula_tuple = 154
    RULE_fof_formula_tuple_list = 155
    RULE_comma_fof_logic_formula = 156
    RULE_cnf_formula = 157
    RULE_cnf_disjunction = 158
    RULE_cnf_literal = 159
    RULE_thf_quantifier = 160
    RULE_thf_unary_connective = 161
    RULE_th1_quantifier = 162
    RULE_th0_quantifier = 163
    RULE_subtype_sign = 164
    RULE_tff_unary_connective = 165
    RULE_tff_quantifier = 166
    RULE_fof_quantifier = 167
    RULE_nonassoc_connective = 168
    RULE_assoc_connective = 169
    RULE_unary_connective = 170
    RULE_gentzen_arrow = 171
    RULE_assignment = 172
    RULE_identical = 173
    RULE_type_constant = 174
    RULE_type_functor = 175
    RULE_defined_type = 176
    RULE_atom = 177
    RULE_untyped_atom = 178
    RULE_defined_infix_pred = 179
    RULE_infix_equality = 180
    RULE_infix_inequality = 181
    RULE_constant = 182
    RULE_functor = 183
    RULE_defined_constant = 184
    RULE_defined_functor = 185
    RULE_system_constant = 186
    RULE_system_functor = 187
    RULE_def_or_sys_constant = 188
    RULE_th1_defined_term = 189
    RULE_defined_term = 190
    RULE_variable = 191
    RULE_source = 192
    RULE_sources = 193
    RULE_dag_source = 194
    RULE_inference_record = 195
    RULE_inference_rule = 196
    RULE_internal_source = 197
    RULE_intro_type = 198
    RULE_external_source = 199
    RULE_file_source = 200
    RULE_file_info = 201
    RULE_theory = 202
    RULE_theory_name = 203
    RULE_creator_source = 204
    RULE_creator_name = 205
    RULE_parents = 206
    RULE_parent_list = 207
    RULE_comma_parent_info = 208
    RULE_parent_info = 209
    RULE_parent_details = 210
    RULE_optional_info = 211
    RULE_useful_info = 212
    RULE_include = 213
    RULE_include_optionals = 214
    RULE_formula_selection = 215
    RULE_name_list = 216
    RULE_space_name = 217
    RULE_general_term = 218
    RULE_general_data = 219
    RULE_general_function = 220
    RULE_formula_data = 221
    RULE_general_list = 222
    RULE_general_terms = 223
    RULE_comma_general_term = 224
    RULE_name = 225
    RULE_atomic_word = 226
    RULE_atomic_defined_word = 227
    RULE_atomic_system_word = 228
    RULE_number = 229
    RULE_file_name = 230
    RULE_nothing = 231

    ruleNames =  [ "tptp_file", "tptp_input", "annotated_formula", "tpi_annotated", 
                   "tpi_formula", "thf_annotated", "tff_annotated", "tcf_annotated", 
                   "fof_annotated", "cnf_annotated", "annotations", "formula_role", 
                   "thf_formula", "thf_logic_formula", "thf_binary_formula", 
                   "thf_binary_nonassoc", "thf_binary_assoc", "thf_or_formula", 
                   "thf_and_formula", "thf_apply_formula", "thf_unit_formula", 
                   "thf_preunit_formula", "thf_unitary_formula", "thf_quantified_formula", 
                   "thf_quantification", "thf_variable_list", "thf_typed_variable", 
                   "thf_unary_formula", "thf_prefix_unary", "thf_infix_unary", 
                   "thf_atomic_formula", "thf_plain_atomic", "thf_defined_atomic", 
                   "thf_defined_term", "thf_defined_infix", "thf_system_atomic", 
                   "thf_let", "thf_let_types", "thf_atom_typing_list", "thf_let_defns", 
                   "thf_let_defn", "thf_let_defn_list", "thf_unitary_term", 
                   "thf_conn_term", "thf_tuple", "thf_fof_function", "thf_arguments", 
                   "thf_formula_list", "comma_thf_logic_formula", "thf_atom_typing", 
                   "thf_top_level_type", "thf_unitary_type", "thf_apply_type", 
                   "thf_binary_type", "thf_mapping_type", "thf_xprod_type", 
                   "thf_union_type", "thf_subtype", "thf_definition", "thf_sequent", 
                   "tff_formula", "tff_logic_formula", "tff_binary_formula", 
                   "tff_binary_nonassoc", "tff_binary_assoc", "tff_or_formula", 
                   "tff_and_formula", "tff_unit_formula", "tff_preunit_formula", 
                   "tff_unitary_formula", "txf_unitary_formula", "tff_quantified_formula", 
                   "tff_variable_list", "tff_variable", "tff_typed_variable", 
                   "tff_unary_formula", "tff_prefix_unary", "tff_infix_unary", 
                   "tff_atomic_formula", "tff_plain_atomic", "tff_defined_atomic", 
                   "tff_defined_plain", "tff_defined_infix", "tff_system_atomic", 
                   "txf_let", "txf_let_types", "tff_atom_typing_list", "txf_let_defns", 
                   "txf_let_defn", "txf_let_LHS", "txf_let_defn_list", "nxf_atom", 
                   "tff_term", "tff_unitary_term", "txf_tuple", "tff_arguments", 
                   "comma_tff_term", "tff_atom_typing", "tff_top_level_type", 
                   "tff_non_atomic_type", "tf1_quantified_type", "tff_monotype", 
                   "tff_unitary_type", "tff_atomic_type", "tff_type_arguments", 
                   "tff_mapping_type", "tff_xprod_type", "txf_tuple_type", 
                   "tff_type_list", "tff_subtype", "txf_definition", "txf_sequent", 
                   "nhf_long_connective", "nhf_parameter_list", "nhf_parameter", 
                   "nhf_key_pair", "nxf_long_connective", "nxf_parameter_list", 
                   "nxf_parameter", "nxf_key_pair", "ntf_connective_name", 
                   "ntf_index", "ntf_short_connective", "tcf_formula", "tcf_logic_formula", 
                   "tcf_quantified_formula", "fof_formula", "fof_logic_formula", 
                   "fof_binary_formula", "fof_binary_nonassoc", "fof_binary_assoc", 
                   "fof_or_formula", "fof_and_formula", "fof_unary_formula", 
                   "fof_infix_unary", "fof_unit_formula", "fof_unitary_formula", 
                   "fof_quantified_formula", "fof_variable_list", "fof_atomic_formula", 
                   "fof_plain_atomic_formula", "fof_defined_atomic_formula", 
                   "fof_defined_plain_formula", "fof_defined_infix_formula", 
                   "fof_system_atomic_formula", "fof_plain_term", "fof_defined_term", 
                   "fof_defined_atomic_term", "fof_defined_plain_term", 
                   "fof_system_term", "fof_arguments", "fof_term", "fof_function_term", 
                   "fof_sequent", "fof_formula_tuple", "fof_formula_tuple_list", 
                   "comma_fof_logic_formula", "cnf_formula", "cnf_disjunction", 
                   "cnf_literal", "thf_quantifier", "thf_unary_connective", 
                   "th1_quantifier", "th0_quantifier", "subtype_sign", "tff_unary_connective", 
                   "tff_quantifier", "fof_quantifier", "nonassoc_connective", 
                   "assoc_connective", "unary_connective", "gentzen_arrow", 
                   "assignment", "identical", "type_constant", "type_functor", 
                   "defined_type", "atom", "untyped_atom", "defined_infix_pred", 
                   "infix_equality", "infix_inequality", "constant", "functor", 
                   "defined_constant", "defined_functor", "system_constant", 
                   "system_functor", "def_or_sys_constant", "th1_defined_term", 
                   "defined_term", "variable", "source", "sources", "dag_source", 
                   "inference_record", "inference_rule", "internal_source", 
                   "intro_type", "external_source", "file_source", "file_info", 
                   "theory", "theory_name", "creator_source", "creator_name", 
                   "parents", "parent_list", "comma_parent_info", "parent_info", 
                   "parent_details", "optional_info", "useful_info", "include", 
                   "include_optionals", "formula_selection", "name_list", 
                   "space_name", "general_term", "general_data", "general_function", 
                   "formula_data", "general_list", "general_terms", "comma_general_term", 
                   "name", "atomic_word", "atomic_defined_word", "atomic_system_word", 
                   "number", "file_name", "nothing" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    WS=62
    Comment_line=63
    Comment_block=64
    Single_quoted=65
    Back_quoted=66
    Distinct_object=67
    Dollar_word=68
    Dollar_dollar_word=69
    Upper_word=70
    Lower_word=71
    Real=72
    Signed_real=73
    Unsigned_real=74
    Decimal_exponent=75
    Decimal_fraction=76
    Exp_integer=77
    Signed_exp_integer=78
    Rational=79
    Signed_rational=80
    Unsigned_rational=81
    Integer=82
    Signed_integer=83
    Unsigned_integer=84
    Positive_integer=85
    Integer_digits=86
    Slash=87
    Slosh=88
    Vline=89
    Star=90
    Plus=91
    Arrow=92
    Less_sign=93
    Hash=94
    Not_star_slash=95
    Percentage_sign=96
    Double_quote=97
    Single_quote=98
    Back_quote=99
    Dot=100
    Slash_char=101
    Slosh_char=102
    Zero_numeric=103
    Underscore=104
    Alpha=105
    Dollar=106
    Printable_char=107
    Viewable_char=108

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Tptp_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(TPTPParser.EOF, 0)

        def tptp_input(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Tptp_inputContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Tptp_inputContext,i)


        def getRuleIndex(self):
            return TPTPParser.RULE_tptp_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTptp_file" ):
                listener.enterTptp_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTptp_file" ):
                listener.exitTptp_file(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTptp_file" ):
                return visitor.visitTptp_file(self)
            else:
                return visitor.visitChildren(self)




    def tptp_file(self):

        localctx = TPTPParser.Tptp_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_tptp_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 72057594037928434) != 0):
                self.state = 464
                self.tptp_input()
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 470
            self.match(TPTPParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tptp_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotated_formula(self):
            return self.getTypedRuleContext(TPTPParser.Annotated_formulaContext,0)


        def include(self):
            return self.getTypedRuleContext(TPTPParser.IncludeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tptp_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTptp_input" ):
                listener.enterTptp_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTptp_input" ):
                listener.exitTptp_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTptp_input" ):
                return visitor.visitTptp_input(self)
            else:
                return visitor.visitChildren(self)




    def tptp_input(self):

        localctx = TPTPParser.Tptp_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_tptp_input)
        try:
            self.state = 474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 5, 6, 7, 8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 472
                self.annotated_formula()
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 473
                self.include()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotated_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_annotated(self):
            return self.getTypedRuleContext(TPTPParser.Thf_annotatedContext,0)


        def tff_annotated(self):
            return self.getTypedRuleContext(TPTPParser.Tff_annotatedContext,0)


        def tcf_annotated(self):
            return self.getTypedRuleContext(TPTPParser.Tcf_annotatedContext,0)


        def fof_annotated(self):
            return self.getTypedRuleContext(TPTPParser.Fof_annotatedContext,0)


        def cnf_annotated(self):
            return self.getTypedRuleContext(TPTPParser.Cnf_annotatedContext,0)


        def tpi_annotated(self):
            return self.getTypedRuleContext(TPTPParser.Tpi_annotatedContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_annotated_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotated_formula" ):
                listener.enterAnnotated_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotated_formula" ):
                listener.exitAnnotated_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotated_formula" ):
                return visitor.visitAnnotated_formula(self)
            else:
                return visitor.visitChildren(self)




    def annotated_formula(self):

        localctx = TPTPParser.Annotated_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_annotated_formula)
        try:
            self.state = 482
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 476
                self.thf_annotated()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 477
                self.tff_annotated()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 3)
                self.state = 478
                self.tcf_annotated()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 4)
                self.state = 479
                self.fof_annotated()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 5)
                self.state = 480
                self.cnf_annotated()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 6)
                self.state = 481
                self.tpi_annotated()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tpi_annotatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(TPTPParser.NameContext,0)


        def formula_role(self):
            return self.getTypedRuleContext(TPTPParser.Formula_roleContext,0)


        def tpi_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tpi_formulaContext,0)


        def annotations(self):
            return self.getTypedRuleContext(TPTPParser.AnnotationsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tpi_annotated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTpi_annotated" ):
                listener.enterTpi_annotated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTpi_annotated" ):
                listener.exitTpi_annotated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTpi_annotated" ):
                return visitor.visitTpi_annotated(self)
            else:
                return visitor.visitChildren(self)




    def tpi_annotated(self):

        localctx = TPTPParser.Tpi_annotatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_tpi_annotated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.match(TPTPParser.T__0)
            self.state = 485
            self.name()
            self.state = 486
            self.match(TPTPParser.T__1)
            self.state = 487
            self.formula_role()
            self.state = 488
            self.match(TPTPParser.T__1)
            self.state = 489
            self.tpi_formula()
            self.state = 490
            self.annotations()
            self.state = 491
            self.match(TPTPParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tpi_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tpi_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTpi_formula" ):
                listener.enterTpi_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTpi_formula" ):
                listener.exitTpi_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTpi_formula" ):
                return visitor.visitTpi_formula(self)
            else:
                return visitor.visitChildren(self)




    def tpi_formula(self):

        localctx = TPTPParser.Tpi_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_tpi_formula)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.fof_formula()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_annotatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(TPTPParser.NameContext,0)


        def formula_role(self):
            return self.getTypedRuleContext(TPTPParser.Formula_roleContext,0)


        def thf_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_formulaContext,0)


        def annotations(self):
            return self.getTypedRuleContext(TPTPParser.AnnotationsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_annotated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_annotated" ):
                listener.enterThf_annotated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_annotated" ):
                listener.exitThf_annotated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_annotated" ):
                return visitor.visitThf_annotated(self)
            else:
                return visitor.visitChildren(self)




    def thf_annotated(self):

        localctx = TPTPParser.Thf_annotatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_thf_annotated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.match(TPTPParser.T__3)
            self.state = 496
            self.name()
            self.state = 497
            self.match(TPTPParser.T__1)
            self.state = 498
            self.formula_role()
            self.state = 499
            self.match(TPTPParser.T__1)
            self.state = 500
            self.thf_formula()
            self.state = 501
            self.annotations()
            self.state = 502
            self.match(TPTPParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_annotatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(TPTPParser.NameContext,0)


        def formula_role(self):
            return self.getTypedRuleContext(TPTPParser.Formula_roleContext,0)


        def tff_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_formulaContext,0)


        def annotations(self):
            return self.getTypedRuleContext(TPTPParser.AnnotationsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_annotated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_annotated" ):
                listener.enterTff_annotated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_annotated" ):
                listener.exitTff_annotated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_annotated" ):
                return visitor.visitTff_annotated(self)
            else:
                return visitor.visitChildren(self)




    def tff_annotated(self):

        localctx = TPTPParser.Tff_annotatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_tff_annotated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(TPTPParser.T__4)
            self.state = 505
            self.name()
            self.state = 506
            self.match(TPTPParser.T__1)
            self.state = 507
            self.formula_role()
            self.state = 508
            self.match(TPTPParser.T__1)
            self.state = 509
            self.tff_formula()
            self.state = 510
            self.annotations()
            self.state = 511
            self.match(TPTPParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tcf_annotatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(TPTPParser.NameContext,0)


        def formula_role(self):
            return self.getTypedRuleContext(TPTPParser.Formula_roleContext,0)


        def tcf_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tcf_formulaContext,0)


        def annotations(self):
            return self.getTypedRuleContext(TPTPParser.AnnotationsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tcf_annotated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTcf_annotated" ):
                listener.enterTcf_annotated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTcf_annotated" ):
                listener.exitTcf_annotated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTcf_annotated" ):
                return visitor.visitTcf_annotated(self)
            else:
                return visitor.visitChildren(self)




    def tcf_annotated(self):

        localctx = TPTPParser.Tcf_annotatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_tcf_annotated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(TPTPParser.T__5)
            self.state = 514
            self.name()
            self.state = 515
            self.match(TPTPParser.T__1)
            self.state = 516
            self.formula_role()
            self.state = 517
            self.match(TPTPParser.T__1)
            self.state = 518
            self.tcf_formula()
            self.state = 519
            self.annotations()
            self.state = 520
            self.match(TPTPParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_annotatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(TPTPParser.NameContext,0)


        def formula_role(self):
            return self.getTypedRuleContext(TPTPParser.Formula_roleContext,0)


        def fof_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_formulaContext,0)


        def annotations(self):
            return self.getTypedRuleContext(TPTPParser.AnnotationsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_annotated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_annotated" ):
                listener.enterFof_annotated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_annotated" ):
                listener.exitFof_annotated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_annotated" ):
                return visitor.visitFof_annotated(self)
            else:
                return visitor.visitChildren(self)




    def fof_annotated(self):

        localctx = TPTPParser.Fof_annotatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_fof_annotated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.match(TPTPParser.T__6)
            self.state = 523
            self.name()
            self.state = 524
            self.match(TPTPParser.T__1)
            self.state = 525
            self.formula_role()
            self.state = 526
            self.match(TPTPParser.T__1)
            self.state = 527
            self.fof_formula()
            self.state = 528
            self.annotations()
            self.state = 529
            self.match(TPTPParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cnf_annotatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(TPTPParser.NameContext,0)


        def formula_role(self):
            return self.getTypedRuleContext(TPTPParser.Formula_roleContext,0)


        def cnf_formula(self):
            return self.getTypedRuleContext(TPTPParser.Cnf_formulaContext,0)


        def annotations(self):
            return self.getTypedRuleContext(TPTPParser.AnnotationsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_cnf_annotated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCnf_annotated" ):
                listener.enterCnf_annotated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCnf_annotated" ):
                listener.exitCnf_annotated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCnf_annotated" ):
                return visitor.visitCnf_annotated(self)
            else:
                return visitor.visitChildren(self)




    def cnf_annotated(self):

        localctx = TPTPParser.Cnf_annotatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_cnf_annotated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(TPTPParser.T__7)
            self.state = 532
            self.name()
            self.state = 533
            self.match(TPTPParser.T__1)
            self.state = 534
            self.formula_role()
            self.state = 535
            self.match(TPTPParser.T__1)
            self.state = 536
            self.cnf_formula()
            self.state = 537
            self.annotations()
            self.state = 538
            self.match(TPTPParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def source(self):
            return self.getTypedRuleContext(TPTPParser.SourceContext,0)


        def optional_info(self):
            return self.getTypedRuleContext(TPTPParser.Optional_infoContext,0)


        def nothing(self):
            return self.getTypedRuleContext(TPTPParser.NothingContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_annotations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotations" ):
                listener.enterAnnotations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotations" ):
                listener.exitAnnotations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotations" ):
                return visitor.visitAnnotations(self)
            else:
                return visitor.visitChildren(self)




    def annotations(self):

        localctx = TPTPParser.AnnotationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_annotations)
        try:
            self.state = 545
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 540
                self.match(TPTPParser.T__1)
                self.state = 541
                self.source()
                self.state = 542
                self.optional_info()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 544
                self.nothing()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formula_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Lower_word(self):
            return self.getToken(TPTPParser.Lower_word, 0)

        def general_term(self):
            return self.getTypedRuleContext(TPTPParser.General_termContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_formula_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormula_role" ):
                listener.enterFormula_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormula_role" ):
                listener.exitFormula_role(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormula_role" ):
                return visitor.visitFormula_role(self)
            else:
                return visitor.visitChildren(self)




    def formula_role(self):

        localctx = TPTPParser.Formula_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_formula_role)
        try:
            self.state = 551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 547
                self.match(TPTPParser.Lower_word)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 548
                self.match(TPTPParser.Lower_word)
                self.state = 549
                self.match(TPTPParser.T__8)
                self.state = 550
                self.general_term()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_logic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_logic_formulaContext,0)


        def thf_atom_typing(self):
            return self.getTypedRuleContext(TPTPParser.Thf_atom_typingContext,0)


        def thf_subtype(self):
            return self.getTypedRuleContext(TPTPParser.Thf_subtypeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_formula" ):
                listener.enterThf_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_formula" ):
                listener.exitThf_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_formula" ):
                return visitor.visitThf_formula(self)
            else:
                return visitor.visitChildren(self)




    def thf_formula(self):

        localctx = TPTPParser.Thf_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_thf_formula)
        try:
            self.state = 556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 553
                self.thf_logic_formula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 554
                self.thf_atom_typing()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 555
                self.thf_subtype()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_logic_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_unitary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_unitary_formulaContext,0)


        def thf_unary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_unary_formulaContext,0)


        def thf_binary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_binary_formulaContext,0)


        def thf_defined_infix(self):
            return self.getTypedRuleContext(TPTPParser.Thf_defined_infixContext,0)


        def thf_definition(self):
            return self.getTypedRuleContext(TPTPParser.Thf_definitionContext,0)


        def thf_sequent(self):
            return self.getTypedRuleContext(TPTPParser.Thf_sequentContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_logic_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_logic_formula" ):
                listener.enterThf_logic_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_logic_formula" ):
                listener.exitThf_logic_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_logic_formula" ):
                return visitor.visitThf_logic_formula(self)
            else:
                return visitor.visitChildren(self)




    def thf_logic_formula(self):

        localctx = TPTPParser.Thf_logic_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_thf_logic_formula)
        try:
            self.state = 564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 558
                self.thf_unitary_formula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 559
                self.thf_unary_formula()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 560
                self.thf_binary_formula()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 561
                self.thf_defined_infix()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 562
                self.thf_definition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 563
                self.thf_sequent()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_binary_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_binary_nonassoc(self):
            return self.getTypedRuleContext(TPTPParser.Thf_binary_nonassocContext,0)


        def thf_binary_assoc(self):
            return self.getTypedRuleContext(TPTPParser.Thf_binary_assocContext,0)


        def thf_binary_type(self):
            return self.getTypedRuleContext(TPTPParser.Thf_binary_typeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_binary_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_binary_formula" ):
                listener.enterThf_binary_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_binary_formula" ):
                listener.exitThf_binary_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_binary_formula" ):
                return visitor.visitThf_binary_formula(self)
            else:
                return visitor.visitChildren(self)




    def thf_binary_formula(self):

        localctx = TPTPParser.Thf_binary_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_thf_binary_formula)
        try:
            self.state = 569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 566
                self.thf_binary_nonassoc()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 567
                self.thf_binary_assoc()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 568
                self.thf_binary_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_binary_nonassocContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_unit_formula(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Thf_unit_formulaContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Thf_unit_formulaContext,i)


        def nonassoc_connective(self):
            return self.getTypedRuleContext(TPTPParser.Nonassoc_connectiveContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_binary_nonassoc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_binary_nonassoc" ):
                listener.enterThf_binary_nonassoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_binary_nonassoc" ):
                listener.exitThf_binary_nonassoc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_binary_nonassoc" ):
                return visitor.visitThf_binary_nonassoc(self)
            else:
                return visitor.visitChildren(self)




    def thf_binary_nonassoc(self):

        localctx = TPTPParser.Thf_binary_nonassocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_thf_binary_nonassoc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.thf_unit_formula()
            self.state = 572
            self.nonassoc_connective()
            self.state = 573
            self.thf_unit_formula()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_binary_assocContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_or_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_or_formulaContext,0)


        def thf_and_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_and_formulaContext,0)


        def thf_apply_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_apply_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_binary_assoc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_binary_assoc" ):
                listener.enterThf_binary_assoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_binary_assoc" ):
                listener.exitThf_binary_assoc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_binary_assoc" ):
                return visitor.visitThf_binary_assoc(self)
            else:
                return visitor.visitChildren(self)




    def thf_binary_assoc(self):

        localctx = TPTPParser.Thf_binary_assocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_thf_binary_assoc)
        try:
            self.state = 578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 575
                self.thf_or_formula(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 576
                self.thf_and_formula(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 577
                self.thf_apply_formula(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_or_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_unit_formula(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Thf_unit_formulaContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Thf_unit_formulaContext,i)


        def Vline(self):
            return self.getToken(TPTPParser.Vline, 0)

        def thf_or_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_or_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_or_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_or_formula" ):
                listener.enterThf_or_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_or_formula" ):
                listener.exitThf_or_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_or_formula" ):
                return visitor.visitThf_or_formula(self)
            else:
                return visitor.visitChildren(self)



    def thf_or_formula(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TPTPParser.Thf_or_formulaContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_thf_or_formula, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.thf_unit_formula()
            self.state = 582
            self.match(TPTPParser.Vline)
            self.state = 583
            self.thf_unit_formula()
            self._ctx.stop = self._input.LT(-1)
            self.state = 590
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TPTPParser.Thf_or_formulaContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_thf_or_formula)
                    self.state = 585
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 586
                    self.match(TPTPParser.Vline)
                    self.state = 587
                    self.thf_unit_formula() 
                self.state = 592
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Thf_and_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_unit_formula(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Thf_unit_formulaContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Thf_unit_formulaContext,i)


        def thf_and_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_and_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_and_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_and_formula" ):
                listener.enterThf_and_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_and_formula" ):
                listener.exitThf_and_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_and_formula" ):
                return visitor.visitThf_and_formula(self)
            else:
                return visitor.visitChildren(self)



    def thf_and_formula(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TPTPParser.Thf_and_formulaContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_thf_and_formula, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.thf_unit_formula()
            self.state = 595
            self.match(TPTPParser.T__9)
            self.state = 596
            self.thf_unit_formula()
            self._ctx.stop = self._input.LT(-1)
            self.state = 603
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TPTPParser.Thf_and_formulaContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_thf_and_formula)
                    self.state = 598
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 599
                    self.match(TPTPParser.T__9)
                    self.state = 600
                    self.thf_unit_formula() 
                self.state = 605
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Thf_apply_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_unit_formula(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Thf_unit_formulaContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Thf_unit_formulaContext,i)


        def thf_apply_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_apply_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_apply_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_apply_formula" ):
                listener.enterThf_apply_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_apply_formula" ):
                listener.exitThf_apply_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_apply_formula" ):
                return visitor.visitThf_apply_formula(self)
            else:
                return visitor.visitChildren(self)



    def thf_apply_formula(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TPTPParser.Thf_apply_formulaContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_thf_apply_formula, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self.thf_unit_formula()
            self.state = 608
            self.match(TPTPParser.T__10)
            self.state = 609
            self.thf_unit_formula()
            self._ctx.stop = self._input.LT(-1)
            self.state = 616
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TPTPParser.Thf_apply_formulaContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_thf_apply_formula)
                    self.state = 611
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 612
                    self.match(TPTPParser.T__10)
                    self.state = 613
                    self.thf_unit_formula() 
                self.state = 618
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Thf_unit_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_unitary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_unitary_formulaContext,0)


        def thf_unary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_unary_formulaContext,0)


        def thf_defined_infix(self):
            return self.getTypedRuleContext(TPTPParser.Thf_defined_infixContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_unit_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_unit_formula" ):
                listener.enterThf_unit_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_unit_formula" ):
                listener.exitThf_unit_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_unit_formula" ):
                return visitor.visitThf_unit_formula(self)
            else:
                return visitor.visitChildren(self)




    def thf_unit_formula(self):

        localctx = TPTPParser.Thf_unit_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_thf_unit_formula)
        try:
            self.state = 622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 619
                self.thf_unitary_formula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 620
                self.thf_unary_formula()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 621
                self.thf_defined_infix()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_preunit_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_unitary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_unitary_formulaContext,0)


        def thf_prefix_unary(self):
            return self.getTypedRuleContext(TPTPParser.Thf_prefix_unaryContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_preunit_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_preunit_formula" ):
                listener.enterThf_preunit_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_preunit_formula" ):
                listener.exitThf_preunit_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_preunit_formula" ):
                return visitor.visitThf_preunit_formula(self)
            else:
                return visitor.visitChildren(self)




    def thf_preunit_formula(self):

        localctx = TPTPParser.Thf_preunit_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_thf_preunit_formula)
        try:
            self.state = 626
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 14, 17, 18, 19, 20, 27, 29, 30, 31, 32, 34, 45, 46, 47, 48, 49, 65, 66, 67, 68, 69, 70, 71, 72, 79, 82, 94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 624
                self.thf_unitary_formula()
                pass
            elif token in [23, 25, 26, 28, 93]:
                self.enterOuterAlt(localctx, 2)
                self.state = 625
                self.thf_prefix_unary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_unitary_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_quantified_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_quantified_formulaContext,0)


        def thf_atomic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_atomic_formulaContext,0)


        def variable(self):
            return self.getTypedRuleContext(TPTPParser.VariableContext,0)


        def thf_logic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_logic_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_unitary_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_unitary_formula" ):
                listener.enterThf_unitary_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_unitary_formula" ):
                listener.exitThf_unitary_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_unitary_formula" ):
                return visitor.visitThf_unitary_formula(self)
            else:
                return visitor.visitChildren(self)




    def thf_unitary_formula(self):

        localctx = TPTPParser.Thf_unitary_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_thf_unitary_formula)
        try:
            self.state = 635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 628
                self.thf_quantified_formula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 629
                self.thf_atomic_formula()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 630
                self.variable()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 631
                self.match(TPTPParser.T__11)
                self.state = 632
                self.thf_logic_formula()
                self.state = 633
                self.match(TPTPParser.T__12)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_quantified_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_quantification(self):
            return self.getTypedRuleContext(TPTPParser.Thf_quantificationContext,0)


        def thf_unit_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_unit_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_quantified_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_quantified_formula" ):
                listener.enterThf_quantified_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_quantified_formula" ):
                listener.exitThf_quantified_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_quantified_formula" ):
                return visitor.visitThf_quantified_formula(self)
            else:
                return visitor.visitChildren(self)




    def thf_quantified_formula(self):

        localctx = TPTPParser.Thf_quantified_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_thf_quantified_formula)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.thf_quantification()
            self.state = 638
            self.thf_unit_formula()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_quantificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_quantifier(self):
            return self.getTypedRuleContext(TPTPParser.Thf_quantifierContext,0)


        def thf_variable_list(self):
            return self.getTypedRuleContext(TPTPParser.Thf_variable_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_quantification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_quantification" ):
                listener.enterThf_quantification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_quantification" ):
                listener.exitThf_quantification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_quantification" ):
                return visitor.visitThf_quantification(self)
            else:
                return visitor.visitChildren(self)




    def thf_quantification(self):

        localctx = TPTPParser.Thf_quantificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_thf_quantification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            self.thf_quantifier()
            self.state = 641
            self.match(TPTPParser.T__13)
            self.state = 642
            self.thf_variable_list()
            self.state = 643
            self.match(TPTPParser.T__14)
            self.state = 644
            self.match(TPTPParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_variable_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_typed_variable(self):
            return self.getTypedRuleContext(TPTPParser.Thf_typed_variableContext,0)


        def thf_variable_list(self):
            return self.getTypedRuleContext(TPTPParser.Thf_variable_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_variable_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_variable_list" ):
                listener.enterThf_variable_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_variable_list" ):
                listener.exitThf_variable_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_variable_list" ):
                return visitor.visitThf_variable_list(self)
            else:
                return visitor.visitChildren(self)




    def thf_variable_list(self):

        localctx = TPTPParser.Thf_variable_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_thf_variable_list)
        try:
            self.state = 651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 646
                self.thf_typed_variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 647
                self.thf_typed_variable()
                self.state = 648
                self.match(TPTPParser.T__1)
                self.state = 649
                self.thf_variable_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_typed_variableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(TPTPParser.VariableContext,0)


        def thf_top_level_type(self):
            return self.getTypedRuleContext(TPTPParser.Thf_top_level_typeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_typed_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_typed_variable" ):
                listener.enterThf_typed_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_typed_variable" ):
                listener.exitThf_typed_variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_typed_variable" ):
                return visitor.visitThf_typed_variable(self)
            else:
                return visitor.visitChildren(self)




    def thf_typed_variable(self):

        localctx = TPTPParser.Thf_typed_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_thf_typed_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.variable()
            self.state = 654
            self.match(TPTPParser.T__15)
            self.state = 655
            self.thf_top_level_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_unary_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_prefix_unary(self):
            return self.getTypedRuleContext(TPTPParser.Thf_prefix_unaryContext,0)


        def thf_infix_unary(self):
            return self.getTypedRuleContext(TPTPParser.Thf_infix_unaryContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_unary_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_unary_formula" ):
                listener.enterThf_unary_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_unary_formula" ):
                listener.exitThf_unary_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_unary_formula" ):
                return visitor.visitThf_unary_formula(self)
            else:
                return visitor.visitChildren(self)




    def thf_unary_formula(self):

        localctx = TPTPParser.Thf_unary_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_thf_unary_formula)
        try:
            self.state = 659
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23, 25, 26, 28, 93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 657
                self.thf_prefix_unary()
                pass
            elif token in [12, 14, 17, 18, 20, 45, 46, 47, 48, 49, 65, 66, 67, 68, 69, 70, 71, 72, 79, 82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 658
                self.thf_infix_unary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_prefix_unaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_unary_connective(self):
            return self.getTypedRuleContext(TPTPParser.Thf_unary_connectiveContext,0)


        def thf_preunit_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_preunit_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_prefix_unary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_prefix_unary" ):
                listener.enterThf_prefix_unary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_prefix_unary" ):
                listener.exitThf_prefix_unary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_prefix_unary" ):
                return visitor.visitThf_prefix_unary(self)
            else:
                return visitor.visitChildren(self)




    def thf_prefix_unary(self):

        localctx = TPTPParser.Thf_prefix_unaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_thf_prefix_unary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.thf_unary_connective()
            self.state = 662
            self.thf_preunit_formula()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_infix_unaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_unitary_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Thf_unitary_termContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Thf_unitary_termContext,i)


        def infix_inequality(self):
            return self.getTypedRuleContext(TPTPParser.Infix_inequalityContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_infix_unary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_infix_unary" ):
                listener.enterThf_infix_unary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_infix_unary" ):
                listener.exitThf_infix_unary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_infix_unary" ):
                return visitor.visitThf_infix_unary(self)
            else:
                return visitor.visitChildren(self)




    def thf_infix_unary(self):

        localctx = TPTPParser.Thf_infix_unaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_thf_infix_unary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.thf_unitary_term()
            self.state = 665
            self.infix_inequality()
            self.state = 666
            self.thf_unitary_term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_atomic_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_plain_atomic(self):
            return self.getTypedRuleContext(TPTPParser.Thf_plain_atomicContext,0)


        def thf_defined_atomic(self):
            return self.getTypedRuleContext(TPTPParser.Thf_defined_atomicContext,0)


        def thf_system_atomic(self):
            return self.getTypedRuleContext(TPTPParser.Thf_system_atomicContext,0)


        def thf_fof_function(self):
            return self.getTypedRuleContext(TPTPParser.Thf_fof_functionContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_atomic_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_atomic_formula" ):
                listener.enterThf_atomic_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_atomic_formula" ):
                listener.exitThf_atomic_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_atomic_formula" ):
                return visitor.visitThf_atomic_formula(self)
            else:
                return visitor.visitChildren(self)




    def thf_atomic_formula(self):

        localctx = TPTPParser.Thf_atomic_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_thf_atomic_formula)
        try:
            self.state = 672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 668
                self.thf_plain_atomic()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 669
                self.thf_defined_atomic()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 670
                self.thf_system_atomic()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 671
                self.thf_fof_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_plain_atomicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(TPTPParser.ConstantContext,0)


        def thf_tuple(self):
            return self.getTypedRuleContext(TPTPParser.Thf_tupleContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_plain_atomic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_plain_atomic" ):
                listener.enterThf_plain_atomic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_plain_atomic" ):
                listener.exitThf_plain_atomic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_plain_atomic" ):
                return visitor.visitThf_plain_atomic(self)
            else:
                return visitor.visitChildren(self)




    def thf_plain_atomic(self):

        localctx = TPTPParser.Thf_plain_atomicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_thf_plain_atomic)
        try:
            self.state = 676
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65, 66, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 674
                self.constant()
                pass
            elif token in [14, 18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 675
                self.thf_tuple()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_defined_atomicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defined_constant(self):
            return self.getTypedRuleContext(TPTPParser.Defined_constantContext,0)


        def thf_defined_term(self):
            return self.getTypedRuleContext(TPTPParser.Thf_defined_termContext,0)


        def thf_conn_term(self):
            return self.getTypedRuleContext(TPTPParser.Thf_conn_termContext,0)


        def nhf_long_connective(self):
            return self.getTypedRuleContext(TPTPParser.Nhf_long_connectiveContext,0)


        def thf_let(self):
            return self.getTypedRuleContext(TPTPParser.Thf_letContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_defined_atomic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_defined_atomic" ):
                listener.enterThf_defined_atomic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_defined_atomic" ):
                listener.exitThf_defined_atomic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_defined_atomic" ):
                return visitor.visitThf_defined_atomic(self)
            else:
                return visitor.visitChildren(self)




    def thf_defined_atomic(self):

        localctx = TPTPParser.Thf_defined_atomicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_thf_defined_atomic)
        try:
            self.state = 686
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.enterOuterAlt(localctx, 1)
                self.state = 678
                self.defined_constant()
                pass
            elif token in [45, 46, 47, 48, 49, 67, 72, 79, 82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 679
                self.thf_defined_term()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 3)
                self.state = 680
                self.match(TPTPParser.T__11)
                self.state = 681
                self.thf_conn_term()
                self.state = 682
                self.match(TPTPParser.T__12)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 4)
                self.state = 684
                self.nhf_long_connective()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 5)
                self.state = 685
                self.thf_let()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_defined_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defined_term(self):
            return self.getTypedRuleContext(TPTPParser.Defined_termContext,0)


        def th1_defined_term(self):
            return self.getTypedRuleContext(TPTPParser.Th1_defined_termContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_defined_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_defined_term" ):
                listener.enterThf_defined_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_defined_term" ):
                listener.exitThf_defined_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_defined_term" ):
                return visitor.visitThf_defined_term(self)
            else:
                return visitor.visitChildren(self)




    def thf_defined_term(self):

        localctx = TPTPParser.Thf_defined_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_thf_defined_term)
        try:
            self.state = 690
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67, 72, 79, 82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 688
                self.defined_term()
                pass
            elif token in [45, 46, 47, 48, 49]:
                self.enterOuterAlt(localctx, 2)
                self.state = 689
                self.th1_defined_term()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_defined_infixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_unitary_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Thf_unitary_termContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Thf_unitary_termContext,i)


        def defined_infix_pred(self):
            return self.getTypedRuleContext(TPTPParser.Defined_infix_predContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_defined_infix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_defined_infix" ):
                listener.enterThf_defined_infix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_defined_infix" ):
                listener.exitThf_defined_infix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_defined_infix" ):
                return visitor.visitThf_defined_infix(self)
            else:
                return visitor.visitChildren(self)




    def thf_defined_infix(self):

        localctx = TPTPParser.Thf_defined_infixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_thf_defined_infix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.thf_unitary_term()
            self.state = 693
            self.defined_infix_pred()
            self.state = 694
            self.thf_unitary_term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_system_atomicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def system_constant(self):
            return self.getTypedRuleContext(TPTPParser.System_constantContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_system_atomic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_system_atomic" ):
                listener.enterThf_system_atomic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_system_atomic" ):
                listener.exitThf_system_atomic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_system_atomic" ):
                return visitor.visitThf_system_atomic(self)
            else:
                return visitor.visitChildren(self)




    def thf_system_atomic(self):

        localctx = TPTPParser.Thf_system_atomicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_thf_system_atomic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.system_constant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_letContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_let_types(self):
            return self.getTypedRuleContext(TPTPParser.Thf_let_typesContext,0)


        def thf_let_defns(self):
            return self.getTypedRuleContext(TPTPParser.Thf_let_defnsContext,0)


        def thf_logic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_logic_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_let

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_let" ):
                listener.enterThf_let(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_let" ):
                listener.exitThf_let(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_let" ):
                return visitor.visitThf_let(self)
            else:
                return visitor.visitChildren(self)




    def thf_let(self):

        localctx = TPTPParser.Thf_letContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_thf_let)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(TPTPParser.T__16)
            self.state = 699
            self.thf_let_types()
            self.state = 700
            self.match(TPTPParser.T__1)
            self.state = 701
            self.thf_let_defns()
            self.state = 702
            self.match(TPTPParser.T__1)
            self.state = 703
            self.thf_logic_formula()
            self.state = 704
            self.match(TPTPParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_let_typesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_atom_typing(self):
            return self.getTypedRuleContext(TPTPParser.Thf_atom_typingContext,0)


        def thf_atom_typing_list(self):
            return self.getTypedRuleContext(TPTPParser.Thf_atom_typing_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_let_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_let_types" ):
                listener.enterThf_let_types(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_let_types" ):
                listener.exitThf_let_types(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_let_types" ):
                return visitor.visitThf_let_types(self)
            else:
                return visitor.visitChildren(self)




    def thf_let_types(self):

        localctx = TPTPParser.Thf_let_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_thf_let_types)
        try:
            self.state = 711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 65, 66, 69, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.thf_atom_typing()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self.match(TPTPParser.T__13)
                self.state = 708
                self.thf_atom_typing_list()
                self.state = 709
                self.match(TPTPParser.T__14)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_atom_typing_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_atom_typing(self):
            return self.getTypedRuleContext(TPTPParser.Thf_atom_typingContext,0)


        def thf_atom_typing_list(self):
            return self.getTypedRuleContext(TPTPParser.Thf_atom_typing_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_atom_typing_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_atom_typing_list" ):
                listener.enterThf_atom_typing_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_atom_typing_list" ):
                listener.exitThf_atom_typing_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_atom_typing_list" ):
                return visitor.visitThf_atom_typing_list(self)
            else:
                return visitor.visitChildren(self)




    def thf_atom_typing_list(self):

        localctx = TPTPParser.Thf_atom_typing_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_thf_atom_typing_list)
        try:
            self.state = 718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 713
                self.thf_atom_typing()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self.thf_atom_typing()
                self.state = 715
                self.match(TPTPParser.T__1)
                self.state = 716
                self.thf_atom_typing_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_let_defnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_let_defn(self):
            return self.getTypedRuleContext(TPTPParser.Thf_let_defnContext,0)


        def thf_let_defn_list(self):
            return self.getTypedRuleContext(TPTPParser.Thf_let_defn_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_let_defns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_let_defns" ):
                listener.enterThf_let_defns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_let_defns" ):
                listener.exitThf_let_defns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_let_defns" ):
                return visitor.visitThf_let_defns(self)
            else:
                return visitor.visitChildren(self)




    def thf_let_defns(self):

        localctx = TPTPParser.Thf_let_defnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_thf_let_defns)
        try:
            self.state = 725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 720
                self.thf_let_defn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                self.match(TPTPParser.T__13)
                self.state = 722
                self.thf_let_defn_list()
                self.state = 723
                self.match(TPTPParser.T__14)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_let_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_logic_formula(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Thf_logic_formulaContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Thf_logic_formulaContext,i)


        def assignment(self):
            return self.getTypedRuleContext(TPTPParser.AssignmentContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_let_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_let_defn" ):
                listener.enterThf_let_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_let_defn" ):
                listener.exitThf_let_defn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_let_defn" ):
                return visitor.visitThf_let_defn(self)
            else:
                return visitor.visitChildren(self)




    def thf_let_defn(self):

        localctx = TPTPParser.Thf_let_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_thf_let_defn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.thf_logic_formula()
            self.state = 728
            self.assignment()
            self.state = 729
            self.thf_logic_formula()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_let_defn_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_let_defn(self):
            return self.getTypedRuleContext(TPTPParser.Thf_let_defnContext,0)


        def thf_let_defn_list(self):
            return self.getTypedRuleContext(TPTPParser.Thf_let_defn_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_let_defn_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_let_defn_list" ):
                listener.enterThf_let_defn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_let_defn_list" ):
                listener.exitThf_let_defn_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_let_defn_list" ):
                return visitor.visitThf_let_defn_list(self)
            else:
                return visitor.visitChildren(self)




    def thf_let_defn_list(self):

        localctx = TPTPParser.Thf_let_defn_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_thf_let_defn_list)
        try:
            self.state = 736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 731
                self.thf_let_defn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 732
                self.thf_let_defn()
                self.state = 733
                self.match(TPTPParser.T__1)
                self.state = 734
                self.thf_let_defn_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_unitary_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_atomic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_atomic_formulaContext,0)


        def variable(self):
            return self.getTypedRuleContext(TPTPParser.VariableContext,0)


        def thf_logic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_logic_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_unitary_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_unitary_term" ):
                listener.enterThf_unitary_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_unitary_term" ):
                listener.exitThf_unitary_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_unitary_term" ):
                return visitor.visitThf_unitary_term(self)
            else:
                return visitor.visitChildren(self)




    def thf_unitary_term(self):

        localctx = TPTPParser.Thf_unitary_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_thf_unitary_term)
        try:
            self.state = 744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 738
                self.thf_atomic_formula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 739
                self.variable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 740
                self.match(TPTPParser.T__11)
                self.state = 741
                self.thf_logic_formula()
                self.state = 742
                self.match(TPTPParser.T__12)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_conn_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonassoc_connective(self):
            return self.getTypedRuleContext(TPTPParser.Nonassoc_connectiveContext,0)


        def assoc_connective(self):
            return self.getTypedRuleContext(TPTPParser.Assoc_connectiveContext,0)


        def infix_equality(self):
            return self.getTypedRuleContext(TPTPParser.Infix_equalityContext,0)


        def infix_inequality(self):
            return self.getTypedRuleContext(TPTPParser.Infix_inequalityContext,0)


        def thf_unary_connective(self):
            return self.getTypedRuleContext(TPTPParser.Thf_unary_connectiveContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_conn_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_conn_term" ):
                listener.enterThf_conn_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_conn_term" ):
                listener.exitThf_conn_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_conn_term" ):
                return visitor.visitThf_conn_term(self)
            else:
                return visitor.visitChildren(self)




    def thf_conn_term(self):

        localctx = TPTPParser.Thf_conn_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_thf_conn_term)
        try:
            self.state = 751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 746
                self.nonassoc_connective()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 747
                self.assoc_connective()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 748
                self.infix_equality()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 749
                self.infix_inequality()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 750
                self.thf_unary_connective()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_tupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_formula_list(self):
            return self.getTypedRuleContext(TPTPParser.Thf_formula_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_tuple" ):
                listener.enterThf_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_tuple" ):
                listener.exitThf_tuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_tuple" ):
                return visitor.visitThf_tuple(self)
            else:
                return visitor.visitChildren(self)




    def thf_tuple(self):

        localctx = TPTPParser.Thf_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_thf_tuple)
        try:
            self.state = 758
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 753
                self.match(TPTPParser.T__17)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 754
                self.match(TPTPParser.T__13)
                self.state = 755
                self.thf_formula_list()
                self.state = 756
                self.match(TPTPParser.T__14)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_fof_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functor(self):
            return self.getTypedRuleContext(TPTPParser.FunctorContext,0)


        def thf_arguments(self):
            return self.getTypedRuleContext(TPTPParser.Thf_argumentsContext,0)


        def defined_functor(self):
            return self.getTypedRuleContext(TPTPParser.Defined_functorContext,0)


        def system_functor(self):
            return self.getTypedRuleContext(TPTPParser.System_functorContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_fof_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_fof_function" ):
                listener.enterThf_fof_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_fof_function" ):
                listener.exitThf_fof_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_fof_function" ):
                return visitor.visitThf_fof_function(self)
            else:
                return visitor.visitChildren(self)




    def thf_fof_function(self):

        localctx = TPTPParser.Thf_fof_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_thf_fof_function)
        try:
            self.state = 775
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65, 66, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 760
                self.functor()
                self.state = 761
                self.match(TPTPParser.T__11)
                self.state = 762
                self.thf_arguments()
                self.state = 763
                self.match(TPTPParser.T__12)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 765
                self.defined_functor()
                self.state = 766
                self.match(TPTPParser.T__11)
                self.state = 767
                self.thf_arguments()
                self.state = 768
                self.match(TPTPParser.T__12)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 770
                self.system_functor()
                self.state = 771
                self.match(TPTPParser.T__11)
                self.state = 772
                self.thf_arguments()
                self.state = 773
                self.match(TPTPParser.T__12)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_argumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_formula_list(self):
            return self.getTypedRuleContext(TPTPParser.Thf_formula_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_arguments" ):
                listener.enterThf_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_arguments" ):
                listener.exitThf_arguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_arguments" ):
                return visitor.visitThf_arguments(self)
            else:
                return visitor.visitChildren(self)




    def thf_arguments(self):

        localctx = TPTPParser.Thf_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_thf_arguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.thf_formula_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_formula_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_logic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_logic_formulaContext,0)


        def comma_thf_logic_formula(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Comma_thf_logic_formulaContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Comma_thf_logic_formulaContext,i)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_formula_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_formula_list" ):
                listener.enterThf_formula_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_formula_list" ):
                listener.exitThf_formula_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_formula_list" ):
                return visitor.visitThf_formula_list(self)
            else:
                return visitor.visitChildren(self)




    def thf_formula_list(self):

        localctx = TPTPParser.Thf_formula_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_thf_formula_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.thf_logic_formula()
            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 780
                self.comma_thf_logic_formula()
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comma_thf_logic_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_logic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_logic_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_comma_thf_logic_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma_thf_logic_formula" ):
                listener.enterComma_thf_logic_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma_thf_logic_formula" ):
                listener.exitComma_thf_logic_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComma_thf_logic_formula" ):
                return visitor.visitComma_thf_logic_formula(self)
            else:
                return visitor.visitChildren(self)




    def comma_thf_logic_formula(self):

        localctx = TPTPParser.Comma_thf_logic_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_comma_thf_logic_formula)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(TPTPParser.T__1)
            self.state = 787
            self.thf_logic_formula()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_atom_typingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untyped_atom(self):
            return self.getTypedRuleContext(TPTPParser.Untyped_atomContext,0)


        def thf_top_level_type(self):
            return self.getTypedRuleContext(TPTPParser.Thf_top_level_typeContext,0)


        def thf_atom_typing(self):
            return self.getTypedRuleContext(TPTPParser.Thf_atom_typingContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_atom_typing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_atom_typing" ):
                listener.enterThf_atom_typing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_atom_typing" ):
                listener.exitThf_atom_typing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_atom_typing" ):
                return visitor.visitThf_atom_typing(self)
            else:
                return visitor.visitChildren(self)




    def thf_atom_typing(self):

        localctx = TPTPParser.Thf_atom_typingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_thf_atom_typing)
        try:
            self.state = 797
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65, 66, 69, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 789
                self.untyped_atom()
                self.state = 790
                self.match(TPTPParser.T__15)
                self.state = 791
                self.thf_top_level_type()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 793
                self.match(TPTPParser.T__11)
                self.state = 794
                self.thf_atom_typing()
                self.state = 795
                self.match(TPTPParser.T__12)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_top_level_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_unitary_type(self):
            return self.getTypedRuleContext(TPTPParser.Thf_unitary_typeContext,0)


        def thf_mapping_type(self):
            return self.getTypedRuleContext(TPTPParser.Thf_mapping_typeContext,0)


        def thf_apply_type(self):
            return self.getTypedRuleContext(TPTPParser.Thf_apply_typeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_top_level_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_top_level_type" ):
                listener.enterThf_top_level_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_top_level_type" ):
                listener.exitThf_top_level_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_top_level_type" ):
                return visitor.visitThf_top_level_type(self)
            else:
                return visitor.visitChildren(self)




    def thf_top_level_type(self):

        localctx = TPTPParser.Thf_top_level_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_thf_top_level_type)
        try:
            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 799
                self.thf_unitary_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 800
                self.thf_mapping_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 801
                self.thf_apply_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_unitary_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_unitary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_unitary_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_unitary_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_unitary_type" ):
                listener.enterThf_unitary_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_unitary_type" ):
                listener.exitThf_unitary_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_unitary_type" ):
                return visitor.visitThf_unitary_type(self)
            else:
                return visitor.visitChildren(self)




    def thf_unitary_type(self):

        localctx = TPTPParser.Thf_unitary_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_thf_unitary_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.thf_unitary_formula()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_apply_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_apply_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_apply_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_apply_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_apply_type" ):
                listener.enterThf_apply_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_apply_type" ):
                listener.exitThf_apply_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_apply_type" ):
                return visitor.visitThf_apply_type(self)
            else:
                return visitor.visitChildren(self)




    def thf_apply_type(self):

        localctx = TPTPParser.Thf_apply_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_thf_apply_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.thf_apply_formula(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_binary_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_mapping_type(self):
            return self.getTypedRuleContext(TPTPParser.Thf_mapping_typeContext,0)


        def thf_xprod_type(self):
            return self.getTypedRuleContext(TPTPParser.Thf_xprod_typeContext,0)


        def thf_union_type(self):
            return self.getTypedRuleContext(TPTPParser.Thf_union_typeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_binary_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_binary_type" ):
                listener.enterThf_binary_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_binary_type" ):
                listener.exitThf_binary_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_binary_type" ):
                return visitor.visitThf_binary_type(self)
            else:
                return visitor.visitChildren(self)




    def thf_binary_type(self):

        localctx = TPTPParser.Thf_binary_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_thf_binary_type)
        try:
            self.state = 811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 808
                self.thf_mapping_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 809
                self.thf_xprod_type(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 810
                self.thf_union_type(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_mapping_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_unitary_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Thf_unitary_typeContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Thf_unitary_typeContext,i)


        def Arrow(self):
            return self.getToken(TPTPParser.Arrow, 0)

        def thf_mapping_type(self):
            return self.getTypedRuleContext(TPTPParser.Thf_mapping_typeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_mapping_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_mapping_type" ):
                listener.enterThf_mapping_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_mapping_type" ):
                listener.exitThf_mapping_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_mapping_type" ):
                return visitor.visitThf_mapping_type(self)
            else:
                return visitor.visitChildren(self)




    def thf_mapping_type(self):

        localctx = TPTPParser.Thf_mapping_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_thf_mapping_type)
        try:
            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 813
                self.thf_unitary_type()
                self.state = 814
                self.match(TPTPParser.Arrow)
                self.state = 815
                self.thf_unitary_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 817
                self.thf_unitary_type()
                self.state = 818
                self.match(TPTPParser.Arrow)
                self.state = 819
                self.thf_mapping_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_xprod_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_unitary_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Thf_unitary_typeContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Thf_unitary_typeContext,i)


        def Star(self):
            return self.getToken(TPTPParser.Star, 0)

        def thf_xprod_type(self):
            return self.getTypedRuleContext(TPTPParser.Thf_xprod_typeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_xprod_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_xprod_type" ):
                listener.enterThf_xprod_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_xprod_type" ):
                listener.exitThf_xprod_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_xprod_type" ):
                return visitor.visitThf_xprod_type(self)
            else:
                return visitor.visitChildren(self)



    def thf_xprod_type(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TPTPParser.Thf_xprod_typeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 110
        self.enterRecursionRule(localctx, 110, self.RULE_thf_xprod_type, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.thf_unitary_type()
            self.state = 825
            self.match(TPTPParser.Star)
            self.state = 826
            self.thf_unitary_type()
            self._ctx.stop = self._input.LT(-1)
            self.state = 833
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TPTPParser.Thf_xprod_typeContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_thf_xprod_type)
                    self.state = 828
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 829
                    self.match(TPTPParser.Star)
                    self.state = 830
                    self.thf_unitary_type() 
                self.state = 835
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Thf_union_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_unitary_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Thf_unitary_typeContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Thf_unitary_typeContext,i)


        def Plus(self):
            return self.getToken(TPTPParser.Plus, 0)

        def thf_union_type(self):
            return self.getTypedRuleContext(TPTPParser.Thf_union_typeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_union_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_union_type" ):
                listener.enterThf_union_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_union_type" ):
                listener.exitThf_union_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_union_type" ):
                return visitor.visitThf_union_type(self)
            else:
                return visitor.visitChildren(self)



    def thf_union_type(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TPTPParser.Thf_union_typeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 112
        self.enterRecursionRule(localctx, 112, self.RULE_thf_union_type, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.thf_unitary_type()
            self.state = 838
            self.match(TPTPParser.Plus)
            self.state = 839
            self.thf_unitary_type()
            self._ctx.stop = self._input.LT(-1)
            self.state = 846
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TPTPParser.Thf_union_typeContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_thf_union_type)
                    self.state = 841
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 842
                    self.match(TPTPParser.Plus)
                    self.state = 843
                    self.thf_unitary_type() 
                self.state = 848
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Thf_subtypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untyped_atom(self):
            return self.getTypedRuleContext(TPTPParser.Untyped_atomContext,0)


        def subtype_sign(self):
            return self.getTypedRuleContext(TPTPParser.Subtype_signContext,0)


        def atom(self):
            return self.getTypedRuleContext(TPTPParser.AtomContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_subtype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_subtype" ):
                listener.enterThf_subtype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_subtype" ):
                listener.exitThf_subtype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_subtype" ):
                return visitor.visitThf_subtype(self)
            else:
                return visitor.visitChildren(self)




    def thf_subtype(self):

        localctx = TPTPParser.Thf_subtypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_thf_subtype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.untyped_atom()
            self.state = 850
            self.subtype_sign()
            self.state = 851
            self.atom()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_atomic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_atomic_formulaContext,0)


        def identical(self):
            return self.getTypedRuleContext(TPTPParser.IdenticalContext,0)


        def thf_logic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_logic_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_definition" ):
                listener.enterThf_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_definition" ):
                listener.exitThf_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_definition" ):
                return visitor.visitThf_definition(self)
            else:
                return visitor.visitChildren(self)




    def thf_definition(self):

        localctx = TPTPParser.Thf_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_thf_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.thf_atomic_formula()
            self.state = 854
            self.identical()
            self.state = 855
            self.thf_logic_formula()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_sequentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_tuple(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Thf_tupleContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Thf_tupleContext,i)


        def gentzen_arrow(self):
            return self.getTypedRuleContext(TPTPParser.Gentzen_arrowContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_sequent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_sequent" ):
                listener.enterThf_sequent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_sequent" ):
                listener.exitThf_sequent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_sequent" ):
                return visitor.visitThf_sequent(self)
            else:
                return visitor.visitChildren(self)




    def thf_sequent(self):

        localctx = TPTPParser.Thf_sequentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_thf_sequent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.thf_tuple()
            self.state = 858
            self.gentzen_arrow()
            self.state = 859
            self.thf_tuple()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_logic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_logic_formulaContext,0)


        def tff_atom_typing(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atom_typingContext,0)


        def tff_subtype(self):
            return self.getTypedRuleContext(TPTPParser.Tff_subtypeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_formula" ):
                listener.enterTff_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_formula" ):
                listener.exitTff_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_formula" ):
                return visitor.visitTff_formula(self)
            else:
                return visitor.visitChildren(self)




    def tff_formula(self):

        localctx = TPTPParser.Tff_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_tff_formula)
        try:
            self.state = 864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 861
                self.tff_logic_formula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 862
                self.tff_atom_typing()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 863
                self.tff_subtype()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_logic_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_unitary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_unitary_formulaContext,0)


        def tff_unary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_unary_formulaContext,0)


        def tff_binary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_binary_formulaContext,0)


        def tff_defined_infix(self):
            return self.getTypedRuleContext(TPTPParser.Tff_defined_infixContext,0)


        def txf_definition(self):
            return self.getTypedRuleContext(TPTPParser.Txf_definitionContext,0)


        def txf_sequent(self):
            return self.getTypedRuleContext(TPTPParser.Txf_sequentContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_logic_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_logic_formula" ):
                listener.enterTff_logic_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_logic_formula" ):
                listener.exitTff_logic_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_logic_formula" ):
                return visitor.visitTff_logic_formula(self)
            else:
                return visitor.visitChildren(self)




    def tff_logic_formula(self):

        localctx = TPTPParser.Tff_logic_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_tff_logic_formula)
        try:
            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 866
                self.tff_unitary_formula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 867
                self.tff_unary_formula()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 868
                self.tff_binary_formula()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 869
                self.tff_defined_infix()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 870
                self.txf_definition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 871
                self.txf_sequent()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_binary_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_binary_nonassoc(self):
            return self.getTypedRuleContext(TPTPParser.Tff_binary_nonassocContext,0)


        def tff_binary_assoc(self):
            return self.getTypedRuleContext(TPTPParser.Tff_binary_assocContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_binary_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_binary_formula" ):
                listener.enterTff_binary_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_binary_formula" ):
                listener.exitTff_binary_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_binary_formula" ):
                return visitor.visitTff_binary_formula(self)
            else:
                return visitor.visitChildren(self)




    def tff_binary_formula(self):

        localctx = TPTPParser.Tff_binary_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_tff_binary_formula)
        try:
            self.state = 876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.tff_binary_nonassoc()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 875
                self.tff_binary_assoc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_binary_nonassocContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_unit_formula(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Tff_unit_formulaContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Tff_unit_formulaContext,i)


        def nonassoc_connective(self):
            return self.getTypedRuleContext(TPTPParser.Nonassoc_connectiveContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_binary_nonassoc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_binary_nonassoc" ):
                listener.enterTff_binary_nonassoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_binary_nonassoc" ):
                listener.exitTff_binary_nonassoc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_binary_nonassoc" ):
                return visitor.visitTff_binary_nonassoc(self)
            else:
                return visitor.visitChildren(self)




    def tff_binary_nonassoc(self):

        localctx = TPTPParser.Tff_binary_nonassocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_tff_binary_nonassoc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.tff_unit_formula()
            self.state = 879
            self.nonassoc_connective()
            self.state = 880
            self.tff_unit_formula()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_binary_assocContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_or_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_or_formulaContext,0)


        def tff_and_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_and_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_binary_assoc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_binary_assoc" ):
                listener.enterTff_binary_assoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_binary_assoc" ):
                listener.exitTff_binary_assoc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_binary_assoc" ):
                return visitor.visitTff_binary_assoc(self)
            else:
                return visitor.visitChildren(self)




    def tff_binary_assoc(self):

        localctx = TPTPParser.Tff_binary_assocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_tff_binary_assoc)
        try:
            self.state = 884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 882
                self.tff_or_formula(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 883
                self.tff_and_formula(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_or_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_unit_formula(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Tff_unit_formulaContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Tff_unit_formulaContext,i)


        def Vline(self):
            return self.getToken(TPTPParser.Vline, 0)

        def tff_or_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_or_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_or_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_or_formula" ):
                listener.enterTff_or_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_or_formula" ):
                listener.exitTff_or_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_or_formula" ):
                return visitor.visitTff_or_formula(self)
            else:
                return visitor.visitChildren(self)



    def tff_or_formula(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TPTPParser.Tff_or_formulaContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 130
        self.enterRecursionRule(localctx, 130, self.RULE_tff_or_formula, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.tff_unit_formula()
            self.state = 888
            self.match(TPTPParser.Vline)
            self.state = 889
            self.tff_unit_formula()
            self._ctx.stop = self._input.LT(-1)
            self.state = 896
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TPTPParser.Tff_or_formulaContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tff_or_formula)
                    self.state = 891
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 892
                    self.match(TPTPParser.Vline)
                    self.state = 893
                    self.tff_unit_formula() 
                self.state = 898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Tff_and_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_unit_formula(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Tff_unit_formulaContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Tff_unit_formulaContext,i)


        def tff_and_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_and_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_and_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_and_formula" ):
                listener.enterTff_and_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_and_formula" ):
                listener.exitTff_and_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_and_formula" ):
                return visitor.visitTff_and_formula(self)
            else:
                return visitor.visitChildren(self)



    def tff_and_formula(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TPTPParser.Tff_and_formulaContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 132
        self.enterRecursionRule(localctx, 132, self.RULE_tff_and_formula, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.tff_unit_formula()
            self.state = 901
            self.match(TPTPParser.T__9)
            self.state = 902
            self.tff_unit_formula()
            self._ctx.stop = self._input.LT(-1)
            self.state = 909
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TPTPParser.Tff_and_formulaContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tff_and_formula)
                    self.state = 904
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 905
                    self.match(TPTPParser.T__9)
                    self.state = 906
                    self.tff_unit_formula() 
                self.state = 911
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Tff_unit_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_unitary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_unitary_formulaContext,0)


        def tff_unary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_unary_formulaContext,0)


        def tff_defined_infix(self):
            return self.getTypedRuleContext(TPTPParser.Tff_defined_infixContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_unit_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_unit_formula" ):
                listener.enterTff_unit_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_unit_formula" ):
                listener.exitTff_unit_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_unit_formula" ):
                return visitor.visitTff_unit_formula(self)
            else:
                return visitor.visitChildren(self)




    def tff_unit_formula(self):

        localctx = TPTPParser.Tff_unit_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_tff_unit_formula)
        try:
            self.state = 915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 912
                self.tff_unitary_formula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 913
                self.tff_unary_formula()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 914
                self.tff_defined_infix()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_preunit_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_unitary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_unitary_formulaContext,0)


        def tff_prefix_unary(self):
            return self.getTypedRuleContext(TPTPParser.Tff_prefix_unaryContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_preunit_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_preunit_formula" ):
                listener.enterTff_preunit_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_preunit_formula" ):
                listener.exitTff_preunit_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_preunit_formula" ):
                return visitor.visitTff_preunit_formula(self)
            else:
                return visitor.visitChildren(self)




    def tff_preunit_formula(self):

        localctx = TPTPParser.Tff_preunit_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_tff_preunit_formula)
        try:
            self.state = 919
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 17, 20, 27, 34, 65, 66, 68, 69, 70, 71, 94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 917
                self.tff_unitary_formula()
                pass
            elif token in [23, 25, 26, 28, 93]:
                self.enterOuterAlt(localctx, 2)
                self.state = 918
                self.tff_prefix_unary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_unitary_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_quantified_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_quantified_formulaContext,0)


        def tff_atomic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atomic_formulaContext,0)


        def txf_unitary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Txf_unitary_formulaContext,0)


        def tff_logic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_logic_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_unitary_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_unitary_formula" ):
                listener.enterTff_unitary_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_unitary_formula" ):
                listener.exitTff_unitary_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_unitary_formula" ):
                return visitor.visitTff_unitary_formula(self)
            else:
                return visitor.visitChildren(self)




    def tff_unitary_formula(self):

        localctx = TPTPParser.Tff_unitary_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_tff_unitary_formula)
        try:
            self.state = 928
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 34, 94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 921
                self.tff_quantified_formula()
                pass
            elif token in [17, 20, 65, 66, 68, 69, 71]:
                self.enterOuterAlt(localctx, 2)
                self.state = 922
                self.tff_atomic_formula()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 3)
                self.state = 923
                self.txf_unitary_formula()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 4)
                self.state = 924
                self.match(TPTPParser.T__11)
                self.state = 925
                self.tff_logic_formula()
                self.state = 926
                self.match(TPTPParser.T__12)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Txf_unitary_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(TPTPParser.VariableContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_txf_unitary_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTxf_unitary_formula" ):
                listener.enterTxf_unitary_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTxf_unitary_formula" ):
                listener.exitTxf_unitary_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTxf_unitary_formula" ):
                return visitor.visitTxf_unitary_formula(self)
            else:
                return visitor.visitChildren(self)




    def txf_unitary_formula(self):

        localctx = TPTPParser.Txf_unitary_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_txf_unitary_formula)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_quantified_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_quantifier(self):
            return self.getTypedRuleContext(TPTPParser.Tff_quantifierContext,0)


        def tff_variable_list(self):
            return self.getTypedRuleContext(TPTPParser.Tff_variable_listContext,0)


        def tff_unit_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_unit_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_quantified_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_quantified_formula" ):
                listener.enterTff_quantified_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_quantified_formula" ):
                listener.exitTff_quantified_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_quantified_formula" ):
                return visitor.visitTff_quantified_formula(self)
            else:
                return visitor.visitChildren(self)




    def tff_quantified_formula(self):

        localctx = TPTPParser.Tff_quantified_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_tff_quantified_formula)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.tff_quantifier()
            self.state = 933
            self.match(TPTPParser.T__13)
            self.state = 934
            self.tff_variable_list()
            self.state = 935
            self.match(TPTPParser.T__14)
            self.state = 936
            self.match(TPTPParser.T__15)
            self.state = 937
            self.tff_unit_formula()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_variable_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_variable(self):
            return self.getTypedRuleContext(TPTPParser.Tff_variableContext,0)


        def tff_variable_list(self):
            return self.getTypedRuleContext(TPTPParser.Tff_variable_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_variable_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_variable_list" ):
                listener.enterTff_variable_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_variable_list" ):
                listener.exitTff_variable_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_variable_list" ):
                return visitor.visitTff_variable_list(self)
            else:
                return visitor.visitChildren(self)




    def tff_variable_list(self):

        localctx = TPTPParser.Tff_variable_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_tff_variable_list)
        try:
            self.state = 944
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 939
                self.tff_variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 940
                self.tff_variable()
                self.state = 941
                self.match(TPTPParser.T__1)
                self.state = 942
                self.tff_variable_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_variableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_typed_variable(self):
            return self.getTypedRuleContext(TPTPParser.Tff_typed_variableContext,0)


        def variable(self):
            return self.getTypedRuleContext(TPTPParser.VariableContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_variable" ):
                listener.enterTff_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_variable" ):
                listener.exitTff_variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_variable" ):
                return visitor.visitTff_variable(self)
            else:
                return visitor.visitChildren(self)




    def tff_variable(self):

        localctx = TPTPParser.Tff_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_tff_variable)
        try:
            self.state = 948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 946
                self.tff_typed_variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 947
                self.variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_typed_variableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(TPTPParser.VariableContext,0)


        def tff_atomic_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atomic_typeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_typed_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_typed_variable" ):
                listener.enterTff_typed_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_typed_variable" ):
                listener.exitTff_typed_variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_typed_variable" ):
                return visitor.visitTff_typed_variable(self)
            else:
                return visitor.visitChildren(self)




    def tff_typed_variable(self):

        localctx = TPTPParser.Tff_typed_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_tff_typed_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.variable()
            self.state = 951
            self.match(TPTPParser.T__15)
            self.state = 952
            self.tff_atomic_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_unary_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_prefix_unary(self):
            return self.getTypedRuleContext(TPTPParser.Tff_prefix_unaryContext,0)


        def tff_infix_unary(self):
            return self.getTypedRuleContext(TPTPParser.Tff_infix_unaryContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_unary_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_unary_formula" ):
                listener.enterTff_unary_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_unary_formula" ):
                listener.exitTff_unary_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_unary_formula" ):
                return visitor.visitTff_unary_formula(self)
            else:
                return visitor.visitChildren(self)




    def tff_unary_formula(self):

        localctx = TPTPParser.Tff_unary_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_tff_unary_formula)
        try:
            self.state = 956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23, 25, 26, 28, 93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 954
                self.tff_prefix_unary()
                pass
            elif token in [12, 14, 17, 18, 20, 65, 66, 67, 68, 69, 70, 71, 72, 79, 82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 955
                self.tff_infix_unary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_prefix_unaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_unary_connective(self):
            return self.getTypedRuleContext(TPTPParser.Tff_unary_connectiveContext,0)


        def tff_preunit_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_preunit_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_prefix_unary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_prefix_unary" ):
                listener.enterTff_prefix_unary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_prefix_unary" ):
                listener.exitTff_prefix_unary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_prefix_unary" ):
                return visitor.visitTff_prefix_unary(self)
            else:
                return visitor.visitChildren(self)




    def tff_prefix_unary(self):

        localctx = TPTPParser.Tff_prefix_unaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_tff_prefix_unary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.tff_unary_connective()
            self.state = 959
            self.tff_preunit_formula()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_infix_unaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_unitary_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Tff_unitary_termContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Tff_unitary_termContext,i)


        def infix_inequality(self):
            return self.getTypedRuleContext(TPTPParser.Infix_inequalityContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_infix_unary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_infix_unary" ):
                listener.enterTff_infix_unary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_infix_unary" ):
                listener.exitTff_infix_unary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_infix_unary" ):
                return visitor.visitTff_infix_unary(self)
            else:
                return visitor.visitChildren(self)




    def tff_infix_unary(self):

        localctx = TPTPParser.Tff_infix_unaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_tff_infix_unary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.tff_unitary_term()
            self.state = 962
            self.infix_inequality()
            self.state = 963
            self.tff_unitary_term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_atomic_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_plain_atomic(self):
            return self.getTypedRuleContext(TPTPParser.Tff_plain_atomicContext,0)


        def tff_defined_atomic(self):
            return self.getTypedRuleContext(TPTPParser.Tff_defined_atomicContext,0)


        def tff_system_atomic(self):
            return self.getTypedRuleContext(TPTPParser.Tff_system_atomicContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_atomic_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_atomic_formula" ):
                listener.enterTff_atomic_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_atomic_formula" ):
                listener.exitTff_atomic_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_atomic_formula" ):
                return visitor.visitTff_atomic_formula(self)
            else:
                return visitor.visitChildren(self)




    def tff_atomic_formula(self):

        localctx = TPTPParser.Tff_atomic_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_tff_atomic_formula)
        try:
            self.state = 968
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65, 66, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 965
                self.tff_plain_atomic()
                pass
            elif token in [17, 20, 68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 966
                self.tff_defined_atomic()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 967
                self.tff_system_atomic()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_plain_atomicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(TPTPParser.ConstantContext,0)


        def functor(self):
            return self.getTypedRuleContext(TPTPParser.FunctorContext,0)


        def tff_arguments(self):
            return self.getTypedRuleContext(TPTPParser.Tff_argumentsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_plain_atomic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_plain_atomic" ):
                listener.enterTff_plain_atomic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_plain_atomic" ):
                listener.exitTff_plain_atomic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_plain_atomic" ):
                return visitor.visitTff_plain_atomic(self)
            else:
                return visitor.visitChildren(self)




    def tff_plain_atomic(self):

        localctx = TPTPParser.Tff_plain_atomicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_tff_plain_atomic)
        try:
            self.state = 976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 970
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 971
                self.functor()
                self.state = 972
                self.match(TPTPParser.T__11)
                self.state = 973
                self.tff_arguments()
                self.state = 974
                self.match(TPTPParser.T__12)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_defined_atomicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_defined_plain(self):
            return self.getTypedRuleContext(TPTPParser.Tff_defined_plainContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_defined_atomic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_defined_atomic" ):
                listener.enterTff_defined_atomic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_defined_atomic" ):
                listener.exitTff_defined_atomic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_defined_atomic" ):
                return visitor.visitTff_defined_atomic(self)
            else:
                return visitor.visitChildren(self)




    def tff_defined_atomic(self):

        localctx = TPTPParser.Tff_defined_atomicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_tff_defined_atomic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.tff_defined_plain()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_defined_plainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defined_constant(self):
            return self.getTypedRuleContext(TPTPParser.Defined_constantContext,0)


        def defined_functor(self):
            return self.getTypedRuleContext(TPTPParser.Defined_functorContext,0)


        def tff_arguments(self):
            return self.getTypedRuleContext(TPTPParser.Tff_argumentsContext,0)


        def nxf_atom(self):
            return self.getTypedRuleContext(TPTPParser.Nxf_atomContext,0)


        def txf_let(self):
            return self.getTypedRuleContext(TPTPParser.Txf_letContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_defined_plain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_defined_plain" ):
                listener.enterTff_defined_plain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_defined_plain" ):
                listener.exitTff_defined_plain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_defined_plain" ):
                return visitor.visitTff_defined_plain(self)
            else:
                return visitor.visitChildren(self)




    def tff_defined_plain(self):

        localctx = TPTPParser.Tff_defined_plainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_tff_defined_plain)
        try:
            self.state = 988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 980
                self.defined_constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 981
                self.defined_functor()
                self.state = 982
                self.match(TPTPParser.T__11)
                self.state = 983
                self.tff_arguments()
                self.state = 984
                self.match(TPTPParser.T__12)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 986
                self.nxf_atom()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 987
                self.txf_let()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_defined_infixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_unitary_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Tff_unitary_termContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Tff_unitary_termContext,i)


        def defined_infix_pred(self):
            return self.getTypedRuleContext(TPTPParser.Defined_infix_predContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_defined_infix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_defined_infix" ):
                listener.enterTff_defined_infix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_defined_infix" ):
                listener.exitTff_defined_infix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_defined_infix" ):
                return visitor.visitTff_defined_infix(self)
            else:
                return visitor.visitChildren(self)




    def tff_defined_infix(self):

        localctx = TPTPParser.Tff_defined_infixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_tff_defined_infix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.tff_unitary_term()
            self.state = 991
            self.defined_infix_pred()
            self.state = 992
            self.tff_unitary_term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_system_atomicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def system_constant(self):
            return self.getTypedRuleContext(TPTPParser.System_constantContext,0)


        def system_functor(self):
            return self.getTypedRuleContext(TPTPParser.System_functorContext,0)


        def tff_arguments(self):
            return self.getTypedRuleContext(TPTPParser.Tff_argumentsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_system_atomic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_system_atomic" ):
                listener.enterTff_system_atomic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_system_atomic" ):
                listener.exitTff_system_atomic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_system_atomic" ):
                return visitor.visitTff_system_atomic(self)
            else:
                return visitor.visitChildren(self)




    def tff_system_atomic(self):

        localctx = TPTPParser.Tff_system_atomicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_tff_system_atomic)
        try:
            self.state = 1000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 994
                self.system_constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 995
                self.system_functor()
                self.state = 996
                self.match(TPTPParser.T__11)
                self.state = 997
                self.tff_arguments()
                self.state = 998
                self.match(TPTPParser.T__12)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Txf_letContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def txf_let_types(self):
            return self.getTypedRuleContext(TPTPParser.Txf_let_typesContext,0)


        def txf_let_defns(self):
            return self.getTypedRuleContext(TPTPParser.Txf_let_defnsContext,0)


        def tff_term(self):
            return self.getTypedRuleContext(TPTPParser.Tff_termContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_txf_let

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTxf_let" ):
                listener.enterTxf_let(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTxf_let" ):
                listener.exitTxf_let(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTxf_let" ):
                return visitor.visitTxf_let(self)
            else:
                return visitor.visitChildren(self)




    def txf_let(self):

        localctx = TPTPParser.Txf_letContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_txf_let)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.match(TPTPParser.T__16)
            self.state = 1003
            self.txf_let_types()
            self.state = 1004
            self.match(TPTPParser.T__1)
            self.state = 1005
            self.txf_let_defns()
            self.state = 1006
            self.match(TPTPParser.T__1)
            self.state = 1007
            self.tff_term()
            self.state = 1008
            self.match(TPTPParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Txf_let_typesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_atom_typing(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atom_typingContext,0)


        def tff_atom_typing_list(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atom_typing_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_txf_let_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTxf_let_types" ):
                listener.enterTxf_let_types(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTxf_let_types" ):
                listener.exitTxf_let_types(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTxf_let_types" ):
                return visitor.visitTxf_let_types(self)
            else:
                return visitor.visitChildren(self)




    def txf_let_types(self):

        localctx = TPTPParser.Txf_let_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_txf_let_types)
        try:
            self.state = 1015
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 65, 66, 69, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1010
                self.tff_atom_typing()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1011
                self.match(TPTPParser.T__13)
                self.state = 1012
                self.tff_atom_typing_list()
                self.state = 1013
                self.match(TPTPParser.T__14)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_atom_typing_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_atom_typing(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atom_typingContext,0)


        def tff_atom_typing_list(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atom_typing_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_atom_typing_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_atom_typing_list" ):
                listener.enterTff_atom_typing_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_atom_typing_list" ):
                listener.exitTff_atom_typing_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_atom_typing_list" ):
                return visitor.visitTff_atom_typing_list(self)
            else:
                return visitor.visitChildren(self)




    def tff_atom_typing_list(self):

        localctx = TPTPParser.Tff_atom_typing_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_tff_atom_typing_list)
        try:
            self.state = 1022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1017
                self.tff_atom_typing()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1018
                self.tff_atom_typing()
                self.state = 1019
                self.match(TPTPParser.T__1)
                self.state = 1020
                self.tff_atom_typing_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Txf_let_defnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def txf_let_defn(self):
            return self.getTypedRuleContext(TPTPParser.Txf_let_defnContext,0)


        def txf_let_defn_list(self):
            return self.getTypedRuleContext(TPTPParser.Txf_let_defn_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_txf_let_defns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTxf_let_defns" ):
                listener.enterTxf_let_defns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTxf_let_defns" ):
                listener.exitTxf_let_defns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTxf_let_defns" ):
                return visitor.visitTxf_let_defns(self)
            else:
                return visitor.visitChildren(self)




    def txf_let_defns(self):

        localctx = TPTPParser.Txf_let_defnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_txf_let_defns)
        try:
            self.state = 1029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1024
                self.txf_let_defn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1025
                self.match(TPTPParser.T__13)
                self.state = 1026
                self.txf_let_defn_list()
                self.state = 1027
                self.match(TPTPParser.T__14)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Txf_let_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def txf_let_LHS(self):
            return self.getTypedRuleContext(TPTPParser.Txf_let_LHSContext,0)


        def assignment(self):
            return self.getTypedRuleContext(TPTPParser.AssignmentContext,0)


        def tff_term(self):
            return self.getTypedRuleContext(TPTPParser.Tff_termContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_txf_let_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTxf_let_defn" ):
                listener.enterTxf_let_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTxf_let_defn" ):
                listener.exitTxf_let_defn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTxf_let_defn" ):
                return visitor.visitTxf_let_defn(self)
            else:
                return visitor.visitChildren(self)




    def txf_let_defn(self):

        localctx = TPTPParser.Txf_let_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_txf_let_defn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.txf_let_LHS()
            self.state = 1032
            self.assignment()
            self.state = 1033
            self.tff_term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Txf_let_LHSContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_plain_atomic(self):
            return self.getTypedRuleContext(TPTPParser.Tff_plain_atomicContext,0)


        def txf_tuple(self):
            return self.getTypedRuleContext(TPTPParser.Txf_tupleContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_txf_let_LHS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTxf_let_LHS" ):
                listener.enterTxf_let_LHS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTxf_let_LHS" ):
                listener.exitTxf_let_LHS(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTxf_let_LHS" ):
                return visitor.visitTxf_let_LHS(self)
            else:
                return visitor.visitChildren(self)




    def txf_let_LHS(self):

        localctx = TPTPParser.Txf_let_LHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_txf_let_LHS)
        try:
            self.state = 1037
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65, 66, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1035
                self.tff_plain_atomic()
                pass
            elif token in [14, 18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1036
                self.txf_tuple()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Txf_let_defn_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def txf_let_defn(self):
            return self.getTypedRuleContext(TPTPParser.Txf_let_defnContext,0)


        def txf_let_defn_list(self):
            return self.getTypedRuleContext(TPTPParser.Txf_let_defn_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_txf_let_defn_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTxf_let_defn_list" ):
                listener.enterTxf_let_defn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTxf_let_defn_list" ):
                listener.exitTxf_let_defn_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTxf_let_defn_list" ):
                return visitor.visitTxf_let_defn_list(self)
            else:
                return visitor.visitChildren(self)




    def txf_let_defn_list(self):

        localctx = TPTPParser.Txf_let_defn_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_txf_let_defn_list)
        try:
            self.state = 1044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                self.txf_let_defn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1040
                self.txf_let_defn()
                self.state = 1041
                self.match(TPTPParser.T__1)
                self.state = 1042
                self.txf_let_defn_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nxf_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nxf_long_connective(self):
            return self.getTypedRuleContext(TPTPParser.Nxf_long_connectiveContext,0)


        def tff_arguments(self):
            return self.getTypedRuleContext(TPTPParser.Tff_argumentsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_nxf_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNxf_atom" ):
                listener.enterNxf_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNxf_atom" ):
                listener.exitNxf_atom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNxf_atom" ):
                return visitor.visitNxf_atom(self)
            else:
                return visitor.visitChildren(self)




    def nxf_atom(self):

        localctx = TPTPParser.Nxf_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_nxf_atom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.nxf_long_connective()
            self.state = 1047
            self.match(TPTPParser.T__10)
            self.state = 1048
            self.match(TPTPParser.T__11)
            self.state = 1049
            self.tff_arguments()
            self.state = 1050
            self.match(TPTPParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_logic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_logic_formulaContext,0)


        def defined_term(self):
            return self.getTypedRuleContext(TPTPParser.Defined_termContext,0)


        def txf_tuple(self):
            return self.getTypedRuleContext(TPTPParser.Txf_tupleContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_term" ):
                listener.enterTff_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_term" ):
                listener.exitTff_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_term" ):
                return visitor.visitTff_term(self)
            else:
                return visitor.visitChildren(self)




    def tff_term(self):

        localctx = TPTPParser.Tff_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_tff_term)
        try:
            self.state = 1055
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1052
                self.tff_logic_formula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1053
                self.defined_term()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1054
                self.txf_tuple()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_unitary_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_atomic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atomic_formulaContext,0)


        def defined_term(self):
            return self.getTypedRuleContext(TPTPParser.Defined_termContext,0)


        def txf_tuple(self):
            return self.getTypedRuleContext(TPTPParser.Txf_tupleContext,0)


        def variable(self):
            return self.getTypedRuleContext(TPTPParser.VariableContext,0)


        def tff_logic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_logic_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_unitary_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_unitary_term" ):
                listener.enterTff_unitary_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_unitary_term" ):
                listener.exitTff_unitary_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_unitary_term" ):
                return visitor.visitTff_unitary_term(self)
            else:
                return visitor.visitChildren(self)




    def tff_unitary_term(self):

        localctx = TPTPParser.Tff_unitary_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_tff_unitary_term)
        try:
            self.state = 1065
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17, 20, 65, 66, 68, 69, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1057
                self.tff_atomic_formula()
                pass
            elif token in [67, 72, 79, 82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1058
                self.defined_term()
                pass
            elif token in [14, 18]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1059
                self.txf_tuple()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1060
                self.variable()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1061
                self.match(TPTPParser.T__11)
                self.state = 1062
                self.tff_logic_formula()
                self.state = 1063
                self.match(TPTPParser.T__12)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Txf_tupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_arguments(self):
            return self.getTypedRuleContext(TPTPParser.Tff_argumentsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_txf_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTxf_tuple" ):
                listener.enterTxf_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTxf_tuple" ):
                listener.exitTxf_tuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTxf_tuple" ):
                return visitor.visitTxf_tuple(self)
            else:
                return visitor.visitChildren(self)




    def txf_tuple(self):

        localctx = TPTPParser.Txf_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_txf_tuple)
        try:
            self.state = 1072
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1067
                self.match(TPTPParser.T__17)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1068
                self.match(TPTPParser.T__13)
                self.state = 1069
                self.tff_arguments()
                self.state = 1070
                self.match(TPTPParser.T__14)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_argumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_term(self):
            return self.getTypedRuleContext(TPTPParser.Tff_termContext,0)


        def comma_tff_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Comma_tff_termContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Comma_tff_termContext,i)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_arguments" ):
                listener.enterTff_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_arguments" ):
                listener.exitTff_arguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_arguments" ):
                return visitor.visitTff_arguments(self)
            else:
                return visitor.visitChildren(self)




    def tff_arguments(self):

        localctx = TPTPParser.Tff_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_tff_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.tff_term()
            self.state = 1078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 1075
                self.comma_tff_term()
                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comma_tff_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_term(self):
            return self.getTypedRuleContext(TPTPParser.Tff_termContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_comma_tff_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma_tff_term" ):
                listener.enterComma_tff_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma_tff_term" ):
                listener.exitComma_tff_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComma_tff_term" ):
                return visitor.visitComma_tff_term(self)
            else:
                return visitor.visitChildren(self)




    def comma_tff_term(self):

        localctx = TPTPParser.Comma_tff_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_comma_tff_term)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self.match(TPTPParser.T__1)
            self.state = 1082
            self.tff_term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_atom_typingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untyped_atom(self):
            return self.getTypedRuleContext(TPTPParser.Untyped_atomContext,0)


        def tff_top_level_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_top_level_typeContext,0)


        def tff_atom_typing(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atom_typingContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_atom_typing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_atom_typing" ):
                listener.enterTff_atom_typing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_atom_typing" ):
                listener.exitTff_atom_typing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_atom_typing" ):
                return visitor.visitTff_atom_typing(self)
            else:
                return visitor.visitChildren(self)




    def tff_atom_typing(self):

        localctx = TPTPParser.Tff_atom_typingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_tff_atom_typing)
        try:
            self.state = 1092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65, 66, 69, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1084
                self.untyped_atom()
                self.state = 1085
                self.match(TPTPParser.T__15)
                self.state = 1086
                self.tff_top_level_type()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1088
                self.match(TPTPParser.T__11)
                self.state = 1089
                self.tff_atom_typing()
                self.state = 1090
                self.match(TPTPParser.T__12)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_top_level_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_atomic_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atomic_typeContext,0)


        def tff_non_atomic_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_non_atomic_typeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_top_level_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_top_level_type" ):
                listener.enterTff_top_level_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_top_level_type" ):
                listener.exitTff_top_level_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_top_level_type" ):
                return visitor.visitTff_top_level_type(self)
            else:
                return visitor.visitChildren(self)




    def tff_top_level_type(self):

        localctx = TPTPParser.Tff_top_level_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_tff_top_level_type)
        try:
            self.state = 1096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1094
                self.tff_atomic_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1095
                self.tff_non_atomic_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_non_atomic_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_mapping_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_mapping_typeContext,0)


        def tf1_quantified_type(self):
            return self.getTypedRuleContext(TPTPParser.Tf1_quantified_typeContext,0)


        def tff_non_atomic_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_non_atomic_typeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_non_atomic_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_non_atomic_type" ):
                listener.enterTff_non_atomic_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_non_atomic_type" ):
                listener.exitTff_non_atomic_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_non_atomic_type" ):
                return visitor.visitTff_non_atomic_type(self)
            else:
                return visitor.visitChildren(self)




    def tff_non_atomic_type(self):

        localctx = TPTPParser.Tff_non_atomic_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_tff_non_atomic_type)
        try:
            self.state = 1104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1098
                self.tff_mapping_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1099
                self.tf1_quantified_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1100
                self.match(TPTPParser.T__11)
                self.state = 1101
                self.tff_non_atomic_type()
                self.state = 1102
                self.match(TPTPParser.T__12)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tf1_quantified_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_variable_list(self):
            return self.getTypedRuleContext(TPTPParser.Tff_variable_listContext,0)


        def tff_monotype(self):
            return self.getTypedRuleContext(TPTPParser.Tff_monotypeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tf1_quantified_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTf1_quantified_type" ):
                listener.enterTf1_quantified_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTf1_quantified_type" ):
                listener.exitTf1_quantified_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTf1_quantified_type" ):
                return visitor.visitTf1_quantified_type(self)
            else:
                return visitor.visitChildren(self)




    def tf1_quantified_type(self):

        localctx = TPTPParser.Tf1_quantified_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_tf1_quantified_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.match(TPTPParser.T__18)
            self.state = 1107
            self.match(TPTPParser.T__13)
            self.state = 1108
            self.tff_variable_list()
            self.state = 1109
            self.match(TPTPParser.T__14)
            self.state = 1110
            self.match(TPTPParser.T__15)
            self.state = 1111
            self.tff_monotype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_monotypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_atomic_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atomic_typeContext,0)


        def tff_mapping_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_mapping_typeContext,0)


        def tf1_quantified_type(self):
            return self.getTypedRuleContext(TPTPParser.Tf1_quantified_typeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_monotype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_monotype" ):
                listener.enterTff_monotype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_monotype" ):
                listener.exitTff_monotype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_monotype" ):
                return visitor.visitTff_monotype(self)
            else:
                return visitor.visitChildren(self)




    def tff_monotype(self):

        localctx = TPTPParser.Tff_monotypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_tff_monotype)
        try:
            self.state = 1119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1113
                self.tff_atomic_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1114
                self.match(TPTPParser.T__11)
                self.state = 1115
                self.tff_mapping_type()
                self.state = 1116
                self.match(TPTPParser.T__12)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1118
                self.tf1_quantified_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_unitary_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_atomic_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atomic_typeContext,0)


        def tff_xprod_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_xprod_typeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_unitary_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_unitary_type" ):
                listener.enterTff_unitary_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_unitary_type" ):
                listener.exitTff_unitary_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_unitary_type" ):
                return visitor.visitTff_unitary_type(self)
            else:
                return visitor.visitChildren(self)




    def tff_unitary_type(self):

        localctx = TPTPParser.Tff_unitary_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_tff_unitary_type)
        try:
            self.state = 1126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1121
                self.tff_atomic_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1122
                self.match(TPTPParser.T__11)
                self.state = 1123
                self.tff_xprod_type(0)
                self.state = 1124
                self.match(TPTPParser.T__12)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_atomic_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_constant(self):
            return self.getTypedRuleContext(TPTPParser.Type_constantContext,0)


        def defined_type(self):
            return self.getTypedRuleContext(TPTPParser.Defined_typeContext,0)


        def variable(self):
            return self.getTypedRuleContext(TPTPParser.VariableContext,0)


        def type_functor(self):
            return self.getTypedRuleContext(TPTPParser.Type_functorContext,0)


        def tff_type_arguments(self):
            return self.getTypedRuleContext(TPTPParser.Tff_type_argumentsContext,0)


        def tff_atomic_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atomic_typeContext,0)


        def txf_tuple_type(self):
            return self.getTypedRuleContext(TPTPParser.Txf_tuple_typeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_atomic_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_atomic_type" ):
                listener.enterTff_atomic_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_atomic_type" ):
                listener.exitTff_atomic_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_atomic_type" ):
                return visitor.visitTff_atomic_type(self)
            else:
                return visitor.visitChildren(self)




    def tff_atomic_type(self):

        localctx = TPTPParser.Tff_atomic_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_tff_atomic_type)
        try:
            self.state = 1141
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1128
                self.type_constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1129
                self.defined_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1130
                self.variable()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1131
                self.type_functor()
                self.state = 1132
                self.match(TPTPParser.T__11)
                self.state = 1133
                self.tff_type_arguments()
                self.state = 1134
                self.match(TPTPParser.T__12)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1136
                self.match(TPTPParser.T__11)
                self.state = 1137
                self.tff_atomic_type()
                self.state = 1138
                self.match(TPTPParser.T__12)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1140
                self.txf_tuple_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_type_argumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_atomic_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atomic_typeContext,0)


        def tff_type_arguments(self):
            return self.getTypedRuleContext(TPTPParser.Tff_type_argumentsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_type_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_type_arguments" ):
                listener.enterTff_type_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_type_arguments" ):
                listener.exitTff_type_arguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_type_arguments" ):
                return visitor.visitTff_type_arguments(self)
            else:
                return visitor.visitChildren(self)




    def tff_type_arguments(self):

        localctx = TPTPParser.Tff_type_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_tff_type_arguments)
        try:
            self.state = 1148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1143
                self.tff_atomic_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1144
                self.tff_atomic_type()
                self.state = 1145
                self.match(TPTPParser.T__1)
                self.state = 1146
                self.tff_type_arguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_mapping_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_unitary_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_unitary_typeContext,0)


        def Arrow(self):
            return self.getToken(TPTPParser.Arrow, 0)

        def tff_atomic_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atomic_typeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_mapping_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_mapping_type" ):
                listener.enterTff_mapping_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_mapping_type" ):
                listener.exitTff_mapping_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_mapping_type" ):
                return visitor.visitTff_mapping_type(self)
            else:
                return visitor.visitChildren(self)




    def tff_mapping_type(self):

        localctx = TPTPParser.Tff_mapping_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_tff_mapping_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.tff_unitary_type()
            self.state = 1151
            self.match(TPTPParser.Arrow)
            self.state = 1152
            self.tff_atomic_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_xprod_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_unitary_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_unitary_typeContext,0)


        def Star(self):
            return self.getToken(TPTPParser.Star, 0)

        def tff_atomic_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atomic_typeContext,0)


        def tff_xprod_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_xprod_typeContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_xprod_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_xprod_type" ):
                listener.enterTff_xprod_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_xprod_type" ):
                listener.exitTff_xprod_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_xprod_type" ):
                return visitor.visitTff_xprod_type(self)
            else:
                return visitor.visitChildren(self)



    def tff_xprod_type(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TPTPParser.Tff_xprod_typeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 212
        self.enterRecursionRule(localctx, 212, self.RULE_tff_xprod_type, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self.tff_unitary_type()
            self.state = 1156
            self.match(TPTPParser.Star)
            self.state = 1157
            self.tff_atomic_type()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1164
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TPTPParser.Tff_xprod_typeContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tff_xprod_type)
                    self.state = 1159
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1160
                    self.match(TPTPParser.Star)
                    self.state = 1161
                    self.tff_atomic_type() 
                self.state = 1166
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Txf_tuple_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_type_list(self):
            return self.getTypedRuleContext(TPTPParser.Tff_type_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_txf_tuple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTxf_tuple_type" ):
                listener.enterTxf_tuple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTxf_tuple_type" ):
                listener.exitTxf_tuple_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTxf_tuple_type" ):
                return visitor.visitTxf_tuple_type(self)
            else:
                return visitor.visitChildren(self)




    def txf_tuple_type(self):

        localctx = TPTPParser.Txf_tuple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_txf_tuple_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.match(TPTPParser.T__13)
            self.state = 1168
            self.tff_type_list()
            self.state = 1169
            self.match(TPTPParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_top_level_type(self):
            return self.getTypedRuleContext(TPTPParser.Tff_top_level_typeContext,0)


        def tff_type_list(self):
            return self.getTypedRuleContext(TPTPParser.Tff_type_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_type_list" ):
                listener.enterTff_type_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_type_list" ):
                listener.exitTff_type_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_type_list" ):
                return visitor.visitTff_type_list(self)
            else:
                return visitor.visitChildren(self)




    def tff_type_list(self):

        localctx = TPTPParser.Tff_type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_tff_type_list)
        try:
            self.state = 1176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1171
                self.tff_top_level_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1172
                self.tff_top_level_type()
                self.state = 1173
                self.match(TPTPParser.T__1)
                self.state = 1174
                self.tff_type_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_subtypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untyped_atom(self):
            return self.getTypedRuleContext(TPTPParser.Untyped_atomContext,0)


        def subtype_sign(self):
            return self.getTypedRuleContext(TPTPParser.Subtype_signContext,0)


        def atom(self):
            return self.getTypedRuleContext(TPTPParser.AtomContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_subtype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_subtype" ):
                listener.enterTff_subtype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_subtype" ):
                listener.exitTff_subtype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_subtype" ):
                return visitor.visitTff_subtype(self)
            else:
                return visitor.visitChildren(self)




    def tff_subtype(self):

        localctx = TPTPParser.Tff_subtypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_tff_subtype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self.untyped_atom()
            self.state = 1179
            self.subtype_sign()
            self.state = 1180
            self.atom()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Txf_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_atomic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atomic_formulaContext,0)


        def identical(self):
            return self.getTypedRuleContext(TPTPParser.IdenticalContext,0)


        def tff_term(self):
            return self.getTypedRuleContext(TPTPParser.Tff_termContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_txf_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTxf_definition" ):
                listener.enterTxf_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTxf_definition" ):
                listener.exitTxf_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTxf_definition" ):
                return visitor.visitTxf_definition(self)
            else:
                return visitor.visitChildren(self)




    def txf_definition(self):

        localctx = TPTPParser.Txf_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_txf_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.tff_atomic_formula()
            self.state = 1183
            self.identical()
            self.state = 1184
            self.tff_term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Txf_sequentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def txf_tuple(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Txf_tupleContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Txf_tupleContext,i)


        def gentzen_arrow(self):
            return self.getTypedRuleContext(TPTPParser.Gentzen_arrowContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_txf_sequent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTxf_sequent" ):
                listener.enterTxf_sequent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTxf_sequent" ):
                listener.exitTxf_sequent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTxf_sequent" ):
                return visitor.visitTxf_sequent(self)
            else:
                return visitor.visitChildren(self)




    def txf_sequent(self):

        localctx = TPTPParser.Txf_sequentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_txf_sequent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1186
            self.txf_tuple()
            self.state = 1187
            self.gentzen_arrow()
            self.state = 1188
            self.txf_tuple()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nhf_long_connectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ntf_connective_name(self):
            return self.getTypedRuleContext(TPTPParser.Ntf_connective_nameContext,0)


        def nhf_parameter_list(self):
            return self.getTypedRuleContext(TPTPParser.Nhf_parameter_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_nhf_long_connective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNhf_long_connective" ):
                listener.enterNhf_long_connective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNhf_long_connective" ):
                listener.exitNhf_long_connective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNhf_long_connective" ):
                return visitor.visitNhf_long_connective(self)
            else:
                return visitor.visitChildren(self)




    def nhf_long_connective(self):

        localctx = TPTPParser.Nhf_long_connectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_nhf_long_connective)
        try:
            self.state = 1200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1190
                self.match(TPTPParser.T__19)
                self.state = 1191
                self.ntf_connective_name()
                self.state = 1192
                self.match(TPTPParser.T__20)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1194
                self.match(TPTPParser.T__19)
                self.state = 1195
                self.ntf_connective_name()
                self.state = 1196
                self.match(TPTPParser.T__11)
                self.state = 1197
                self.nhf_parameter_list()
                self.state = 1198
                self.match(TPTPParser.T__21)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nhf_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nhf_parameter(self):
            return self.getTypedRuleContext(TPTPParser.Nhf_parameterContext,0)


        def nhf_parameter_list(self):
            return self.getTypedRuleContext(TPTPParser.Nhf_parameter_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_nhf_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNhf_parameter_list" ):
                listener.enterNhf_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNhf_parameter_list" ):
                listener.exitNhf_parameter_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNhf_parameter_list" ):
                return visitor.visitNhf_parameter_list(self)
            else:
                return visitor.visitChildren(self)




    def nhf_parameter_list(self):

        localctx = TPTPParser.Nhf_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_nhf_parameter_list)
        try:
            self.state = 1207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1202
                self.nhf_parameter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1203
                self.nhf_parameter()
                self.state = 1204
                self.match(TPTPParser.T__1)
                self.state = 1205
                self.nhf_parameter_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nhf_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ntf_index(self):
            return self.getTypedRuleContext(TPTPParser.Ntf_indexContext,0)


        def nhf_key_pair(self):
            return self.getTypedRuleContext(TPTPParser.Nhf_key_pairContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_nhf_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNhf_parameter" ):
                listener.enterNhf_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNhf_parameter" ):
                listener.exitNhf_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNhf_parameter" ):
                return visitor.visitNhf_parameter(self)
            else:
                return visitor.visitChildren(self)




    def nhf_parameter(self):

        localctx = TPTPParser.Nhf_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_nhf_parameter)
        try:
            self.state = 1211
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1209
                self.ntf_index()
                pass
            elif token in [12, 14, 17, 18, 20, 45, 46, 47, 48, 49, 65, 66, 67, 68, 69, 71, 72, 79, 82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1210
                self.nhf_key_pair()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nhf_key_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_definition(self):
            return self.getTypedRuleContext(TPTPParser.Thf_definitionContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_nhf_key_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNhf_key_pair" ):
                listener.enterNhf_key_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNhf_key_pair" ):
                listener.exitNhf_key_pair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNhf_key_pair" ):
                return visitor.visitNhf_key_pair(self)
            else:
                return visitor.visitChildren(self)




    def nhf_key_pair(self):

        localctx = TPTPParser.Nhf_key_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_nhf_key_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self.thf_definition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nxf_long_connectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ntf_connective_name(self):
            return self.getTypedRuleContext(TPTPParser.Ntf_connective_nameContext,0)


        def nxf_parameter_list(self):
            return self.getTypedRuleContext(TPTPParser.Nxf_parameter_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_nxf_long_connective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNxf_long_connective" ):
                listener.enterNxf_long_connective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNxf_long_connective" ):
                listener.exitNxf_long_connective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNxf_long_connective" ):
                return visitor.visitNxf_long_connective(self)
            else:
                return visitor.visitChildren(self)




    def nxf_long_connective(self):

        localctx = TPTPParser.Nxf_long_connectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_nxf_long_connective)
        try:
            self.state = 1225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1215
                self.match(TPTPParser.T__19)
                self.state = 1216
                self.ntf_connective_name()
                self.state = 1217
                self.match(TPTPParser.T__20)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1219
                self.match(TPTPParser.T__19)
                self.state = 1220
                self.ntf_connective_name()
                self.state = 1221
                self.match(TPTPParser.T__11)
                self.state = 1222
                self.nxf_parameter_list()
                self.state = 1223
                self.match(TPTPParser.T__21)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nxf_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nxf_parameter(self):
            return self.getTypedRuleContext(TPTPParser.Nxf_parameterContext,0)


        def nxf_parameter_list(self):
            return self.getTypedRuleContext(TPTPParser.Nxf_parameter_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_nxf_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNxf_parameter_list" ):
                listener.enterNxf_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNxf_parameter_list" ):
                listener.exitNxf_parameter_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNxf_parameter_list" ):
                return visitor.visitNxf_parameter_list(self)
            else:
                return visitor.visitChildren(self)




    def nxf_parameter_list(self):

        localctx = TPTPParser.Nxf_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_nxf_parameter_list)
        try:
            self.state = 1232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1227
                self.nxf_parameter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1228
                self.nxf_parameter()
                self.state = 1229
                self.match(TPTPParser.T__1)
                self.state = 1230
                self.nxf_parameter_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nxf_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ntf_index(self):
            return self.getTypedRuleContext(TPTPParser.Ntf_indexContext,0)


        def nxf_key_pair(self):
            return self.getTypedRuleContext(TPTPParser.Nxf_key_pairContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_nxf_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNxf_parameter" ):
                listener.enterNxf_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNxf_parameter" ):
                listener.exitNxf_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNxf_parameter" ):
                return visitor.visitNxf_parameter(self)
            else:
                return visitor.visitChildren(self)




    def nxf_parameter(self):

        localctx = TPTPParser.Nxf_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_nxf_parameter)
        try:
            self.state = 1236
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1234
                self.ntf_index()
                pass
            elif token in [17, 20, 65, 66, 68, 69, 71]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1235
                self.nxf_key_pair()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nxf_key_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def txf_definition(self):
            return self.getTypedRuleContext(TPTPParser.Txf_definitionContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_nxf_key_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNxf_key_pair" ):
                listener.enterNxf_key_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNxf_key_pair" ):
                listener.exitNxf_key_pair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNxf_key_pair" ):
                return visitor.visitNxf_key_pair(self)
            else:
                return visitor.visitChildren(self)




    def nxf_key_pair(self):

        localctx = TPTPParser.Nxf_key_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_nxf_key_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self.txf_definition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ntf_connective_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def def_or_sys_constant(self):
            return self.getTypedRuleContext(TPTPParser.Def_or_sys_constantContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_ntf_connective_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNtf_connective_name" ):
                listener.enterNtf_connective_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNtf_connective_name" ):
                listener.exitNtf_connective_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNtf_connective_name" ):
                return visitor.visitNtf_connective_name(self)
            else:
                return visitor.visitChildren(self)




    def ntf_connective_name(self):

        localctx = TPTPParser.Ntf_connective_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_ntf_connective_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self.def_or_sys_constant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ntf_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hash(self):
            return self.getToken(TPTPParser.Hash, 0)

        def tff_unitary_term(self):
            return self.getTypedRuleContext(TPTPParser.Tff_unitary_termContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_ntf_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNtf_index" ):
                listener.enterNtf_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNtf_index" ):
                listener.exitNtf_index(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNtf_index" ):
                return visitor.visitNtf_index(self)
            else:
                return visitor.visitChildren(self)




    def ntf_index(self):

        localctx = TPTPParser.Ntf_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_ntf_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1242
            self.match(TPTPParser.Hash)
            self.state = 1243
            self.tff_unitary_term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ntf_short_connectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Less_sign(self):
            return self.getToken(TPTPParser.Less_sign, 0)

        def Arrow(self):
            return self.getToken(TPTPParser.Arrow, 0)

        def getRuleIndex(self):
            return TPTPParser.RULE_ntf_short_connective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNtf_short_connective" ):
                listener.enterNtf_short_connective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNtf_short_connective" ):
                listener.exitNtf_short_connective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNtf_short_connective" ):
                return visitor.visitNtf_short_connective(self)
            else:
                return visitor.visitChildren(self)




    def ntf_short_connective(self):

        localctx = TPTPParser.Ntf_short_connectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_ntf_short_connective)
        try:
            self.state = 1251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1245
                self.match(TPTPParser.T__22)
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1246
                self.match(TPTPParser.Less_sign)
                self.state = 1247
                self.match(TPTPParser.T__23)
                self.state = 1248
                self.match(TPTPParser.Arrow)
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1249
                self.match(TPTPParser.T__24)
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1250
                self.match(TPTPParser.T__25)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tcf_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tcf_logic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tcf_logic_formulaContext,0)


        def tff_atom_typing(self):
            return self.getTypedRuleContext(TPTPParser.Tff_atom_typingContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tcf_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTcf_formula" ):
                listener.enterTcf_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTcf_formula" ):
                listener.exitTcf_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTcf_formula" ):
                return visitor.visitTcf_formula(self)
            else:
                return visitor.visitChildren(self)




    def tcf_formula(self):

        localctx = TPTPParser.Tcf_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_tcf_formula)
        try:
            self.state = 1255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1253
                self.tcf_logic_formula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1254
                self.tff_atom_typing()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tcf_logic_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tcf_quantified_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tcf_quantified_formulaContext,0)


        def cnf_formula(self):
            return self.getTypedRuleContext(TPTPParser.Cnf_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tcf_logic_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTcf_logic_formula" ):
                listener.enterTcf_logic_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTcf_logic_formula" ):
                listener.exitTcf_logic_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTcf_logic_formula" ):
                return visitor.visitTcf_logic_formula(self)
            else:
                return visitor.visitChildren(self)




    def tcf_logic_formula(self):

        localctx = TPTPParser.Tcf_logic_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_tcf_logic_formula)
        try:
            self.state = 1259
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1257
                self.tcf_quantified_formula()
                pass
            elif token in [12, 28, 65, 66, 67, 68, 69, 70, 71, 72, 79, 82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1258
                self.cnf_formula()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tcf_quantified_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_variable_list(self):
            return self.getTypedRuleContext(TPTPParser.Tff_variable_listContext,0)


        def tcf_logic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tcf_logic_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tcf_quantified_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTcf_quantified_formula" ):
                listener.enterTcf_quantified_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTcf_quantified_formula" ):
                listener.exitTcf_quantified_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTcf_quantified_formula" ):
                return visitor.visitTcf_quantified_formula(self)
            else:
                return visitor.visitChildren(self)




    def tcf_quantified_formula(self):

        localctx = TPTPParser.Tcf_quantified_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_tcf_quantified_formula)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1261
            self.match(TPTPParser.T__26)
            self.state = 1262
            self.match(TPTPParser.T__13)
            self.state = 1263
            self.tff_variable_list()
            self.state = 1264
            self.match(TPTPParser.T__14)
            self.state = 1265
            self.match(TPTPParser.T__15)
            self.state = 1266
            self.tcf_logic_formula()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_logic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_logic_formulaContext,0)


        def fof_sequent(self):
            return self.getTypedRuleContext(TPTPParser.Fof_sequentContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_formula" ):
                listener.enterFof_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_formula" ):
                listener.exitFof_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_formula" ):
                return visitor.visitFof_formula(self)
            else:
                return visitor.visitChildren(self)




    def fof_formula(self):

        localctx = TPTPParser.Fof_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_fof_formula)
        try:
            self.state = 1270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1268
                self.fof_logic_formula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1269
                self.fof_sequent()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_logic_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_binary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_binary_formulaContext,0)


        def fof_unary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_unary_formulaContext,0)


        def fof_unitary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_unitary_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_logic_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_logic_formula" ):
                listener.enterFof_logic_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_logic_formula" ):
                listener.exitFof_logic_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_logic_formula" ):
                return visitor.visitFof_logic_formula(self)
            else:
                return visitor.visitChildren(self)




    def fof_logic_formula(self):

        localctx = TPTPParser.Fof_logic_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_fof_logic_formula)
        try:
            self.state = 1275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1272
                self.fof_binary_formula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1273
                self.fof_unary_formula()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1274
                self.fof_unitary_formula()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_binary_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_binary_nonassoc(self):
            return self.getTypedRuleContext(TPTPParser.Fof_binary_nonassocContext,0)


        def fof_binary_assoc(self):
            return self.getTypedRuleContext(TPTPParser.Fof_binary_assocContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_binary_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_binary_formula" ):
                listener.enterFof_binary_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_binary_formula" ):
                listener.exitFof_binary_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_binary_formula" ):
                return visitor.visitFof_binary_formula(self)
            else:
                return visitor.visitChildren(self)




    def fof_binary_formula(self):

        localctx = TPTPParser.Fof_binary_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_fof_binary_formula)
        try:
            self.state = 1279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1277
                self.fof_binary_nonassoc()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1278
                self.fof_binary_assoc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_binary_nonassocContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_unit_formula(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Fof_unit_formulaContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Fof_unit_formulaContext,i)


        def nonassoc_connective(self):
            return self.getTypedRuleContext(TPTPParser.Nonassoc_connectiveContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_binary_nonassoc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_binary_nonassoc" ):
                listener.enterFof_binary_nonassoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_binary_nonassoc" ):
                listener.exitFof_binary_nonassoc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_binary_nonassoc" ):
                return visitor.visitFof_binary_nonassoc(self)
            else:
                return visitor.visitChildren(self)




    def fof_binary_nonassoc(self):

        localctx = TPTPParser.Fof_binary_nonassocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_fof_binary_nonassoc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.fof_unit_formula()
            self.state = 1282
            self.nonassoc_connective()
            self.state = 1283
            self.fof_unit_formula()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_binary_assocContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_or_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_or_formulaContext,0)


        def fof_and_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_and_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_binary_assoc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_binary_assoc" ):
                listener.enterFof_binary_assoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_binary_assoc" ):
                listener.exitFof_binary_assoc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_binary_assoc" ):
                return visitor.visitFof_binary_assoc(self)
            else:
                return visitor.visitChildren(self)




    def fof_binary_assoc(self):

        localctx = TPTPParser.Fof_binary_assocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_fof_binary_assoc)
        try:
            self.state = 1287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1285
                self.fof_or_formula(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1286
                self.fof_and_formula(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_or_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_unit_formula(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Fof_unit_formulaContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Fof_unit_formulaContext,i)


        def Vline(self):
            return self.getToken(TPTPParser.Vline, 0)

        def fof_or_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_or_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_or_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_or_formula" ):
                listener.enterFof_or_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_or_formula" ):
                listener.exitFof_or_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_or_formula" ):
                return visitor.visitFof_or_formula(self)
            else:
                return visitor.visitChildren(self)



    def fof_or_formula(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TPTPParser.Fof_or_formulaContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 262
        self.enterRecursionRule(localctx, 262, self.RULE_fof_or_formula, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.fof_unit_formula()
            self.state = 1291
            self.match(TPTPParser.Vline)
            self.state = 1292
            self.fof_unit_formula()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1299
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TPTPParser.Fof_or_formulaContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_fof_or_formula)
                    self.state = 1294
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1295
                    self.match(TPTPParser.Vline)
                    self.state = 1296
                    self.fof_unit_formula() 
                self.state = 1301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Fof_and_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_unit_formula(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Fof_unit_formulaContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Fof_unit_formulaContext,i)


        def fof_and_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_and_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_and_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_and_formula" ):
                listener.enterFof_and_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_and_formula" ):
                listener.exitFof_and_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_and_formula" ):
                return visitor.visitFof_and_formula(self)
            else:
                return visitor.visitChildren(self)



    def fof_and_formula(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TPTPParser.Fof_and_formulaContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 264
        self.enterRecursionRule(localctx, 264, self.RULE_fof_and_formula, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.fof_unit_formula()
            self.state = 1304
            self.match(TPTPParser.T__9)
            self.state = 1305
            self.fof_unit_formula()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1312
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TPTPParser.Fof_and_formulaContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_fof_and_formula)
                    self.state = 1307
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1308
                    self.match(TPTPParser.T__9)
                    self.state = 1309
                    self.fof_unit_formula() 
                self.state = 1314
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Fof_unary_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_connective(self):
            return self.getTypedRuleContext(TPTPParser.Unary_connectiveContext,0)


        def fof_unit_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_unit_formulaContext,0)


        def fof_infix_unary(self):
            return self.getTypedRuleContext(TPTPParser.Fof_infix_unaryContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_unary_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_unary_formula" ):
                listener.enterFof_unary_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_unary_formula" ):
                listener.exitFof_unary_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_unary_formula" ):
                return visitor.visitFof_unary_formula(self)
            else:
                return visitor.visitChildren(self)




    def fof_unary_formula(self):

        localctx = TPTPParser.Fof_unary_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_fof_unary_formula)
        try:
            self.state = 1319
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1315
                self.unary_connective()
                self.state = 1316
                self.fof_unit_formula()
                pass
            elif token in [65, 66, 67, 68, 69, 70, 71, 72, 79, 82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1318
                self.fof_infix_unary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_infix_unaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Fof_termContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Fof_termContext,i)


        def infix_inequality(self):
            return self.getTypedRuleContext(TPTPParser.Infix_inequalityContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_infix_unary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_infix_unary" ):
                listener.enterFof_infix_unary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_infix_unary" ):
                listener.exitFof_infix_unary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_infix_unary" ):
                return visitor.visitFof_infix_unary(self)
            else:
                return visitor.visitChildren(self)




    def fof_infix_unary(self):

        localctx = TPTPParser.Fof_infix_unaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_fof_infix_unary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.fof_term()
            self.state = 1322
            self.infix_inequality()
            self.state = 1323
            self.fof_term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_unit_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_unitary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_unitary_formulaContext,0)


        def fof_unary_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_unary_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_unit_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_unit_formula" ):
                listener.enterFof_unit_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_unit_formula" ):
                listener.exitFof_unit_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_unit_formula" ):
                return visitor.visitFof_unit_formula(self)
            else:
                return visitor.visitChildren(self)




    def fof_unit_formula(self):

        localctx = TPTPParser.Fof_unit_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_fof_unit_formula)
        try:
            self.state = 1327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1325
                self.fof_unitary_formula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1326
                self.fof_unary_formula()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_unitary_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_quantified_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_quantified_formulaContext,0)


        def fof_atomic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_atomic_formulaContext,0)


        def fof_logic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_logic_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_unitary_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_unitary_formula" ):
                listener.enterFof_unitary_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_unitary_formula" ):
                listener.exitFof_unitary_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_unitary_formula" ):
                return visitor.visitFof_unitary_formula(self)
            else:
                return visitor.visitChildren(self)




    def fof_unitary_formula(self):

        localctx = TPTPParser.Fof_unitary_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_fof_unitary_formula)
        try:
            self.state = 1335
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1329
                self.fof_quantified_formula()
                pass
            elif token in [65, 66, 67, 68, 69, 70, 71, 72, 79, 82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1330
                self.fof_atomic_formula()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1331
                self.match(TPTPParser.T__11)
                self.state = 1332
                self.fof_logic_formula()
                self.state = 1333
                self.match(TPTPParser.T__12)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_quantified_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_quantifier(self):
            return self.getTypedRuleContext(TPTPParser.Fof_quantifierContext,0)


        def fof_variable_list(self):
            return self.getTypedRuleContext(TPTPParser.Fof_variable_listContext,0)


        def fof_unit_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_unit_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_quantified_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_quantified_formula" ):
                listener.enterFof_quantified_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_quantified_formula" ):
                listener.exitFof_quantified_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_quantified_formula" ):
                return visitor.visitFof_quantified_formula(self)
            else:
                return visitor.visitChildren(self)




    def fof_quantified_formula(self):

        localctx = TPTPParser.Fof_quantified_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_fof_quantified_formula)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.fof_quantifier()
            self.state = 1338
            self.match(TPTPParser.T__13)
            self.state = 1339
            self.fof_variable_list()
            self.state = 1340
            self.match(TPTPParser.T__14)
            self.state = 1341
            self.match(TPTPParser.T__15)
            self.state = 1342
            self.fof_unit_formula()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_variable_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(TPTPParser.VariableContext,0)


        def fof_variable_list(self):
            return self.getTypedRuleContext(TPTPParser.Fof_variable_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_variable_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_variable_list" ):
                listener.enterFof_variable_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_variable_list" ):
                listener.exitFof_variable_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_variable_list" ):
                return visitor.visitFof_variable_list(self)
            else:
                return visitor.visitChildren(self)




    def fof_variable_list(self):

        localctx = TPTPParser.Fof_variable_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_fof_variable_list)
        try:
            self.state = 1349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1344
                self.variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1345
                self.variable()
                self.state = 1346
                self.match(TPTPParser.T__1)
                self.state = 1347
                self.fof_variable_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_atomic_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_plain_atomic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_plain_atomic_formulaContext,0)


        def fof_defined_atomic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_defined_atomic_formulaContext,0)


        def fof_system_atomic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_system_atomic_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_atomic_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_atomic_formula" ):
                listener.enterFof_atomic_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_atomic_formula" ):
                listener.exitFof_atomic_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_atomic_formula" ):
                return visitor.visitFof_atomic_formula(self)
            else:
                return visitor.visitChildren(self)




    def fof_atomic_formula(self):

        localctx = TPTPParser.Fof_atomic_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_fof_atomic_formula)
        try:
            self.state = 1354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1351
                self.fof_plain_atomic_formula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1352
                self.fof_defined_atomic_formula()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1353
                self.fof_system_atomic_formula()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_plain_atomic_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_plain_term(self):
            return self.getTypedRuleContext(TPTPParser.Fof_plain_termContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_plain_atomic_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_plain_atomic_formula" ):
                listener.enterFof_plain_atomic_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_plain_atomic_formula" ):
                listener.exitFof_plain_atomic_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_plain_atomic_formula" ):
                return visitor.visitFof_plain_atomic_formula(self)
            else:
                return visitor.visitChildren(self)




    def fof_plain_atomic_formula(self):

        localctx = TPTPParser.Fof_plain_atomic_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_fof_plain_atomic_formula)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.fof_plain_term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_defined_atomic_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_defined_plain_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_defined_plain_formulaContext,0)


        def fof_defined_infix_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_defined_infix_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_defined_atomic_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_defined_atomic_formula" ):
                listener.enterFof_defined_atomic_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_defined_atomic_formula" ):
                listener.exitFof_defined_atomic_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_defined_atomic_formula" ):
                return visitor.visitFof_defined_atomic_formula(self)
            else:
                return visitor.visitChildren(self)




    def fof_defined_atomic_formula(self):

        localctx = TPTPParser.Fof_defined_atomic_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_fof_defined_atomic_formula)
        try:
            self.state = 1360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1358
                self.fof_defined_plain_formula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1359
                self.fof_defined_infix_formula()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_defined_plain_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_defined_plain_term(self):
            return self.getTypedRuleContext(TPTPParser.Fof_defined_plain_termContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_defined_plain_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_defined_plain_formula" ):
                listener.enterFof_defined_plain_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_defined_plain_formula" ):
                listener.exitFof_defined_plain_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_defined_plain_formula" ):
                return visitor.visitFof_defined_plain_formula(self)
            else:
                return visitor.visitChildren(self)




    def fof_defined_plain_formula(self):

        localctx = TPTPParser.Fof_defined_plain_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_fof_defined_plain_formula)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1362
            self.fof_defined_plain_term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_defined_infix_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Fof_termContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Fof_termContext,i)


        def defined_infix_pred(self):
            return self.getTypedRuleContext(TPTPParser.Defined_infix_predContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_defined_infix_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_defined_infix_formula" ):
                listener.enterFof_defined_infix_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_defined_infix_formula" ):
                listener.exitFof_defined_infix_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_defined_infix_formula" ):
                return visitor.visitFof_defined_infix_formula(self)
            else:
                return visitor.visitChildren(self)




    def fof_defined_infix_formula(self):

        localctx = TPTPParser.Fof_defined_infix_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_fof_defined_infix_formula)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.fof_term()
            self.state = 1365
            self.defined_infix_pred()
            self.state = 1366
            self.fof_term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_system_atomic_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_system_term(self):
            return self.getTypedRuleContext(TPTPParser.Fof_system_termContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_system_atomic_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_system_atomic_formula" ):
                listener.enterFof_system_atomic_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_system_atomic_formula" ):
                listener.exitFof_system_atomic_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_system_atomic_formula" ):
                return visitor.visitFof_system_atomic_formula(self)
            else:
                return visitor.visitChildren(self)




    def fof_system_atomic_formula(self):

        localctx = TPTPParser.Fof_system_atomic_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_fof_system_atomic_formula)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            self.fof_system_term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_plain_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(TPTPParser.ConstantContext,0)


        def functor(self):
            return self.getTypedRuleContext(TPTPParser.FunctorContext,0)


        def fof_arguments(self):
            return self.getTypedRuleContext(TPTPParser.Fof_argumentsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_plain_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_plain_term" ):
                listener.enterFof_plain_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_plain_term" ):
                listener.exitFof_plain_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_plain_term" ):
                return visitor.visitFof_plain_term(self)
            else:
                return visitor.visitChildren(self)




    def fof_plain_term(self):

        localctx = TPTPParser.Fof_plain_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_fof_plain_term)
        try:
            self.state = 1376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1370
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1371
                self.functor()
                self.state = 1372
                self.match(TPTPParser.T__11)
                self.state = 1373
                self.fof_arguments()
                self.state = 1374
                self.match(TPTPParser.T__12)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_defined_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defined_term(self):
            return self.getTypedRuleContext(TPTPParser.Defined_termContext,0)


        def fof_defined_atomic_term(self):
            return self.getTypedRuleContext(TPTPParser.Fof_defined_atomic_termContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_defined_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_defined_term" ):
                listener.enterFof_defined_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_defined_term" ):
                listener.exitFof_defined_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_defined_term" ):
                return visitor.visitFof_defined_term(self)
            else:
                return visitor.visitChildren(self)




    def fof_defined_term(self):

        localctx = TPTPParser.Fof_defined_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_fof_defined_term)
        try:
            self.state = 1380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67, 72, 79, 82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1378
                self.defined_term()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1379
                self.fof_defined_atomic_term()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_defined_atomic_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_defined_plain_term(self):
            return self.getTypedRuleContext(TPTPParser.Fof_defined_plain_termContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_defined_atomic_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_defined_atomic_term" ):
                listener.enterFof_defined_atomic_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_defined_atomic_term" ):
                listener.exitFof_defined_atomic_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_defined_atomic_term" ):
                return visitor.visitFof_defined_atomic_term(self)
            else:
                return visitor.visitChildren(self)




    def fof_defined_atomic_term(self):

        localctx = TPTPParser.Fof_defined_atomic_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_fof_defined_atomic_term)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1382
            self.fof_defined_plain_term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_defined_plain_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defined_constant(self):
            return self.getTypedRuleContext(TPTPParser.Defined_constantContext,0)


        def defined_functor(self):
            return self.getTypedRuleContext(TPTPParser.Defined_functorContext,0)


        def fof_arguments(self):
            return self.getTypedRuleContext(TPTPParser.Fof_argumentsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_defined_plain_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_defined_plain_term" ):
                listener.enterFof_defined_plain_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_defined_plain_term" ):
                listener.exitFof_defined_plain_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_defined_plain_term" ):
                return visitor.visitFof_defined_plain_term(self)
            else:
                return visitor.visitChildren(self)




    def fof_defined_plain_term(self):

        localctx = TPTPParser.Fof_defined_plain_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_fof_defined_plain_term)
        try:
            self.state = 1390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1384
                self.defined_constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1385
                self.defined_functor()
                self.state = 1386
                self.match(TPTPParser.T__11)
                self.state = 1387
                self.fof_arguments()
                self.state = 1388
                self.match(TPTPParser.T__12)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_system_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def system_constant(self):
            return self.getTypedRuleContext(TPTPParser.System_constantContext,0)


        def system_functor(self):
            return self.getTypedRuleContext(TPTPParser.System_functorContext,0)


        def fof_arguments(self):
            return self.getTypedRuleContext(TPTPParser.Fof_argumentsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_system_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_system_term" ):
                listener.enterFof_system_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_system_term" ):
                listener.exitFof_system_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_system_term" ):
                return visitor.visitFof_system_term(self)
            else:
                return visitor.visitChildren(self)




    def fof_system_term(self):

        localctx = TPTPParser.Fof_system_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_fof_system_term)
        try:
            self.state = 1398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1392
                self.system_constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1393
                self.system_functor()
                self.state = 1394
                self.match(TPTPParser.T__11)
                self.state = 1395
                self.fof_arguments()
                self.state = 1396
                self.match(TPTPParser.T__12)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_argumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_term(self):
            return self.getTypedRuleContext(TPTPParser.Fof_termContext,0)


        def fof_arguments(self):
            return self.getTypedRuleContext(TPTPParser.Fof_argumentsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_arguments" ):
                listener.enterFof_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_arguments" ):
                listener.exitFof_arguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_arguments" ):
                return visitor.visitFof_arguments(self)
            else:
                return visitor.visitChildren(self)




    def fof_arguments(self):

        localctx = TPTPParser.Fof_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_fof_arguments)
        try:
            self.state = 1405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1400
                self.fof_term()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1401
                self.fof_term()
                self.state = 1402
                self.match(TPTPParser.T__1)
                self.state = 1403
                self.fof_arguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_function_term(self):
            return self.getTypedRuleContext(TPTPParser.Fof_function_termContext,0)


        def variable(self):
            return self.getTypedRuleContext(TPTPParser.VariableContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_term" ):
                listener.enterFof_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_term" ):
                listener.exitFof_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_term" ):
                return visitor.visitFof_term(self)
            else:
                return visitor.visitChildren(self)




    def fof_term(self):

        localctx = TPTPParser.Fof_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_fof_term)
        try:
            self.state = 1409
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65, 66, 67, 68, 69, 71, 72, 79, 82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1407
                self.fof_function_term()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1408
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_function_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_plain_term(self):
            return self.getTypedRuleContext(TPTPParser.Fof_plain_termContext,0)


        def fof_defined_term(self):
            return self.getTypedRuleContext(TPTPParser.Fof_defined_termContext,0)


        def fof_system_term(self):
            return self.getTypedRuleContext(TPTPParser.Fof_system_termContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_function_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_function_term" ):
                listener.enterFof_function_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_function_term" ):
                listener.exitFof_function_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_function_term" ):
                return visitor.visitFof_function_term(self)
            else:
                return visitor.visitChildren(self)




    def fof_function_term(self):

        localctx = TPTPParser.Fof_function_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_fof_function_term)
        try:
            self.state = 1414
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65, 66, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1411
                self.fof_plain_term()
                pass
            elif token in [67, 68, 72, 79, 82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1412
                self.fof_defined_term()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1413
                self.fof_system_term()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_sequentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_formula_tuple(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Fof_formula_tupleContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Fof_formula_tupleContext,i)


        def gentzen_arrow(self):
            return self.getTypedRuleContext(TPTPParser.Gentzen_arrowContext,0)


        def fof_sequent(self):
            return self.getTypedRuleContext(TPTPParser.Fof_sequentContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_sequent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_sequent" ):
                listener.enterFof_sequent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_sequent" ):
                listener.exitFof_sequent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_sequent" ):
                return visitor.visitFof_sequent(self)
            else:
                return visitor.visitChildren(self)




    def fof_sequent(self):

        localctx = TPTPParser.Fof_sequentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_fof_sequent)
        try:
            self.state = 1424
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1416
                self.fof_formula_tuple()
                self.state = 1417
                self.gentzen_arrow()
                self.state = 1418
                self.fof_formula_tuple()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1420
                self.match(TPTPParser.T__11)
                self.state = 1421
                self.fof_sequent()
                self.state = 1422
                self.match(TPTPParser.T__12)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_formula_tupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_formula_tuple_list(self):
            return self.getTypedRuleContext(TPTPParser.Fof_formula_tuple_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_formula_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_formula_tuple" ):
                listener.enterFof_formula_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_formula_tuple" ):
                listener.exitFof_formula_tuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_formula_tuple" ):
                return visitor.visitFof_formula_tuple(self)
            else:
                return visitor.visitChildren(self)




    def fof_formula_tuple(self):

        localctx = TPTPParser.Fof_formula_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_fof_formula_tuple)
        try:
            self.state = 1431
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1426
                self.match(TPTPParser.T__17)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1427
                self.match(TPTPParser.T__13)
                self.state = 1428
                self.fof_formula_tuple_list()
                self.state = 1429
                self.match(TPTPParser.T__14)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_formula_tuple_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_logic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_logic_formulaContext,0)


        def comma_fof_logic_formula(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Comma_fof_logic_formulaContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Comma_fof_logic_formulaContext,i)


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_formula_tuple_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_formula_tuple_list" ):
                listener.enterFof_formula_tuple_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_formula_tuple_list" ):
                listener.exitFof_formula_tuple_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_formula_tuple_list" ):
                return visitor.visitFof_formula_tuple_list(self)
            else:
                return visitor.visitChildren(self)




    def fof_formula_tuple_list(self):

        localctx = TPTPParser.Fof_formula_tuple_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_fof_formula_tuple_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self.fof_logic_formula()
            self.state = 1437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 1434
                self.comma_fof_logic_formula()
                self.state = 1439
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comma_fof_logic_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_logic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_logic_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_comma_fof_logic_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma_fof_logic_formula" ):
                listener.enterComma_fof_logic_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma_fof_logic_formula" ):
                listener.exitComma_fof_logic_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComma_fof_logic_formula" ):
                return visitor.visitComma_fof_logic_formula(self)
            else:
                return visitor.visitChildren(self)




    def comma_fof_logic_formula(self):

        localctx = TPTPParser.Comma_fof_logic_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_comma_fof_logic_formula)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self.match(TPTPParser.T__1)
            self.state = 1441
            self.fof_logic_formula()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cnf_formulaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cnf_disjunction(self):
            return self.getTypedRuleContext(TPTPParser.Cnf_disjunctionContext,0)


        def cnf_formula(self):
            return self.getTypedRuleContext(TPTPParser.Cnf_formulaContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_cnf_formula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCnf_formula" ):
                listener.enterCnf_formula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCnf_formula" ):
                listener.exitCnf_formula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCnf_formula" ):
                return visitor.visitCnf_formula(self)
            else:
                return visitor.visitChildren(self)




    def cnf_formula(self):

        localctx = TPTPParser.Cnf_formulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_cnf_formula)
        try:
            self.state = 1448
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28, 65, 66, 67, 68, 69, 70, 71, 72, 79, 82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1443
                self.cnf_disjunction(0)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1444
                self.match(TPTPParser.T__11)
                self.state = 1445
                self.cnf_formula()
                self.state = 1446
                self.match(TPTPParser.T__12)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cnf_disjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cnf_literal(self):
            return self.getTypedRuleContext(TPTPParser.Cnf_literalContext,0)


        def cnf_disjunction(self):
            return self.getTypedRuleContext(TPTPParser.Cnf_disjunctionContext,0)


        def Vline(self):
            return self.getToken(TPTPParser.Vline, 0)

        def getRuleIndex(self):
            return TPTPParser.RULE_cnf_disjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCnf_disjunction" ):
                listener.enterCnf_disjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCnf_disjunction" ):
                listener.exitCnf_disjunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCnf_disjunction" ):
                return visitor.visitCnf_disjunction(self)
            else:
                return visitor.visitChildren(self)



    def cnf_disjunction(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TPTPParser.Cnf_disjunctionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 316
        self.enterRecursionRule(localctx, 316, self.RULE_cnf_disjunction, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.cnf_literal()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1458
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TPTPParser.Cnf_disjunctionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_cnf_disjunction)
                    self.state = 1453
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1454
                    self.match(TPTPParser.Vline)
                    self.state = 1455
                    self.cnf_literal() 
                self.state = 1460
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Cnf_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_atomic_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_atomic_formulaContext,0)


        def fof_infix_unary(self):
            return self.getTypedRuleContext(TPTPParser.Fof_infix_unaryContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_cnf_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCnf_literal" ):
                listener.enterCnf_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCnf_literal" ):
                listener.exitCnf_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCnf_literal" ):
                return visitor.visitCnf_literal(self)
            else:
                return visitor.visitChildren(self)




    def cnf_literal(self):

        localctx = TPTPParser.Cnf_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_cnf_literal)
        try:
            self.state = 1470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1461
                self.fof_atomic_formula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1462
                self.match(TPTPParser.T__27)
                self.state = 1463
                self.fof_atomic_formula()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1464
                self.match(TPTPParser.T__27)
                self.state = 1465
                self.match(TPTPParser.T__11)
                self.state = 1466
                self.fof_atomic_formula()
                self.state = 1467
                self.match(TPTPParser.T__12)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1469
                self.fof_infix_unary()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_quantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tff_quantifier(self):
            return self.getTypedRuleContext(TPTPParser.Tff_quantifierContext,0)


        def th0_quantifier(self):
            return self.getTypedRuleContext(TPTPParser.Th0_quantifierContext,0)


        def th1_quantifier(self):
            return self.getTypedRuleContext(TPTPParser.Th1_quantifierContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_quantifier" ):
                listener.enterThf_quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_quantifier" ):
                listener.exitThf_quantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_quantifier" ):
                return visitor.visitThf_quantifier(self)
            else:
                return visitor.visitChildren(self)




    def thf_quantifier(self):

        localctx = TPTPParser.Thf_quantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_thf_quantifier)
        try:
            self.state = 1475
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 34, 94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1472
                self.tff_quantifier()
                pass
            elif token in [30, 31, 32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1473
                self.th0_quantifier()
                pass
            elif token in [19, 29]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1474
                self.th1_quantifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Thf_unary_connectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_connective(self):
            return self.getTypedRuleContext(TPTPParser.Unary_connectiveContext,0)


        def ntf_short_connective(self):
            return self.getTypedRuleContext(TPTPParser.Ntf_short_connectiveContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_thf_unary_connective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThf_unary_connective" ):
                listener.enterThf_unary_connective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThf_unary_connective" ):
                listener.exitThf_unary_connective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThf_unary_connective" ):
                return visitor.visitThf_unary_connective(self)
            else:
                return visitor.visitChildren(self)




    def thf_unary_connective(self):

        localctx = TPTPParser.Thf_unary_connectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_thf_unary_connective)
        try:
            self.state = 1479
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1477
                self.unary_connective()
                pass
            elif token in [23, 25, 26, 93]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1478
                self.ntf_short_connective()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Th1_quantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TPTPParser.RULE_th1_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTh1_quantifier" ):
                listener.enterTh1_quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTh1_quantifier" ):
                listener.exitTh1_quantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTh1_quantifier" ):
                return visitor.visitTh1_quantifier(self)
            else:
                return visitor.visitChildren(self)




    def th1_quantifier(self):

        localctx = TPTPParser.Th1_quantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_th1_quantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            _la = self._input.LA(1)
            if not(_la==19 or _la==29):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Th0_quantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TPTPParser.RULE_th0_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTh0_quantifier" ):
                listener.enterTh0_quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTh0_quantifier" ):
                listener.exitTh0_quantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTh0_quantifier" ):
                return visitor.visitTh0_quantifier(self)
            else:
                return visitor.visitChildren(self)




    def th0_quantifier(self):

        localctx = TPTPParser.Th0_quantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_th0_quantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1483
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7516192768) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subtype_signContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TPTPParser.RULE_subtype_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtype_sign" ):
                listener.enterSubtype_sign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtype_sign" ):
                listener.exitSubtype_sign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtype_sign" ):
                return visitor.visitSubtype_sign(self)
            else:
                return visitor.visitChildren(self)




    def subtype_sign(self):

        localctx = TPTPParser.Subtype_signContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_subtype_sign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            self.match(TPTPParser.T__32)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_unary_connectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_connective(self):
            return self.getTypedRuleContext(TPTPParser.Unary_connectiveContext,0)


        def ntf_short_connective(self):
            return self.getTypedRuleContext(TPTPParser.Ntf_short_connectiveContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_tff_unary_connective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_unary_connective" ):
                listener.enterTff_unary_connective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_unary_connective" ):
                listener.exitTff_unary_connective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_unary_connective" ):
                return visitor.visitTff_unary_connective(self)
            else:
                return visitor.visitChildren(self)




    def tff_unary_connective(self):

        localctx = TPTPParser.Tff_unary_connectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_tff_unary_connective)
        try:
            self.state = 1489
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1487
                self.unary_connective()
                pass
            elif token in [23, 25, 26, 93]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1488
                self.ntf_short_connective()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tff_quantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fof_quantifier(self):
            return self.getTypedRuleContext(TPTPParser.Fof_quantifierContext,0)


        def Hash(self):
            return self.getToken(TPTPParser.Hash, 0)

        def getRuleIndex(self):
            return TPTPParser.RULE_tff_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTff_quantifier" ):
                listener.enterTff_quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTff_quantifier" ):
                listener.exitTff_quantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTff_quantifier" ):
                return visitor.visitTff_quantifier(self)
            else:
                return visitor.visitChildren(self)




    def tff_quantifier(self):

        localctx = TPTPParser.Tff_quantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_tff_quantifier)
        try:
            self.state = 1493
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1491
                self.fof_quantifier()
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1492
                self.match(TPTPParser.Hash)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fof_quantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TPTPParser.RULE_fof_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFof_quantifier" ):
                listener.enterFof_quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFof_quantifier" ):
                listener.exitFof_quantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFof_quantifier" ):
                return visitor.visitFof_quantifier(self)
            else:
                return visitor.visitChildren(self)




    def fof_quantifier(self):

        localctx = TPTPParser.Fof_quantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_fof_quantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1495
            _la = self._input.LA(1)
            if not(_la==27 or _la==34):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonassoc_connectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vline(self):
            return self.getToken(TPTPParser.Vline, 0)

        def getRuleIndex(self):
            return TPTPParser.RULE_nonassoc_connective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonassoc_connective" ):
                listener.enterNonassoc_connective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonassoc_connective" ):
                listener.exitNonassoc_connective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonassoc_connective" ):
                return visitor.visitNonassoc_connective(self)
            else:
                return visitor.visitChildren(self)




    def nonassoc_connective(self):

        localctx = TPTPParser.Nonassoc_connectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_nonassoc_connective)
        try:
            self.state = 1504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1497
                self.match(TPTPParser.T__34)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1498
                self.match(TPTPParser.T__35)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1499
                self.match(TPTPParser.T__36)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1500
                self.match(TPTPParser.T__37)
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1501
                self.match(TPTPParser.T__27)
                self.state = 1502
                self.match(TPTPParser.Vline)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1503
                self.match(TPTPParser.T__38)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assoc_connectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vline(self):
            return self.getToken(TPTPParser.Vline, 0)

        def getRuleIndex(self):
            return TPTPParser.RULE_assoc_connective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssoc_connective" ):
                listener.enterAssoc_connective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssoc_connective" ):
                listener.exitAssoc_connective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssoc_connective" ):
                return visitor.visitAssoc_connective(self)
            else:
                return visitor.visitChildren(self)




    def assoc_connective(self):

        localctx = TPTPParser.Assoc_connectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_assoc_connective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1506
            _la = self._input.LA(1)
            if not(_la==10 or _la==89):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_connectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TPTPParser.RULE_unary_connective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_connective" ):
                listener.enterUnary_connective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_connective" ):
                listener.exitUnary_connective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_connective" ):
                return visitor.visitUnary_connective(self)
            else:
                return visitor.visitChildren(self)




    def unary_connective(self):

        localctx = TPTPParser.Unary_connectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_unary_connective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1508
            self.match(TPTPParser.T__27)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Gentzen_arrowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TPTPParser.RULE_gentzen_arrow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGentzen_arrow" ):
                listener.enterGentzen_arrow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGentzen_arrow" ):
                listener.exitGentzen_arrow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGentzen_arrow" ):
                return visitor.visitGentzen_arrow(self)
            else:
                return visitor.visitChildren(self)




    def gentzen_arrow(self):

        localctx = TPTPParser.Gentzen_arrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_gentzen_arrow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.match(TPTPParser.T__39)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TPTPParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = TPTPParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self.match(TPTPParser.T__40)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdenticalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TPTPParser.RULE_identical

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentical" ):
                listener.enterIdentical(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentical" ):
                listener.exitIdentical(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentical" ):
                return visitor.visitIdentical(self)
            else:
                return visitor.visitChildren(self)




    def identical(self):

        localctx = TPTPParser.IdenticalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_identical)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1514
            self.match(TPTPParser.T__41)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_constantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_functor(self):
            return self.getTypedRuleContext(TPTPParser.Type_functorContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_type_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_constant" ):
                listener.enterType_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_constant" ):
                listener.exitType_constant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_constant" ):
                return visitor.visitType_constant(self)
            else:
                return visitor.visitChildren(self)




    def type_constant(self):

        localctx = TPTPParser.Type_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_type_constant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1516
            self.type_functor()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_functorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_word(self):
            return self.getTypedRuleContext(TPTPParser.Atomic_wordContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_type_functor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_functor" ):
                listener.enterType_functor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_functor" ):
                listener.exitType_functor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_functor" ):
                return visitor.visitType_functor(self)
            else:
                return visitor.visitChildren(self)




    def type_functor(self):

        localctx = TPTPParser.Type_functorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_type_functor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1518
            self.atomic_word()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defined_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_defined_word(self):
            return self.getTypedRuleContext(TPTPParser.Atomic_defined_wordContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_defined_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefined_type" ):
                listener.enterDefined_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefined_type" ):
                listener.exitDefined_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefined_type" ):
                return visitor.visitDefined_type(self)
            else:
                return visitor.visitChildren(self)




    def defined_type(self):

        localctx = TPTPParser.Defined_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_defined_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self.atomic_defined_word()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untyped_atom(self):
            return self.getTypedRuleContext(TPTPParser.Untyped_atomContext,0)


        def defined_constant(self):
            return self.getTypedRuleContext(TPTPParser.Defined_constantContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = TPTPParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_atom)
        try:
            self.state = 1524
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65, 66, 69, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1522
                self.untyped_atom()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1523
                self.defined_constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Untyped_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(TPTPParser.ConstantContext,0)


        def system_constant(self):
            return self.getTypedRuleContext(TPTPParser.System_constantContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_untyped_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntyped_atom" ):
                listener.enterUntyped_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntyped_atom" ):
                listener.exitUntyped_atom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntyped_atom" ):
                return visitor.visitUntyped_atom(self)
            else:
                return visitor.visitChildren(self)




    def untyped_atom(self):

        localctx = TPTPParser.Untyped_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_untyped_atom)
        try:
            self.state = 1528
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65, 66, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1526
                self.constant()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1527
                self.system_constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defined_infix_predContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def infix_equality(self):
            return self.getTypedRuleContext(TPTPParser.Infix_equalityContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_defined_infix_pred

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefined_infix_pred" ):
                listener.enterDefined_infix_pred(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefined_infix_pred" ):
                listener.exitDefined_infix_pred(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefined_infix_pred" ):
                return visitor.visitDefined_infix_pred(self)
            else:
                return visitor.visitChildren(self)




    def defined_infix_pred(self):

        localctx = TPTPParser.Defined_infix_predContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_defined_infix_pred)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            self.infix_equality()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Infix_equalityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TPTPParser.RULE_infix_equality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfix_equality" ):
                listener.enterInfix_equality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfix_equality" ):
                listener.exitInfix_equality(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfix_equality" ):
                return visitor.visitInfix_equality(self)
            else:
                return visitor.visitChildren(self)




    def infix_equality(self):

        localctx = TPTPParser.Infix_equalityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_infix_equality)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532
            self.match(TPTPParser.T__42)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Infix_inequalityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TPTPParser.RULE_infix_inequality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfix_inequality" ):
                listener.enterInfix_inequality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfix_inequality" ):
                listener.exitInfix_inequality(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfix_inequality" ):
                return visitor.visitInfix_inequality(self)
            else:
                return visitor.visitChildren(self)




    def infix_inequality(self):

        localctx = TPTPParser.Infix_inequalityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_infix_inequality)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1534
            self.match(TPTPParser.T__43)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functor(self):
            return self.getTypedRuleContext(TPTPParser.FunctorContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = TPTPParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_constant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self.functor()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_word(self):
            return self.getTypedRuleContext(TPTPParser.Atomic_wordContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_functor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctor" ):
                listener.enterFunctor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctor" ):
                listener.exitFunctor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctor" ):
                return visitor.visitFunctor(self)
            else:
                return visitor.visitChildren(self)




    def functor(self):

        localctx = TPTPParser.FunctorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_functor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1538
            self.atomic_word()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defined_constantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defined_functor(self):
            return self.getTypedRuleContext(TPTPParser.Defined_functorContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_defined_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefined_constant" ):
                listener.enterDefined_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefined_constant" ):
                listener.exitDefined_constant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefined_constant" ):
                return visitor.visitDefined_constant(self)
            else:
                return visitor.visitChildren(self)




    def defined_constant(self):

        localctx = TPTPParser.Defined_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_defined_constant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1540
            self.defined_functor()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defined_functorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_defined_word(self):
            return self.getTypedRuleContext(TPTPParser.Atomic_defined_wordContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_defined_functor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefined_functor" ):
                listener.enterDefined_functor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefined_functor" ):
                listener.exitDefined_functor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefined_functor" ):
                return visitor.visitDefined_functor(self)
            else:
                return visitor.visitChildren(self)




    def defined_functor(self):

        localctx = TPTPParser.Defined_functorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_defined_functor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1542
            self.atomic_defined_word()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class System_constantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def system_functor(self):
            return self.getTypedRuleContext(TPTPParser.System_functorContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_system_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystem_constant" ):
                listener.enterSystem_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystem_constant" ):
                listener.exitSystem_constant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSystem_constant" ):
                return visitor.visitSystem_constant(self)
            else:
                return visitor.visitChildren(self)




    def system_constant(self):

        localctx = TPTPParser.System_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_system_constant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1544
            self.system_functor()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class System_functorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_system_word(self):
            return self.getTypedRuleContext(TPTPParser.Atomic_system_wordContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_system_functor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystem_functor" ):
                listener.enterSystem_functor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystem_functor" ):
                listener.exitSystem_functor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSystem_functor" ):
                return visitor.visitSystem_functor(self)
            else:
                return visitor.visitChildren(self)




    def system_functor(self):

        localctx = TPTPParser.System_functorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_system_functor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            self.atomic_system_word()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_or_sys_constantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defined_constant(self):
            return self.getTypedRuleContext(TPTPParser.Defined_constantContext,0)


        def system_constant(self):
            return self.getTypedRuleContext(TPTPParser.System_constantContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_def_or_sys_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_or_sys_constant" ):
                listener.enterDef_or_sys_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_or_sys_constant" ):
                listener.exitDef_or_sys_constant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_or_sys_constant" ):
                return visitor.visitDef_or_sys_constant(self)
            else:
                return visitor.visitChildren(self)




    def def_or_sys_constant(self):

        localctx = TPTPParser.Def_or_sys_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_def_or_sys_constant)
        try:
            self.state = 1550
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1548
                self.defined_constant()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1549
                self.system_constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Th1_defined_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TPTPParser.RULE_th1_defined_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTh1_defined_term" ):
                listener.enterTh1_defined_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTh1_defined_term" ):
                listener.exitTh1_defined_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTh1_defined_term" ):
                return visitor.visitTh1_defined_term(self)
            else:
                return visitor.visitChildren(self)




    def th1_defined_term(self):

        localctx = TPTPParser.Th1_defined_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_th1_defined_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1090715534753792) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defined_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(TPTPParser.NumberContext,0)


        def Distinct_object(self):
            return self.getToken(TPTPParser.Distinct_object, 0)

        def getRuleIndex(self):
            return TPTPParser.RULE_defined_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefined_term" ):
                listener.enterDefined_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefined_term" ):
                listener.exitDefined_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefined_term" ):
                return visitor.visitDefined_term(self)
            else:
                return visitor.visitChildren(self)




    def defined_term(self):

        localctx = TPTPParser.Defined_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_defined_term)
        try:
            self.state = 1556
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72, 79, 82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1554
                self.number()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1555
                self.match(TPTPParser.Distinct_object)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Upper_word(self):
            return self.getToken(TPTPParser.Upper_word, 0)

        def getRuleIndex(self):
            return TPTPParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable" ):
                return visitor.visitVariable(self)
            else:
                return visitor.visitChildren(self)




    def variable(self):

        localctx = TPTPParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1558
            self.match(TPTPParser.Upper_word)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dag_source(self):
            return self.getTypedRuleContext(TPTPParser.Dag_sourceContext,0)


        def internal_source(self):
            return self.getTypedRuleContext(TPTPParser.Internal_sourceContext,0)


        def external_source(self):
            return self.getTypedRuleContext(TPTPParser.External_sourceContext,0)


        def sources(self):
            return self.getTypedRuleContext(TPTPParser.SourcesContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSource" ):
                listener.enterSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSource" ):
                listener.exitSource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSource" ):
                return visitor.visitSource(self)
            else:
                return visitor.visitChildren(self)




    def source(self):

        localctx = TPTPParser.SourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_source)
        try:
            self.state = 1568
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 65, 66, 71, 82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1560
                self.dag_source()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1561
                self.internal_source()
                pass
            elif token in [53, 54, 55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1562
                self.external_source()
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1563
                self.match(TPTPParser.T__49)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1564
                self.match(TPTPParser.T__13)
                self.state = 1565
                self.sources()
                self.state = 1566
                self.match(TPTPParser.T__14)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def source(self):
            return self.getTypedRuleContext(TPTPParser.SourceContext,0)


        def sources(self):
            return self.getTypedRuleContext(TPTPParser.SourcesContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_sources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSources" ):
                listener.enterSources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSources" ):
                listener.exitSources(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSources" ):
                return visitor.visitSources(self)
            else:
                return visitor.visitChildren(self)




    def sources(self):

        localctx = TPTPParser.SourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_sources)
        try:
            self.state = 1575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1570
                self.source()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1571
                self.source()
                self.state = 1572
                self.match(TPTPParser.T__1)
                self.state = 1573
                self.sources()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dag_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(TPTPParser.NameContext,0)


        def inference_record(self):
            return self.getTypedRuleContext(TPTPParser.Inference_recordContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_dag_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDag_source" ):
                listener.enterDag_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDag_source" ):
                listener.exitDag_source(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDag_source" ):
                return visitor.visitDag_source(self)
            else:
                return visitor.visitChildren(self)




    def dag_source(self):

        localctx = TPTPParser.Dag_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_dag_source)
        try:
            self.state = 1579
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65, 66, 71, 82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1577
                self.name()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1578
                self.inference_record()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inference_recordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inference_rule(self):
            return self.getTypedRuleContext(TPTPParser.Inference_ruleContext,0)


        def useful_info(self):
            return self.getTypedRuleContext(TPTPParser.Useful_infoContext,0)


        def parents(self):
            return self.getTypedRuleContext(TPTPParser.ParentsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_inference_record

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInference_record" ):
                listener.enterInference_record(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInference_record" ):
                listener.exitInference_record(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInference_record" ):
                return visitor.visitInference_record(self)
            else:
                return visitor.visitChildren(self)




    def inference_record(self):

        localctx = TPTPParser.Inference_recordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_inference_record)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1581
            self.match(TPTPParser.T__50)
            self.state = 1582
            self.inference_rule()
            self.state = 1583
            self.match(TPTPParser.T__1)
            self.state = 1584
            self.useful_info()
            self.state = 1585
            self.match(TPTPParser.T__1)
            self.state = 1586
            self.parents()
            self.state = 1587
            self.match(TPTPParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inference_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_word(self):
            return self.getTypedRuleContext(TPTPParser.Atomic_wordContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_inference_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInference_rule" ):
                listener.enterInference_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInference_rule" ):
                listener.exitInference_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInference_rule" ):
                return visitor.visitInference_rule(self)
            else:
                return visitor.visitChildren(self)




    def inference_rule(self):

        localctx = TPTPParser.Inference_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_inference_rule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1589
            self.atomic_word()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Internal_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intro_type(self):
            return self.getTypedRuleContext(TPTPParser.Intro_typeContext,0)


        def useful_info(self):
            return self.getTypedRuleContext(TPTPParser.Useful_infoContext,0)


        def parents(self):
            return self.getTypedRuleContext(TPTPParser.ParentsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_internal_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInternal_source" ):
                listener.enterInternal_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInternal_source" ):
                listener.exitInternal_source(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInternal_source" ):
                return visitor.visitInternal_source(self)
            else:
                return visitor.visitChildren(self)




    def internal_source(self):

        localctx = TPTPParser.Internal_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_internal_source)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1591
            self.match(TPTPParser.T__51)
            self.state = 1592
            self.intro_type()
            self.state = 1593
            self.match(TPTPParser.T__1)
            self.state = 1594
            self.useful_info()
            self.state = 1595
            self.match(TPTPParser.T__1)
            self.state = 1596
            self.parents()
            self.state = 1597
            self.match(TPTPParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Intro_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_word(self):
            return self.getTypedRuleContext(TPTPParser.Atomic_wordContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_intro_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntro_type" ):
                listener.enterIntro_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntro_type" ):
                listener.exitIntro_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntro_type" ):
                return visitor.visitIntro_type(self)
            else:
                return visitor.visitChildren(self)




    def intro_type(self):

        localctx = TPTPParser.Intro_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_intro_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1599
            self.atomic_word()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def file_source(self):
            return self.getTypedRuleContext(TPTPParser.File_sourceContext,0)


        def theory(self):
            return self.getTypedRuleContext(TPTPParser.TheoryContext,0)


        def creator_source(self):
            return self.getTypedRuleContext(TPTPParser.Creator_sourceContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_external_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_source" ):
                listener.enterExternal_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_source" ):
                listener.exitExternal_source(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternal_source" ):
                return visitor.visitExternal_source(self)
            else:
                return visitor.visitChildren(self)




    def external_source(self):

        localctx = TPTPParser.External_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_external_source)
        try:
            self.state = 1604
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1601
                self.file_source()
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1602
                self.theory()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1603
                self.creator_source()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def file_name(self):
            return self.getTypedRuleContext(TPTPParser.File_nameContext,0)


        def file_info(self):
            return self.getTypedRuleContext(TPTPParser.File_infoContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_file_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_source" ):
                listener.enterFile_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_source" ):
                listener.exitFile_source(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_source" ):
                return visitor.visitFile_source(self)
            else:
                return visitor.visitChildren(self)




    def file_source(self):

        localctx = TPTPParser.File_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_file_source)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1606
            self.match(TPTPParser.T__52)
            self.state = 1607
            self.file_name()
            self.state = 1608
            self.file_info()
            self.state = 1609
            self.match(TPTPParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_infoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(TPTPParser.NameContext,0)


        def nothing(self):
            return self.getTypedRuleContext(TPTPParser.NothingContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_file_info

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_info" ):
                listener.enterFile_info(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_info" ):
                listener.exitFile_info(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_info" ):
                return visitor.visitFile_info(self)
            else:
                return visitor.visitChildren(self)




    def file_info(self):

        localctx = TPTPParser.File_infoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_file_info)
        try:
            self.state = 1614
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1611
                self.match(TPTPParser.T__1)
                self.state = 1612
                self.name()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1613
                self.nothing()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TheoryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def theory_name(self):
            return self.getTypedRuleContext(TPTPParser.Theory_nameContext,0)


        def optional_info(self):
            return self.getTypedRuleContext(TPTPParser.Optional_infoContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_theory

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheory" ):
                listener.enterTheory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheory" ):
                listener.exitTheory(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheory" ):
                return visitor.visitTheory(self)
            else:
                return visitor.visitChildren(self)




    def theory(self):

        localctx = TPTPParser.TheoryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_theory)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1616
            self.match(TPTPParser.T__53)
            self.state = 1617
            self.theory_name()
            self.state = 1618
            self.optional_info()
            self.state = 1619
            self.match(TPTPParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Theory_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_word(self):
            return self.getTypedRuleContext(TPTPParser.Atomic_wordContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_theory_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheory_name" ):
                listener.enterTheory_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheory_name" ):
                listener.exitTheory_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheory_name" ):
                return visitor.visitTheory_name(self)
            else:
                return visitor.visitChildren(self)




    def theory_name(self):

        localctx = TPTPParser.Theory_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_theory_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            self.atomic_word()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Creator_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def creator_name(self):
            return self.getTypedRuleContext(TPTPParser.Creator_nameContext,0)


        def useful_info(self):
            return self.getTypedRuleContext(TPTPParser.Useful_infoContext,0)


        def parents(self):
            return self.getTypedRuleContext(TPTPParser.ParentsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_creator_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreator_source" ):
                listener.enterCreator_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreator_source" ):
                listener.exitCreator_source(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreator_source" ):
                return visitor.visitCreator_source(self)
            else:
                return visitor.visitChildren(self)




    def creator_source(self):

        localctx = TPTPParser.Creator_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_creator_source)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1623
            self.match(TPTPParser.T__54)
            self.state = 1624
            self.creator_name()
            self.state = 1625
            self.match(TPTPParser.T__1)
            self.state = 1626
            self.useful_info()
            self.state = 1627
            self.match(TPTPParser.T__1)
            self.state = 1628
            self.parents()
            self.state = 1629
            self.match(TPTPParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Creator_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_word(self):
            return self.getTypedRuleContext(TPTPParser.Atomic_wordContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_creator_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreator_name" ):
                listener.enterCreator_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreator_name" ):
                listener.exitCreator_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreator_name" ):
                return visitor.visitCreator_name(self)
            else:
                return visitor.visitChildren(self)




    def creator_name(self):

        localctx = TPTPParser.Creator_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_creator_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.atomic_word()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parent_list(self):
            return self.getTypedRuleContext(TPTPParser.Parent_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_parents

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParents" ):
                listener.enterParents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParents" ):
                listener.exitParents(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParents" ):
                return visitor.visitParents(self)
            else:
                return visitor.visitChildren(self)




    def parents(self):

        localctx = TPTPParser.ParentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_parents)
        try:
            self.state = 1638
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1633
                self.match(TPTPParser.T__17)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1634
                self.match(TPTPParser.T__13)
                self.state = 1635
                self.parent_list()
                self.state = 1636
                self.match(TPTPParser.T__14)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parent_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parent_info(self):
            return self.getTypedRuleContext(TPTPParser.Parent_infoContext,0)


        def comma_parent_info(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Comma_parent_infoContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Comma_parent_infoContext,i)


        def getRuleIndex(self):
            return TPTPParser.RULE_parent_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParent_list" ):
                listener.enterParent_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParent_list" ):
                listener.exitParent_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParent_list" ):
                return visitor.visitParent_list(self)
            else:
                return visitor.visitChildren(self)




    def parent_list(self):

        localctx = TPTPParser.Parent_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_parent_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.parent_info()
            self.state = 1644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 1641
                self.comma_parent_info()
                self.state = 1646
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comma_parent_infoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parent_info(self):
            return self.getTypedRuleContext(TPTPParser.Parent_infoContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_comma_parent_info

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma_parent_info" ):
                listener.enterComma_parent_info(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma_parent_info" ):
                listener.exitComma_parent_info(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComma_parent_info" ):
                return visitor.visitComma_parent_info(self)
            else:
                return visitor.visitChildren(self)




    def comma_parent_info(self):

        localctx = TPTPParser.Comma_parent_infoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_comma_parent_info)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self.match(TPTPParser.T__1)
            self.state = 1648
            self.parent_info()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parent_infoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def source(self):
            return self.getTypedRuleContext(TPTPParser.SourceContext,0)


        def parent_details(self):
            return self.getTypedRuleContext(TPTPParser.Parent_detailsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_parent_info

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParent_info" ):
                listener.enterParent_info(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParent_info" ):
                listener.exitParent_info(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParent_info" ):
                return visitor.visitParent_info(self)
            else:
                return visitor.visitChildren(self)




    def parent_info(self):

        localctx = TPTPParser.Parent_infoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_parent_info)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self.source()
            self.state = 1651
            self.parent_details()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parent_detailsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def general_term(self):
            return self.getTypedRuleContext(TPTPParser.General_termContext,0)


        def nothing(self):
            return self.getTypedRuleContext(TPTPParser.NothingContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_parent_details

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParent_details" ):
                listener.enterParent_details(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParent_details" ):
                listener.exitParent_details(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParent_details" ):
                return visitor.visitParent_details(self)
            else:
                return visitor.visitChildren(self)




    def parent_details(self):

        localctx = TPTPParser.Parent_detailsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_parent_details)
        try:
            self.state = 1656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1653
                self.match(TPTPParser.T__15)
                self.state = 1654
                self.general_term()
                pass
            elif token in [2, 15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1655
                self.nothing()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optional_infoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useful_info(self):
            return self.getTypedRuleContext(TPTPParser.Useful_infoContext,0)


        def nothing(self):
            return self.getTypedRuleContext(TPTPParser.NothingContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_optional_info

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptional_info" ):
                listener.enterOptional_info(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptional_info" ):
                listener.exitOptional_info(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptional_info" ):
                return visitor.visitOptional_info(self)
            else:
                return visitor.visitChildren(self)




    def optional_info(self):

        localctx = TPTPParser.Optional_infoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_optional_info)
        try:
            self.state = 1661
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1658
                self.match(TPTPParser.T__1)
                self.state = 1659
                self.useful_info()
                pass
            elif token in [3, 13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1660
                self.nothing()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Useful_infoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def general_list(self):
            return self.getTypedRuleContext(TPTPParser.General_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_useful_info

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseful_info" ):
                listener.enterUseful_info(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseful_info" ):
                listener.exitUseful_info(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseful_info" ):
                return visitor.visitUseful_info(self)
            else:
                return visitor.visitChildren(self)




    def useful_info(self):

        localctx = TPTPParser.Useful_infoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_useful_info)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1663
            self.general_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def file_name(self):
            return self.getTypedRuleContext(TPTPParser.File_nameContext,0)


        def include_optionals(self):
            return self.getTypedRuleContext(TPTPParser.Include_optionalsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_include

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude" ):
                listener.enterInclude(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude" ):
                listener.exitInclude(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclude" ):
                return visitor.visitInclude(self)
            else:
                return visitor.visitChildren(self)




    def include(self):

        localctx = TPTPParser.IncludeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_include)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1665
            self.match(TPTPParser.T__55)
            self.state = 1666
            self.file_name()
            self.state = 1667
            self.include_optionals()
            self.state = 1668
            self.match(TPTPParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Include_optionalsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nothing(self):
            return self.getTypedRuleContext(TPTPParser.NothingContext,0)


        def formula_selection(self):
            return self.getTypedRuleContext(TPTPParser.Formula_selectionContext,0)


        def space_name(self):
            return self.getTypedRuleContext(TPTPParser.Space_nameContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_include_optionals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude_optionals" ):
                listener.enterInclude_optionals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude_optionals" ):
                listener.exitInclude_optionals(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclude_optionals" ):
                return visitor.visitInclude_optionals(self)
            else:
                return visitor.visitChildren(self)




    def include_optionals(self):

        localctx = TPTPParser.Include_optionalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_include_optionals)
        try:
            self.state = 1678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1670
                self.nothing()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1671
                self.match(TPTPParser.T__1)
                self.state = 1672
                self.formula_selection()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1673
                self.match(TPTPParser.T__1)
                self.state = 1674
                self.formula_selection()
                self.state = 1675
                self.match(TPTPParser.T__1)
                self.state = 1676
                self.space_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formula_selectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_list(self):
            return self.getTypedRuleContext(TPTPParser.Name_listContext,0)


        def Star(self):
            return self.getToken(TPTPParser.Star, 0)

        def getRuleIndex(self):
            return TPTPParser.RULE_formula_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormula_selection" ):
                listener.enterFormula_selection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormula_selection" ):
                listener.exitFormula_selection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormula_selection" ):
                return visitor.visitFormula_selection(self)
            else:
                return visitor.visitChildren(self)




    def formula_selection(self):

        localctx = TPTPParser.Formula_selectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_formula_selection)
        try:
            self.state = 1685
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1680
                self.match(TPTPParser.T__13)
                self.state = 1681
                self.name_list()
                self.state = 1682
                self.match(TPTPParser.T__14)
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1684
                self.match(TPTPParser.Star)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(TPTPParser.NameContext,0)


        def name_list(self):
            return self.getTypedRuleContext(TPTPParser.Name_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_list" ):
                listener.enterName_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_list" ):
                listener.exitName_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_list" ):
                return visitor.visitName_list(self)
            else:
                return visitor.visitChildren(self)




    def name_list(self):

        localctx = TPTPParser.Name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_name_list)
        try:
            self.state = 1692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1687
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1688
                self.name()
                self.state = 1689
                self.match(TPTPParser.T__1)
                self.state = 1690
                self.name_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Space_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(TPTPParser.NameContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_space_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpace_name" ):
                listener.enterSpace_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpace_name" ):
                listener.exitSpace_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpace_name" ):
                return visitor.visitSpace_name(self)
            else:
                return visitor.visitChildren(self)




    def space_name(self):

        localctx = TPTPParser.Space_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_space_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def general_data(self):
            return self.getTypedRuleContext(TPTPParser.General_dataContext,0)


        def general_term(self):
            return self.getTypedRuleContext(TPTPParser.General_termContext,0)


        def general_list(self):
            return self.getTypedRuleContext(TPTPParser.General_listContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_general_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_term" ):
                listener.enterGeneral_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_term" ):
                listener.exitGeneral_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneral_term" ):
                return visitor.visitGeneral_term(self)
            else:
                return visitor.visitChildren(self)




    def general_term(self):

        localctx = TPTPParser.General_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_general_term)
        try:
            self.state = 1702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1696
                self.general_data()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1697
                self.general_data()
                self.state = 1698
                self.match(TPTPParser.T__15)
                self.state = 1699
                self.general_term()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1701
                self.general_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_dataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_word(self):
            return self.getTypedRuleContext(TPTPParser.Atomic_wordContext,0)


        def general_function(self):
            return self.getTypedRuleContext(TPTPParser.General_functionContext,0)


        def variable(self):
            return self.getTypedRuleContext(TPTPParser.VariableContext,0)


        def number(self):
            return self.getTypedRuleContext(TPTPParser.NumberContext,0)


        def Distinct_object(self):
            return self.getToken(TPTPParser.Distinct_object, 0)

        def formula_data(self):
            return self.getTypedRuleContext(TPTPParser.Formula_dataContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_general_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_data" ):
                listener.enterGeneral_data(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_data" ):
                listener.exitGeneral_data(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneral_data" ):
                return visitor.visitGeneral_data(self)
            else:
                return visitor.visitChildren(self)




    def general_data(self):

        localctx = TPTPParser.General_dataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_general_data)
        try:
            self.state = 1710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1704
                self.atomic_word()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1705
                self.general_function()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1706
                self.variable()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1707
                self.number()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1708
                self.match(TPTPParser.Distinct_object)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1709
                self.formula_data()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_word(self):
            return self.getTypedRuleContext(TPTPParser.Atomic_wordContext,0)


        def general_terms(self):
            return self.getTypedRuleContext(TPTPParser.General_termsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_general_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_function" ):
                listener.enterGeneral_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_function" ):
                listener.exitGeneral_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneral_function" ):
                return visitor.visitGeneral_function(self)
            else:
                return visitor.visitChildren(self)




    def general_function(self):

        localctx = TPTPParser.General_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_general_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1712
            self.atomic_word()
            self.state = 1713
            self.match(TPTPParser.T__11)
            self.state = 1714
            self.general_terms()
            self.state = 1715
            self.match(TPTPParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formula_dataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thf_formula(self):
            return self.getTypedRuleContext(TPTPParser.Thf_formulaContext,0)


        def tff_formula(self):
            return self.getTypedRuleContext(TPTPParser.Tff_formulaContext,0)


        def fof_formula(self):
            return self.getTypedRuleContext(TPTPParser.Fof_formulaContext,0)


        def cnf_formula(self):
            return self.getTypedRuleContext(TPTPParser.Cnf_formulaContext,0)


        def fof_term(self):
            return self.getTypedRuleContext(TPTPParser.Fof_termContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_formula_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormula_data" ):
                listener.enterFormula_data(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormula_data" ):
                listener.exitFormula_data(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormula_data" ):
                return visitor.visitFormula_data(self)
            else:
                return visitor.visitChildren(self)




    def formula_data(self):

        localctx = TPTPParser.Formula_dataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_formula_data)
        try:
            self.state = 1737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1717
                self.match(TPTPParser.T__56)
                self.state = 1718
                self.thf_formula()
                self.state = 1719
                self.match(TPTPParser.T__12)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1721
                self.match(TPTPParser.T__57)
                self.state = 1722
                self.tff_formula()
                self.state = 1723
                self.match(TPTPParser.T__12)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1725
                self.match(TPTPParser.T__58)
                self.state = 1726
                self.fof_formula()
                self.state = 1727
                self.match(TPTPParser.T__12)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1729
                self.match(TPTPParser.T__59)
                self.state = 1730
                self.cnf_formula()
                self.state = 1731
                self.match(TPTPParser.T__12)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1733
                self.match(TPTPParser.T__60)
                self.state = 1734
                self.fof_term()
                self.state = 1735
                self.match(TPTPParser.T__12)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def general_terms(self):
            return self.getTypedRuleContext(TPTPParser.General_termsContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_general_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_list" ):
                listener.enterGeneral_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_list" ):
                listener.exitGeneral_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneral_list" ):
                return visitor.visitGeneral_list(self)
            else:
                return visitor.visitChildren(self)




    def general_list(self):

        localctx = TPTPParser.General_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_general_list)
        try:
            self.state = 1744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1739
                self.match(TPTPParser.T__17)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1740
                self.match(TPTPParser.T__13)
                self.state = 1741
                self.general_terms()
                self.state = 1742
                self.match(TPTPParser.T__14)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_termsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def general_term(self):
            return self.getTypedRuleContext(TPTPParser.General_termContext,0)


        def comma_general_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TPTPParser.Comma_general_termContext)
            else:
                return self.getTypedRuleContext(TPTPParser.Comma_general_termContext,i)


        def getRuleIndex(self):
            return TPTPParser.RULE_general_terms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_terms" ):
                listener.enterGeneral_terms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_terms" ):
                listener.exitGeneral_terms(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneral_terms" ):
                return visitor.visitGeneral_terms(self)
            else:
                return visitor.visitChildren(self)




    def general_terms(self):

        localctx = TPTPParser.General_termsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_general_terms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1746
            self.general_term()
            self.state = 1750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 1747
                self.comma_general_term()
                self.state = 1752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comma_general_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def general_term(self):
            return self.getTypedRuleContext(TPTPParser.General_termContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_comma_general_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma_general_term" ):
                listener.enterComma_general_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma_general_term" ):
                listener.exitComma_general_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComma_general_term" ):
                return visitor.visitComma_general_term(self)
            else:
                return visitor.visitChildren(self)




    def comma_general_term(self):

        localctx = TPTPParser.Comma_general_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_comma_general_term)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1753
            self.match(TPTPParser.T__1)
            self.state = 1754
            self.general_term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_word(self):
            return self.getTypedRuleContext(TPTPParser.Atomic_wordContext,0)


        def Integer(self):
            return self.getToken(TPTPParser.Integer, 0)

        def getRuleIndex(self):
            return TPTPParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = TPTPParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_name)
        try:
            self.state = 1758
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65, 66, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1756
                self.atomic_word()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1757
                self.match(TPTPParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atomic_wordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Lower_word(self):
            return self.getToken(TPTPParser.Lower_word, 0)

        def Single_quoted(self):
            return self.getToken(TPTPParser.Single_quoted, 0)

        def Back_quoted(self):
            return self.getToken(TPTPParser.Back_quoted, 0)

        def getRuleIndex(self):
            return TPTPParser.RULE_atomic_word

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomic_word" ):
                listener.enterAtomic_word(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomic_word" ):
                listener.exitAtomic_word(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomic_word" ):
                return visitor.visitAtomic_word(self)
            else:
                return visitor.visitChildren(self)




    def atomic_word(self):

        localctx = TPTPParser.Atomic_wordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_atomic_word)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1760
            _la = self._input.LA(1)
            if not(((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 67) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atomic_defined_wordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dollar_word(self):
            return self.getToken(TPTPParser.Dollar_word, 0)

        def getRuleIndex(self):
            return TPTPParser.RULE_atomic_defined_word

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomic_defined_word" ):
                listener.enterAtomic_defined_word(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomic_defined_word" ):
                listener.exitAtomic_defined_word(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomic_defined_word" ):
                return visitor.visitAtomic_defined_word(self)
            else:
                return visitor.visitChildren(self)




    def atomic_defined_word(self):

        localctx = TPTPParser.Atomic_defined_wordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_atomic_defined_word)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1762
            self.match(TPTPParser.Dollar_word)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atomic_system_wordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dollar_dollar_word(self):
            return self.getToken(TPTPParser.Dollar_dollar_word, 0)

        def getRuleIndex(self):
            return TPTPParser.RULE_atomic_system_word

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomic_system_word" ):
                listener.enterAtomic_system_word(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomic_system_word" ):
                listener.exitAtomic_system_word(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomic_system_word" ):
                return visitor.visitAtomic_system_word(self)
            else:
                return visitor.visitChildren(self)




    def atomic_system_word(self):

        localctx = TPTPParser.Atomic_system_wordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_atomic_system_word)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1764
            self.match(TPTPParser.Dollar_dollar_word)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self):
            return self.getToken(TPTPParser.Integer, 0)

        def Rational(self):
            return self.getToken(TPTPParser.Rational, 0)

        def Real(self):
            return self.getToken(TPTPParser.Real, 0)

        def getRuleIndex(self):
            return TPTPParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = TPTPParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1766
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 1153) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_word(self):
            return self.getTypedRuleContext(TPTPParser.Atomic_wordContext,0)


        def getRuleIndex(self):
            return TPTPParser.RULE_file_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_name" ):
                listener.enterFile_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_name" ):
                listener.exitFile_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_name" ):
                return visitor.visitFile_name(self)
            else:
                return visitor.visitChildren(self)




    def file_name(self):

        localctx = TPTPParser.File_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_file_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1768
            self.atomic_word()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NothingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TPTPParser.RULE_nothing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNothing" ):
                listener.enterNothing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNothing" ):
                listener.exitNothing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNothing" ):
                return visitor.visitNothing(self)
            else:
                return visitor.visitChildren(self)




    def nothing(self):

        localctx = TPTPParser.NothingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_nothing)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[17] = self.thf_or_formula_sempred
        self._predicates[18] = self.thf_and_formula_sempred
        self._predicates[19] = self.thf_apply_formula_sempred
        self._predicates[55] = self.thf_xprod_type_sempred
        self._predicates[56] = self.thf_union_type_sempred
        self._predicates[65] = self.tff_or_formula_sempred
        self._predicates[66] = self.tff_and_formula_sempred
        self._predicates[106] = self.tff_xprod_type_sempred
        self._predicates[131] = self.fof_or_formula_sempred
        self._predicates[132] = self.fof_and_formula_sempred
        self._predicates[158] = self.cnf_disjunction_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def thf_or_formula_sempred(self, localctx:Thf_or_formulaContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def thf_and_formula_sempred(self, localctx:Thf_and_formulaContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def thf_apply_formula_sempred(self, localctx:Thf_apply_formulaContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def thf_xprod_type_sempred(self, localctx:Thf_xprod_typeContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def thf_union_type_sempred(self, localctx:Thf_union_typeContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def tff_or_formula_sempred(self, localctx:Tff_or_formulaContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def tff_and_formula_sempred(self, localctx:Tff_and_formulaContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

    def tff_xprod_type_sempred(self, localctx:Tff_xprod_typeContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def fof_or_formula_sempred(self, localctx:Fof_or_formulaContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         

    def fof_and_formula_sempred(self, localctx:Fof_and_formulaContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def cnf_disjunction_sempred(self, localctx:Cnf_disjunctionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         




